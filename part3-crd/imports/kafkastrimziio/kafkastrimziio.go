// kafkastrimziio
package kafkastrimziio

import (
	_init_ "cdk8s-crd/imports/kafkastrimziio/jsii"

	"cdk8s-crd/imports/kafkastrimziio/internal"

	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/aws/constructs-go/constructs/v10"
	"github.com/cdk8s-team/cdk8s-core-go/cdk8s/v2"
)

type Kafka interface {
	cdk8s.ApiObject
	// The group portion of the API version (e.g. `authorization.k8s.io`).
	ApiGroup() *string
	// The object's API version (e.g. `authorization.k8s.io/v1`).
	ApiVersion() *string
	// The chart in which this object is defined.
	Chart() cdk8s.Chart
	// The object kind.
	Kind() *string
	// Metadata associated with this API object.
	Metadata() cdk8s.ApiObjectMetadataDefinition
	// The name of the API object.
	//
	// If a name is specified in `metadata.name` this will be the name returned.
	// Otherwise, a name will be generated by calling
	// `Chart.of(this).generatedObjectName(this)`, which by default uses the
	// construct path to generate a DNS-compatible name for the resource.
	Name() *string
	// The tree node.
	Node() constructs.Node
	// Create a dependency between this ApiObject and other constructs.
	//
	// These can be other ApiObjects, Charts, or custom.
	AddDependency(dependencies ...constructs.IConstruct)
	// Applies a set of RFC-6902 JSON-Patch operations to the manifest synthesized for this API object.
	//
	// Example:
	//     kubePod.addJsonPatch(JsonPatch.replace('/spec/enableServiceLinks', true));
	//
	AddJsonPatch(ops ...cdk8s.JsonPatch)
	// Renders the object to Kubernetes JSON.
	ToJson() interface{}
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for Kafka
type jsiiProxy_Kafka struct {
	internal.Type__cdk8sApiObject
}

func (j *jsiiProxy_Kafka) ApiGroup() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiGroup",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Kafka) ApiVersion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiVersion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Kafka) Chart() cdk8s.Chart {
	var returns cdk8s.Chart
	_jsii_.Get(
		j,
		"chart",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Kafka) Kind() *string {
	var returns *string
	_jsii_.Get(
		j,
		"kind",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Kafka) Metadata() cdk8s.ApiObjectMetadataDefinition {
	var returns cdk8s.ApiObjectMetadataDefinition
	_jsii_.Get(
		j,
		"metadata",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Kafka) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Kafka) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}


// Defines a "Kafka" API object.
func NewKafka(scope constructs.Construct, id *string, props *KafkaProps) Kafka {
	_init_.Initialize()

	j := jsiiProxy_Kafka{}

	_jsii_.Create(
		"kafkastrimziio.Kafka",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Defines a "Kafka" API object.
func NewKafka_Override(k Kafka, scope constructs.Construct, id *string, props *KafkaProps) {
	_init_.Initialize()

	_jsii_.Create(
		"kafkastrimziio.Kafka",
		[]interface{}{scope, id, props},
		k,
	)
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
func Kafka_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"kafkastrimziio.Kafka",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Renders a Kubernetes manifest for "Kafka".
//
// This can be used to inline resource manifests inside other objects (e.g. as templates).
func Kafka_Manifest(props *KafkaProps) interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"kafkastrimziio.Kafka",
		"manifest",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Returns the `ApiObject` named `Resource` which is a child of the given construct.
//
// If `c` is an `ApiObject`, it is returned directly. Throws an
// exception if the construct does not have a child named `Default` _or_ if
// this child is not an `ApiObject`.
func Kafka_Of(c constructs.IConstruct) cdk8s.ApiObject {
	_init_.Initialize()

	var returns cdk8s.ApiObject

	_jsii_.StaticInvoke(
		"kafkastrimziio.Kafka",
		"of",
		[]interface{}{c},
		&returns,
	)

	return returns
}

func Kafka_GVK() *cdk8s.GroupVersionKind {
	_init_.Initialize()
	var returns *cdk8s.GroupVersionKind
	_jsii_.StaticGet(
		"kafkastrimziio.Kafka",
		"GVK",
		&returns,
	)
	return returns
}

func (k *jsiiProxy_Kafka) AddDependency(dependencies ...constructs.IConstruct) {
	args := []interface{}{}
	for _, a := range dependencies {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		k,
		"addDependency",
		args,
	)
}

func (k *jsiiProxy_Kafka) AddJsonPatch(ops ...cdk8s.JsonPatch) {
	args := []interface{}{}
	for _, a := range ops {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		k,
		"addJsonPatch",
		args,
	)
}

func (k *jsiiProxy_Kafka) ToJson() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_Kafka) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		k,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

type KafkaProps struct {
	Metadata *cdk8s.ApiObjectMetadata `field:"optional" json:"metadata" yaml:"metadata"`
	// The specification of the Kafka and ZooKeeper clusters, and Topic Operator.
	Spec *KafkaSpec `field:"optional" json:"spec" yaml:"spec"`
}

// The specification of the Kafka and ZooKeeper clusters, and Topic Operator.
type KafkaSpec struct {
	// Configuration of the Kafka cluster.
	Kafka *KafkaSpecKafka `field:"required" json:"kafka" yaml:"kafka"`
	// Configuration of the ZooKeeper cluster.
	Zookeeper *KafkaSpecZookeeper `field:"required" json:"zookeeper" yaml:"zookeeper"`
	// Configuration of the clients certificate authority.
	ClientsCa *KafkaSpecClientsCa `field:"optional" json:"clientsCa" yaml:"clientsCa"`
	// Configuration of the cluster certificate authority.
	ClusterCa *KafkaSpecClusterCa `field:"optional" json:"clusterCa" yaml:"clusterCa"`
	// Configuration for Cruise Control deployment.
	//
	// Deploys a Cruise Control instance when specified.
	CruiseControl *KafkaSpecCruiseControl `field:"optional" json:"cruiseControl" yaml:"cruiseControl"`
	// Configuration of the Entity Operator.
	EntityOperator *KafkaSpecEntityOperator `field:"optional" json:"entityOperator" yaml:"entityOperator"`
	// Configuration for JmxTrans.
	//
	// When the property is present a JmxTrans deployment is created for gathering JMX metrics from each Kafka broker. For more information see https://github.com/jmxtrans/jmxtrans[JmxTrans GitHub].
	JmxTrans *KafkaSpecJmxTrans `field:"optional" json:"jmxTrans" yaml:"jmxTrans"`
	// Configuration of the Kafka Exporter.
	//
	// Kafka Exporter can provide additional metrics, for example lag of consumer group at topic/partition.
	KafkaExporter *KafkaSpecKafkaExporter `field:"optional" json:"kafkaExporter" yaml:"kafkaExporter"`
	// A list of time windows for maintenance tasks (that is, certificates renewal).
	//
	// Each time window is defined by a cron expression.
	MaintenanceTimeWindows *[]*string `field:"optional" json:"maintenanceTimeWindows" yaml:"maintenanceTimeWindows"`
}

// Configuration of the clients certificate authority.
type KafkaSpecClientsCa struct {
	// How should CA certificate expiration be handled when `generateCertificateAuthority=true`.
	//
	// The default is for a new CA certificate to be generated reusing the existing private key.
	CertificateExpirationPolicy KafkaSpecClientsCaCertificateExpirationPolicy `field:"optional" json:"certificateExpirationPolicy" yaml:"certificateExpirationPolicy"`
	// If true then Certificate Authority certificates will be generated automatically.
	//
	// Otherwise the user will need to provide a Secret with the CA certificate. Default is true.
	GenerateCertificateAuthority *bool `field:"optional" json:"generateCertificateAuthority" yaml:"generateCertificateAuthority"`
	// If `true`, the Cluster and Client CA Secrets are configured with the `ownerReference` set to the `Kafka` resource.
	//
	// If the `Kafka` resource is deleted when `true`, the CA Secrets are also deleted. If `false`, the `ownerReference` is disabled. If the `Kafka` resource is deleted when `false`, the CA Secrets are retained and available for reuse. Default is `true`.
	GenerateSecretOwnerReference *bool `field:"optional" json:"generateSecretOwnerReference" yaml:"generateSecretOwnerReference"`
	// The number of days in the certificate renewal period.
	//
	// This is the number of days before the a certificate expires during which renewal actions may be performed. When `generateCertificateAuthority` is true, this will cause the generation of a new certificate. When `generateCertificateAuthority` is true, this will cause extra logging at WARN level about the pending certificate expiry. Default is 30.
	RenewalDays *float64 `field:"optional" json:"renewalDays" yaml:"renewalDays"`
	// The number of days generated certificates should be valid for.
	//
	// The default is 365.
	ValidityDays *float64 `field:"optional" json:"validityDays" yaml:"validityDays"`
}

// How should CA certificate expiration be handled when `generateCertificateAuthority=true`.
//
// The default is for a new CA certificate to be generated reusing the existing private key.
type KafkaSpecClientsCaCertificateExpirationPolicy string

const (
	// renew-certificate.
	KafkaSpecClientsCaCertificateExpirationPolicy_RENEW_CERTIFICATE KafkaSpecClientsCaCertificateExpirationPolicy = "RENEW_CERTIFICATE"
	// replace-key.
	KafkaSpecClientsCaCertificateExpirationPolicy_REPLACE_KEY KafkaSpecClientsCaCertificateExpirationPolicy = "REPLACE_KEY"
)

// Configuration of the cluster certificate authority.
type KafkaSpecClusterCa struct {
	// How should CA certificate expiration be handled when `generateCertificateAuthority=true`.
	//
	// The default is for a new CA certificate to be generated reusing the existing private key.
	CertificateExpirationPolicy KafkaSpecClusterCaCertificateExpirationPolicy `field:"optional" json:"certificateExpirationPolicy" yaml:"certificateExpirationPolicy"`
	// If true then Certificate Authority certificates will be generated automatically.
	//
	// Otherwise the user will need to provide a Secret with the CA certificate. Default is true.
	GenerateCertificateAuthority *bool `field:"optional" json:"generateCertificateAuthority" yaml:"generateCertificateAuthority"`
	// If `true`, the Cluster and Client CA Secrets are configured with the `ownerReference` set to the `Kafka` resource.
	//
	// If the `Kafka` resource is deleted when `true`, the CA Secrets are also deleted. If `false`, the `ownerReference` is disabled. If the `Kafka` resource is deleted when `false`, the CA Secrets are retained and available for reuse. Default is `true`.
	GenerateSecretOwnerReference *bool `field:"optional" json:"generateSecretOwnerReference" yaml:"generateSecretOwnerReference"`
	// The number of days in the certificate renewal period.
	//
	// This is the number of days before the a certificate expires during which renewal actions may be performed. When `generateCertificateAuthority` is true, this will cause the generation of a new certificate. When `generateCertificateAuthority` is true, this will cause extra logging at WARN level about the pending certificate expiry. Default is 30.
	RenewalDays *float64 `field:"optional" json:"renewalDays" yaml:"renewalDays"`
	// The number of days generated certificates should be valid for.
	//
	// The default is 365.
	ValidityDays *float64 `field:"optional" json:"validityDays" yaml:"validityDays"`
}

// How should CA certificate expiration be handled when `generateCertificateAuthority=true`.
//
// The default is for a new CA certificate to be generated reusing the existing private key.
type KafkaSpecClusterCaCertificateExpirationPolicy string

const (
	// renew-certificate.
	KafkaSpecClusterCaCertificateExpirationPolicy_RENEW_CERTIFICATE KafkaSpecClusterCaCertificateExpirationPolicy = "RENEW_CERTIFICATE"
	// replace-key.
	KafkaSpecClusterCaCertificateExpirationPolicy_REPLACE_KEY KafkaSpecClusterCaCertificateExpirationPolicy = "REPLACE_KEY"
)

// Configuration for Cruise Control deployment.
//
// Deploys a Cruise Control instance when specified.
type KafkaSpecCruiseControl struct {
	// The Cruise Control `brokerCapacity` configuration.
	BrokerCapacity *KafkaSpecCruiseControlBrokerCapacity `field:"optional" json:"brokerCapacity" yaml:"brokerCapacity"`
	// The Cruise Control configuration.
	//
	// For a full list of configuration options refer to https://github.com/linkedin/cruise-control/wiki/Configurations. Note that properties with the following prefixes cannot be set: bootstrap.servers, client.id, zookeeper., network., security., failed.brokers.zk.path,webserver.http., webserver.api.urlprefix, webserver.session.path, webserver.accesslog., two.step., request.reason.required,metric.reporter.sampler.bootstrap.servers, capacity.config.file, self.healing., ssl., kafka.broker.failure.detection.enable, topic.config.provider.class (with the exception of: ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols, webserver.http.cors.enabled, webserver.http.cors.origin, webserver.http.cors.exposeheaders, webserver.security.enable, webserver.ssl.enable).
	Config interface{} `field:"optional" json:"config" yaml:"config"`
	// The docker image for the pods.
	Image *string `field:"optional" json:"image" yaml:"image"`
	// JVM Options for the Cruise Control container.
	JvmOptions *KafkaSpecCruiseControlJvmOptions `field:"optional" json:"jvmOptions" yaml:"jvmOptions"`
	// Pod liveness checking for the Cruise Control container.
	LivenessProbe *KafkaSpecCruiseControlLivenessProbe `field:"optional" json:"livenessProbe" yaml:"livenessProbe"`
	// Logging configuration (Log4j 2) for Cruise Control.
	Logging *KafkaSpecCruiseControlLogging `field:"optional" json:"logging" yaml:"logging"`
	// Metrics configuration.
	MetricsConfig *KafkaSpecCruiseControlMetricsConfig `field:"optional" json:"metricsConfig" yaml:"metricsConfig"`
	// Pod readiness checking for the Cruise Control container.
	ReadinessProbe *KafkaSpecCruiseControlReadinessProbe `field:"optional" json:"readinessProbe" yaml:"readinessProbe"`
	// CPU and memory resources to reserve for the Cruise Control container.
	Resources *KafkaSpecCruiseControlResources `field:"optional" json:"resources" yaml:"resources"`
	// Template to specify how Cruise Control resources, `Deployments` and `Pods`, are generated.
	Template *KafkaSpecCruiseControlTemplate `field:"optional" json:"template" yaml:"template"`
	// TLS sidecar configuration.
	TlsSidecar *KafkaSpecCruiseControlTlsSidecar `field:"optional" json:"tlsSidecar" yaml:"tlsSidecar"`
}

// The Cruise Control `brokerCapacity` configuration.
type KafkaSpecCruiseControlBrokerCapacity struct {
	// Broker capacity for CPU resource utilization as a percentage (0 - 100).
	CpuUtilization *float64 `field:"optional" json:"cpuUtilization" yaml:"cpuUtilization"`
	// Broker capacity for disk in bytes.
	//
	// Use a number value with either standard Kubernetes byte units (K, M, G, or T), their bibyte (power of two) equivalents (Ki, Mi, Gi, or Ti), or a byte value with or without E notation. For example, 100000M, 100000Mi, 104857600000, or 1e+11.
	Disk *string `field:"optional" json:"disk" yaml:"disk"`
	// Broker capacity for inbound network throughput in bytes per second.
	//
	// Use an integer value with standard Kubernetes byte units (K, M, G) or their bibyte (power of two) equivalents (Ki, Mi, Gi) per second. For example, 10000KiB/s.
	InboundNetwork *string `field:"optional" json:"inboundNetwork" yaml:"inboundNetwork"`
	// Broker capacity for outbound network throughput in bytes per second.
	//
	// Use an integer value with standard Kubernetes byte units (K, M, G) or their bibyte (power of two) equivalents (Ki, Mi, Gi) per second. For example, 10000KiB/s.
	OutboundNetwork *string `field:"optional" json:"outboundNetwork" yaml:"outboundNetwork"`
}

// JVM Options for the Cruise Control container.
type KafkaSpecCruiseControlJvmOptions struct {
	// Specifies whether the Garbage Collection logging is enabled.
	//
	// The default is false.
	GcLoggingEnabled *bool `field:"optional" json:"gcLoggingEnabled" yaml:"gcLoggingEnabled"`
	// A map of additional system properties which will be passed using the `-D` option to the JVM.
	JavaSystemProperties *[]*KafkaSpecCruiseControlJvmOptionsJavaSystemProperties `field:"optional" json:"javaSystemProperties" yaml:"javaSystemProperties"`
	// -Xms option to to the JVM.
	Xms *string `field:"optional" json:"xms" yaml:"xms"`
	// -Xmx option to to the JVM.
	Xmx *string `field:"optional" json:"xmx" yaml:"xmx"`
	// A map of -XX options to the JVM.
	Xx interface{} `field:"optional" json:"xx" yaml:"xx"`
}

type KafkaSpecCruiseControlJvmOptionsJavaSystemProperties struct {
	// The system property name.
	Name *string `field:"optional" json:"name" yaml:"name"`
	// The system property value.
	Value *string `field:"optional" json:"value" yaml:"value"`
}

// Pod liveness checking for the Cruise Control container.
type KafkaSpecCruiseControlLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	//
	// Defaults to 3. Minimum value is 1.
	FailureThreshold *float64 `field:"optional" json:"failureThreshold" yaml:"failureThreshold"`
	// The initial delay before first the health is first checked.
	//
	// Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds *float64 `field:"optional" json:"initialDelaySeconds" yaml:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	//
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *float64 `field:"optional" json:"periodSeconds" yaml:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	//
	// Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *float64 `field:"optional" json:"successThreshold" yaml:"successThreshold"`
	// The timeout for each attempted health check.
	//
	// Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds *float64 `field:"optional" json:"timeoutSeconds" yaml:"timeoutSeconds"`
}

// Logging configuration (Log4j 2) for Cruise Control.
type KafkaSpecCruiseControlLogging struct {
	// Logging type, must be either 'inline' or 'external'.
	Type KafkaSpecCruiseControlLoggingType `field:"required" json:"type" yaml:"type"`
	// A Map from logger name to logger level.
	Loggers interface{} `field:"optional" json:"loggers" yaml:"loggers"`
	// `ConfigMap` entry where the logging configuration is stored.
	ValueFrom *KafkaSpecCruiseControlLoggingValueFrom `field:"optional" json:"valueFrom" yaml:"valueFrom"`
}

// Logging type, must be either 'inline' or 'external'.
type KafkaSpecCruiseControlLoggingType string

const (
	// inline.
	KafkaSpecCruiseControlLoggingType_INLINE KafkaSpecCruiseControlLoggingType = "INLINE"
	// external.
	KafkaSpecCruiseControlLoggingType_EXTERNAL KafkaSpecCruiseControlLoggingType = "EXTERNAL"
)

// `ConfigMap` entry where the logging configuration is stored.
type KafkaSpecCruiseControlLoggingValueFrom struct {
	// Reference to the key in the ConfigMap containing the configuration.
	ConfigMapKeyRef *KafkaSpecCruiseControlLoggingValueFromConfigMapKeyRef `field:"optional" json:"configMapKeyRef" yaml:"configMapKeyRef"`
}

// Reference to the key in the ConfigMap containing the configuration.
type KafkaSpecCruiseControlLoggingValueFromConfigMapKeyRef struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Name *string `field:"optional" json:"name" yaml:"name"`
	Optional *bool `field:"optional" json:"optional" yaml:"optional"`
}

// Metrics configuration.
type KafkaSpecCruiseControlMetricsConfig struct {
	// Metrics type.
	//
	// Only 'jmxPrometheusExporter' supported currently.
	Type KafkaSpecCruiseControlMetricsConfigType `field:"required" json:"type" yaml:"type"`
	// ConfigMap entry where the Prometheus JMX Exporter configuration is stored.
	//
	// For details of the structure of this configuration, see the {JMXExporter}.
	ValueFrom *KafkaSpecCruiseControlMetricsConfigValueFrom `field:"required" json:"valueFrom" yaml:"valueFrom"`
}

// Metrics type.
//
// Only 'jmxPrometheusExporter' supported currently.
type KafkaSpecCruiseControlMetricsConfigType string

const (
	// jmxPrometheusExporter.
	KafkaSpecCruiseControlMetricsConfigType_JMX_PROMETHEUS_EXPORTER KafkaSpecCruiseControlMetricsConfigType = "JMX_PROMETHEUS_EXPORTER"
)

// ConfigMap entry where the Prometheus JMX Exporter configuration is stored.
//
// For details of the structure of this configuration, see the {JMXExporter}.
type KafkaSpecCruiseControlMetricsConfigValueFrom struct {
	// Reference to the key in the ConfigMap containing the configuration.
	ConfigMapKeyRef *KafkaSpecCruiseControlMetricsConfigValueFromConfigMapKeyRef `field:"optional" json:"configMapKeyRef" yaml:"configMapKeyRef"`
}

// Reference to the key in the ConfigMap containing the configuration.
type KafkaSpecCruiseControlMetricsConfigValueFromConfigMapKeyRef struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Name *string `field:"optional" json:"name" yaml:"name"`
	Optional *bool `field:"optional" json:"optional" yaml:"optional"`
}

// Pod readiness checking for the Cruise Control container.
type KafkaSpecCruiseControlReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	//
	// Defaults to 3. Minimum value is 1.
	FailureThreshold *float64 `field:"optional" json:"failureThreshold" yaml:"failureThreshold"`
	// The initial delay before first the health is first checked.
	//
	// Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds *float64 `field:"optional" json:"initialDelaySeconds" yaml:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	//
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *float64 `field:"optional" json:"periodSeconds" yaml:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	//
	// Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *float64 `field:"optional" json:"successThreshold" yaml:"successThreshold"`
	// The timeout for each attempted health check.
	//
	// Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds *float64 `field:"optional" json:"timeoutSeconds" yaml:"timeoutSeconds"`
}

// CPU and memory resources to reserve for the Cruise Control container.
type KafkaSpecCruiseControlResources struct {
	Limits interface{} `field:"optional" json:"limits" yaml:"limits"`
	Requests interface{} `field:"optional" json:"requests" yaml:"requests"`
}

// Template to specify how Cruise Control resources, `Deployments` and `Pods`, are generated.
type KafkaSpecCruiseControlTemplate struct {
	// Template for Cruise Control API `Service`.
	ApiService *KafkaSpecCruiseControlTemplateApiService `field:"optional" json:"apiService" yaml:"apiService"`
	// Template for the Cruise Control container.
	CruiseControlContainer *KafkaSpecCruiseControlTemplateCruiseControlContainer `field:"optional" json:"cruiseControlContainer" yaml:"cruiseControlContainer"`
	// Template for Cruise Control `Deployment`.
	Deployment *KafkaSpecCruiseControlTemplateDeployment `field:"optional" json:"deployment" yaml:"deployment"`
	// Template for Cruise Control `Pods`.
	Pod *KafkaSpecCruiseControlTemplatePod `field:"optional" json:"pod" yaml:"pod"`
	// Template for Cruise Control `PodDisruptionBudget`.
	PodDisruptionBudget *KafkaSpecCruiseControlTemplatePodDisruptionBudget `field:"optional" json:"podDisruptionBudget" yaml:"podDisruptionBudget"`
	// Template for the Cruise Control service account.
	ServiceAccount *KafkaSpecCruiseControlTemplateServiceAccount `field:"optional" json:"serviceAccount" yaml:"serviceAccount"`
	// Template for the Cruise Control TLS sidecar container.
	TlsSidecarContainer *KafkaSpecCruiseControlTemplateTlsSidecarContainer `field:"optional" json:"tlsSidecarContainer" yaml:"tlsSidecarContainer"`
}

// Template for Cruise Control API `Service`.
type KafkaSpecCruiseControlTemplateApiService struct {
	// Specifies the IP Families used by the service.
	//
	// Available options are `IPv4` and `IPv6. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting. Available on Kubernetes 1.20 and newer.
	IpFamilies *[]KafkaSpecCruiseControlTemplateApiServiceIpFamilies `field:"optional" json:"ipFamilies" yaml:"ipFamilies"`
	// Specifies the IP Family Policy used by the service.
	//
	// Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type. Available on Kubernetes 1.20 and newer.
	IpFamilyPolicy KafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicy `field:"optional" json:"ipFamilyPolicy" yaml:"ipFamilyPolicy"`
	// Metadata applied to the resource.
	Metadata *KafkaSpecCruiseControlTemplateApiServiceMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

type KafkaSpecCruiseControlTemplateApiServiceIpFamilies string

const (
	// IPv4.
	KafkaSpecCruiseControlTemplateApiServiceIpFamilies_I_PV4 KafkaSpecCruiseControlTemplateApiServiceIpFamilies = "I_PV4"
	// IPv6.
	KafkaSpecCruiseControlTemplateApiServiceIpFamilies_I_PV6 KafkaSpecCruiseControlTemplateApiServiceIpFamilies = "I_PV6"
)

// Specifies the IP Family Policy used by the service.
//
// Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type. Available on Kubernetes 1.20 and newer.
type KafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicy string

const (
	// SingleStack.
	KafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicy_SINGLE_STACK KafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicy = "SINGLE_STACK"
	// PreferDualStack.
	KafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicy_PREFER_DUAL_STACK KafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicy = "PREFER_DUAL_STACK"
	// RequireDualStack.
	KafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicy_REQUIRE_DUAL_STACK KafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicy = "REQUIRE_DUAL_STACK"
)

// Metadata applied to the resource.
type KafkaSpecCruiseControlTemplateApiServiceMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for the Cruise Control container.
type KafkaSpecCruiseControlTemplateCruiseControlContainer struct {
	// Environment variables which should be applied to the container.
	Env *[]*KafkaSpecCruiseControlTemplateCruiseControlContainerEnv `field:"optional" json:"env" yaml:"env"`
	// Security context for the container.
	SecurityContext *KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
}

type KafkaSpecCruiseControlTemplateCruiseControlContainerEnv struct {
	// The environment variable key.
	Name *string `field:"optional" json:"name" yaml:"name"`
	// The environment variable value.
	Value *string `field:"optional" json:"value" yaml:"value"`
}

// Security context for the container.
type KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContext struct {
	AllowPrivilegeEscalation *bool `field:"optional" json:"allowPrivilegeEscalation" yaml:"allowPrivilegeEscalation"`
	Capabilities *KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextCapabilities `field:"optional" json:"capabilities" yaml:"capabilities"`
	Privileged *bool `field:"optional" json:"privileged" yaml:"privileged"`
	ProcMount *string `field:"optional" json:"procMount" yaml:"procMount"`
	ReadOnlyRootFilesystem *bool `field:"optional" json:"readOnlyRootFilesystem" yaml:"readOnlyRootFilesystem"`
	RunAsGroup *float64 `field:"optional" json:"runAsGroup" yaml:"runAsGroup"`
	RunAsNonRoot *bool `field:"optional" json:"runAsNonRoot" yaml:"runAsNonRoot"`
	RunAsUser *float64 `field:"optional" json:"runAsUser" yaml:"runAsUser"`
	SeccompProfile *KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextSeccompProfile `field:"optional" json:"seccompProfile" yaml:"seccompProfile"`
	SeLinuxOptions *KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextSeLinuxOptions `field:"optional" json:"seLinuxOptions" yaml:"seLinuxOptions"`
	WindowsOptions *KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextWindowsOptions `field:"optional" json:"windowsOptions" yaml:"windowsOptions"`
}

type KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextCapabilities struct {
	Add *[]*string `field:"optional" json:"add" yaml:"add"`
	Drop *[]*string `field:"optional" json:"drop" yaml:"drop"`
}

type KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextSeLinuxOptions struct {
	Level *string `field:"optional" json:"level" yaml:"level"`
	Role *string `field:"optional" json:"role" yaml:"role"`
	Type *string `field:"optional" json:"type" yaml:"type"`
	User *string `field:"optional" json:"user" yaml:"user"`
}

type KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextSeccompProfile struct {
	LocalhostProfile *string `field:"optional" json:"localhostProfile" yaml:"localhostProfile"`
	Type *string `field:"optional" json:"type" yaml:"type"`
}

type KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextWindowsOptions struct {
	GmsaCredentialSpec *string `field:"optional" json:"gmsaCredentialSpec" yaml:"gmsaCredentialSpec"`
	GmsaCredentialSpecName *string `field:"optional" json:"gmsaCredentialSpecName" yaml:"gmsaCredentialSpecName"`
	HostProcess *bool `field:"optional" json:"hostProcess" yaml:"hostProcess"`
	RunAsUserName *string `field:"optional" json:"runAsUserName" yaml:"runAsUserName"`
}

// Template for Cruise Control `Deployment`.
type KafkaSpecCruiseControlTemplateDeployment struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecCruiseControlTemplateDeploymentMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecCruiseControlTemplateDeploymentMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for Cruise Control `Pods`.
type KafkaSpecCruiseControlTemplatePod struct {
	// The pod's affinity rules.
	Affinity *KafkaSpecCruiseControlTemplatePodAffinity `field:"optional" json:"affinity" yaml:"affinity"`
	// Indicates whether information about services should be injected into Pod's environment variables.
	EnableServiceLinks *bool `field:"optional" json:"enableServiceLinks" yaml:"enableServiceLinks"`
	// The pod's HostAliases.
	//
	// HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.
	HostAliases *[]*KafkaSpecCruiseControlTemplatePodHostAliases `field:"optional" json:"hostAliases" yaml:"hostAliases"`
	// List of references to secrets in the same namespace to use for pulling any of the images used by this Pod.
	//
	// When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	ImagePullSecrets *[]*KafkaSpecCruiseControlTemplatePodImagePullSecrets `field:"optional" json:"imagePullSecrets" yaml:"imagePullSecrets"`
	// Metadata applied to the resource.
	Metadata *KafkaSpecCruiseControlTemplatePodMetadata `field:"optional" json:"metadata" yaml:"metadata"`
	// The name of the priority class used to assign priority to the pods.
	//
	// For more information about priority classes, see {K8sPriorityClass}.
	PriorityClassName *string `field:"optional" json:"priorityClassName" yaml:"priorityClassName"`
	// The name of the scheduler used to dispatch this `Pod`.
	//
	// If not specified, the default scheduler will be used.
	SchedulerName *string `field:"optional" json:"schedulerName" yaml:"schedulerName"`
	// Configures pod-level security attributes and common container settings.
	SecurityContext *KafkaSpecCruiseControlTemplatePodSecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
	// The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal.
	//
	// Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.
	TerminationGracePeriodSeconds *float64 `field:"optional" json:"terminationGracePeriodSeconds" yaml:"terminationGracePeriodSeconds"`
	// Defines the total amount (for example `1Gi`) of local storage required for temporary EmptyDir volume (`/tmp`).
	//
	// Default value is `5Mi`.
	TmpDirSizeLimit *string `field:"optional" json:"tmpDirSizeLimit" yaml:"tmpDirSizeLimit"`
	// The pod's tolerations.
	Tolerations *[]*KafkaSpecCruiseControlTemplatePodTolerations `field:"optional" json:"tolerations" yaml:"tolerations"`
	// The pod's topology spread constraints.
	TopologySpreadConstraints *[]*KafkaSpecCruiseControlTemplatePodTopologySpreadConstraints `field:"optional" json:"topologySpreadConstraints" yaml:"topologySpreadConstraints"`
}

// The pod's affinity rules.
type KafkaSpecCruiseControlTemplatePodAffinity struct {
	NodeAffinity *KafkaSpecCruiseControlTemplatePodAffinityNodeAffinity `field:"optional" json:"nodeAffinity" yaml:"nodeAffinity"`
	PodAffinity *KafkaSpecCruiseControlTemplatePodAffinityPodAffinity `field:"optional" json:"podAffinity" yaml:"podAffinity"`
	PodAntiAffinity *KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinity `field:"optional" json:"podAntiAffinity" yaml:"podAntiAffinity"`
}

type KafkaSpecCruiseControlTemplatePodAffinityNodeAffinity struct {
	PreferredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"preferredDuringSchedulingIgnoredDuringExecution" yaml:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"requiredDuringSchedulingIgnoredDuringExecution" yaml:"requiredDuringSchedulingIgnoredDuringExecution"`
}

type KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	Preference *KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference `field:"optional" json:"preference" yaml:"preference"`
	Weight *float64 `field:"optional" json:"weight" yaml:"weight"`
}

type KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference struct {
	MatchExpressions *[]*KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchFields *[]*KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields `field:"optional" json:"matchFields" yaml:"matchFields"`
}

type KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	NodeSelectorTerms *[]*KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms `field:"optional" json:"nodeSelectorTerms" yaml:"nodeSelectorTerms"`
}

type KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms struct {
	MatchExpressions *[]*KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchFields *[]*KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields `field:"optional" json:"matchFields" yaml:"matchFields"`
}

type KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinity struct {
	PreferredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"preferredDuringSchedulingIgnoredDuringExecution" yaml:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"requiredDuringSchedulingIgnoredDuringExecution" yaml:"requiredDuringSchedulingIgnoredDuringExecution"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	PodAffinityTerm *KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm `field:"optional" json:"podAffinityTerm" yaml:"podAffinityTerm"`
	Weight *float64 `field:"optional" json:"weight" yaml:"weight"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm struct {
	LabelSelector *KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector struct {
	MatchExpressions *[]*KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	LabelSelector *KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector struct {
	MatchExpressions *[]*KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinity struct {
	PreferredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"preferredDuringSchedulingIgnoredDuringExecution" yaml:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"requiredDuringSchedulingIgnoredDuringExecution" yaml:"requiredDuringSchedulingIgnoredDuringExecution"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	PodAffinityTerm *KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm `field:"optional" json:"podAffinityTerm" yaml:"podAffinityTerm"`
	Weight *float64 `field:"optional" json:"weight" yaml:"weight"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm struct {
	LabelSelector *KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector struct {
	MatchExpressions *[]*KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	LabelSelector *KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector struct {
	MatchExpressions *[]*KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

// Template for Cruise Control `PodDisruptionBudget`.
type KafkaSpecCruiseControlTemplatePodDisruptionBudget struct {
	// Maximum number of unavailable pods to allow automatic Pod eviction.
	//
	// A Pod eviction is allowed when the `maxUnavailable` number of pods or fewer are unavailable after the eviction. Setting this value to 0 prevents all voluntary evictions, so the pods must be evicted manually. Defaults to 1.
	MaxUnavailable *float64 `field:"optional" json:"maxUnavailable" yaml:"maxUnavailable"`
	// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
	Metadata *KafkaSpecCruiseControlTemplatePodDisruptionBudgetMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
type KafkaSpecCruiseControlTemplatePodDisruptionBudgetMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

type KafkaSpecCruiseControlTemplatePodHostAliases struct {
	Hostnames *[]*string `field:"optional" json:"hostnames" yaml:"hostnames"`
	Ip *string `field:"optional" json:"ip" yaml:"ip"`
}

type KafkaSpecCruiseControlTemplatePodImagePullSecrets struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
}

// Metadata applied to the resource.
type KafkaSpecCruiseControlTemplatePodMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Configures pod-level security attributes and common container settings.
type KafkaSpecCruiseControlTemplatePodSecurityContext struct {
	FsGroup *float64 `field:"optional" json:"fsGroup" yaml:"fsGroup"`
	FsGroupChangePolicy *string `field:"optional" json:"fsGroupChangePolicy" yaml:"fsGroupChangePolicy"`
	RunAsGroup *float64 `field:"optional" json:"runAsGroup" yaml:"runAsGroup"`
	RunAsNonRoot *bool `field:"optional" json:"runAsNonRoot" yaml:"runAsNonRoot"`
	RunAsUser *float64 `field:"optional" json:"runAsUser" yaml:"runAsUser"`
	SeccompProfile *KafkaSpecCruiseControlTemplatePodSecurityContextSeccompProfile `field:"optional" json:"seccompProfile" yaml:"seccompProfile"`
	SeLinuxOptions *KafkaSpecCruiseControlTemplatePodSecurityContextSeLinuxOptions `field:"optional" json:"seLinuxOptions" yaml:"seLinuxOptions"`
	SupplementalGroups *[]*float64 `field:"optional" json:"supplementalGroups" yaml:"supplementalGroups"`
	Sysctls *[]*KafkaSpecCruiseControlTemplatePodSecurityContextSysctls `field:"optional" json:"sysctls" yaml:"sysctls"`
	WindowsOptions *KafkaSpecCruiseControlTemplatePodSecurityContextWindowsOptions `field:"optional" json:"windowsOptions" yaml:"windowsOptions"`
}

type KafkaSpecCruiseControlTemplatePodSecurityContextSeLinuxOptions struct {
	Level *string `field:"optional" json:"level" yaml:"level"`
	Role *string `field:"optional" json:"role" yaml:"role"`
	Type *string `field:"optional" json:"type" yaml:"type"`
	User *string `field:"optional" json:"user" yaml:"user"`
}

type KafkaSpecCruiseControlTemplatePodSecurityContextSeccompProfile struct {
	LocalhostProfile *string `field:"optional" json:"localhostProfile" yaml:"localhostProfile"`
	Type *string `field:"optional" json:"type" yaml:"type"`
}

type KafkaSpecCruiseControlTemplatePodSecurityContextSysctls struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
	Value *string `field:"optional" json:"value" yaml:"value"`
}

type KafkaSpecCruiseControlTemplatePodSecurityContextWindowsOptions struct {
	GmsaCredentialSpec *string `field:"optional" json:"gmsaCredentialSpec" yaml:"gmsaCredentialSpec"`
	GmsaCredentialSpecName *string `field:"optional" json:"gmsaCredentialSpecName" yaml:"gmsaCredentialSpecName"`
	HostProcess *bool `field:"optional" json:"hostProcess" yaml:"hostProcess"`
	RunAsUserName *string `field:"optional" json:"runAsUserName" yaml:"runAsUserName"`
}

type KafkaSpecCruiseControlTemplatePodTolerations struct {
	Effect *string `field:"optional" json:"effect" yaml:"effect"`
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	TolerationSeconds *float64 `field:"optional" json:"tolerationSeconds" yaml:"tolerationSeconds"`
	Value *string `field:"optional" json:"value" yaml:"value"`
}

type KafkaSpecCruiseControlTemplatePodTopologySpreadConstraints struct {
	LabelSelector *KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	MaxSkew *float64 `field:"optional" json:"maxSkew" yaml:"maxSkew"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
	WhenUnsatisfiable *string `field:"optional" json:"whenUnsatisfiable" yaml:"whenUnsatisfiable"`
}

type KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsLabelSelector struct {
	MatchExpressions *[]*KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

// Template for the Cruise Control service account.
type KafkaSpecCruiseControlTemplateServiceAccount struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecCruiseControlTemplateServiceAccountMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecCruiseControlTemplateServiceAccountMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for the Cruise Control TLS sidecar container.
type KafkaSpecCruiseControlTemplateTlsSidecarContainer struct {
	// Environment variables which should be applied to the container.
	Env *[]*KafkaSpecCruiseControlTemplateTlsSidecarContainerEnv `field:"optional" json:"env" yaml:"env"`
	// Security context for the container.
	SecurityContext *KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
}

type KafkaSpecCruiseControlTemplateTlsSidecarContainerEnv struct {
	// The environment variable key.
	Name *string `field:"optional" json:"name" yaml:"name"`
	// The environment variable value.
	Value *string `field:"optional" json:"value" yaml:"value"`
}

// Security context for the container.
type KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContext struct {
	AllowPrivilegeEscalation *bool `field:"optional" json:"allowPrivilegeEscalation" yaml:"allowPrivilegeEscalation"`
	Capabilities *KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextCapabilities `field:"optional" json:"capabilities" yaml:"capabilities"`
	Privileged *bool `field:"optional" json:"privileged" yaml:"privileged"`
	ProcMount *string `field:"optional" json:"procMount" yaml:"procMount"`
	ReadOnlyRootFilesystem *bool `field:"optional" json:"readOnlyRootFilesystem" yaml:"readOnlyRootFilesystem"`
	RunAsGroup *float64 `field:"optional" json:"runAsGroup" yaml:"runAsGroup"`
	RunAsNonRoot *bool `field:"optional" json:"runAsNonRoot" yaml:"runAsNonRoot"`
	RunAsUser *float64 `field:"optional" json:"runAsUser" yaml:"runAsUser"`
	SeccompProfile *KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextSeccompProfile `field:"optional" json:"seccompProfile" yaml:"seccompProfile"`
	SeLinuxOptions *KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextSeLinuxOptions `field:"optional" json:"seLinuxOptions" yaml:"seLinuxOptions"`
	WindowsOptions *KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextWindowsOptions `field:"optional" json:"windowsOptions" yaml:"windowsOptions"`
}

type KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextCapabilities struct {
	Add *[]*string `field:"optional" json:"add" yaml:"add"`
	Drop *[]*string `field:"optional" json:"drop" yaml:"drop"`
}

type KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextSeLinuxOptions struct {
	Level *string `field:"optional" json:"level" yaml:"level"`
	Role *string `field:"optional" json:"role" yaml:"role"`
	Type *string `field:"optional" json:"type" yaml:"type"`
	User *string `field:"optional" json:"user" yaml:"user"`
}

type KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextSeccompProfile struct {
	LocalhostProfile *string `field:"optional" json:"localhostProfile" yaml:"localhostProfile"`
	Type *string `field:"optional" json:"type" yaml:"type"`
}

type KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextWindowsOptions struct {
	GmsaCredentialSpec *string `field:"optional" json:"gmsaCredentialSpec" yaml:"gmsaCredentialSpec"`
	GmsaCredentialSpecName *string `field:"optional" json:"gmsaCredentialSpecName" yaml:"gmsaCredentialSpecName"`
	HostProcess *bool `field:"optional" json:"hostProcess" yaml:"hostProcess"`
	RunAsUserName *string `field:"optional" json:"runAsUserName" yaml:"runAsUserName"`
}

// TLS sidecar configuration.
type KafkaSpecCruiseControlTlsSidecar struct {
	// The docker image for the container.
	Image *string `field:"optional" json:"image" yaml:"image"`
	// Pod liveness checking.
	LivenessProbe *KafkaSpecCruiseControlTlsSidecarLivenessProbe `field:"optional" json:"livenessProbe" yaml:"livenessProbe"`
	// The log level for the TLS sidecar.
	//
	// Default value is `notice`.
	LogLevel KafkaSpecCruiseControlTlsSidecarLogLevel `field:"optional" json:"logLevel" yaml:"logLevel"`
	// Pod readiness checking.
	ReadinessProbe *KafkaSpecCruiseControlTlsSidecarReadinessProbe `field:"optional" json:"readinessProbe" yaml:"readinessProbe"`
	// CPU and memory resources to reserve.
	Resources *KafkaSpecCruiseControlTlsSidecarResources `field:"optional" json:"resources" yaml:"resources"`
}

// Pod liveness checking.
type KafkaSpecCruiseControlTlsSidecarLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	//
	// Defaults to 3. Minimum value is 1.
	FailureThreshold *float64 `field:"optional" json:"failureThreshold" yaml:"failureThreshold"`
	// The initial delay before first the health is first checked.
	//
	// Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds *float64 `field:"optional" json:"initialDelaySeconds" yaml:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	//
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *float64 `field:"optional" json:"periodSeconds" yaml:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	//
	// Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *float64 `field:"optional" json:"successThreshold" yaml:"successThreshold"`
	// The timeout for each attempted health check.
	//
	// Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds *float64 `field:"optional" json:"timeoutSeconds" yaml:"timeoutSeconds"`
}

// The log level for the TLS sidecar.
//
// Default value is `notice`.
type KafkaSpecCruiseControlTlsSidecarLogLevel string

const (
	// emerg.
	KafkaSpecCruiseControlTlsSidecarLogLevel_EMERG KafkaSpecCruiseControlTlsSidecarLogLevel = "EMERG"
	// alert.
	KafkaSpecCruiseControlTlsSidecarLogLevel_ALERT KafkaSpecCruiseControlTlsSidecarLogLevel = "ALERT"
	// crit.
	KafkaSpecCruiseControlTlsSidecarLogLevel_CRIT KafkaSpecCruiseControlTlsSidecarLogLevel = "CRIT"
	// err.
	KafkaSpecCruiseControlTlsSidecarLogLevel_ERR KafkaSpecCruiseControlTlsSidecarLogLevel = "ERR"
	// warning.
	KafkaSpecCruiseControlTlsSidecarLogLevel_WARNING KafkaSpecCruiseControlTlsSidecarLogLevel = "WARNING"
	// notice.
	KafkaSpecCruiseControlTlsSidecarLogLevel_NOTICE KafkaSpecCruiseControlTlsSidecarLogLevel = "NOTICE"
	// info.
	KafkaSpecCruiseControlTlsSidecarLogLevel_INFO KafkaSpecCruiseControlTlsSidecarLogLevel = "INFO"
	// debug.
	KafkaSpecCruiseControlTlsSidecarLogLevel_DEBUG KafkaSpecCruiseControlTlsSidecarLogLevel = "DEBUG"
)

// Pod readiness checking.
type KafkaSpecCruiseControlTlsSidecarReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	//
	// Defaults to 3. Minimum value is 1.
	FailureThreshold *float64 `field:"optional" json:"failureThreshold" yaml:"failureThreshold"`
	// The initial delay before first the health is first checked.
	//
	// Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds *float64 `field:"optional" json:"initialDelaySeconds" yaml:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	//
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *float64 `field:"optional" json:"periodSeconds" yaml:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	//
	// Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *float64 `field:"optional" json:"successThreshold" yaml:"successThreshold"`
	// The timeout for each attempted health check.
	//
	// Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds *float64 `field:"optional" json:"timeoutSeconds" yaml:"timeoutSeconds"`
}

// CPU and memory resources to reserve.
type KafkaSpecCruiseControlTlsSidecarResources struct {
	Limits interface{} `field:"optional" json:"limits" yaml:"limits"`
	Requests interface{} `field:"optional" json:"requests" yaml:"requests"`
}

// Configuration of the Entity Operator.
type KafkaSpecEntityOperator struct {
	// Template for Entity Operator resources.
	//
	// The template allows users to specify how is the `Deployment` and `Pods` generated.
	Template *KafkaSpecEntityOperatorTemplate `field:"optional" json:"template" yaml:"template"`
	// TLS sidecar configuration.
	TlsSidecar *KafkaSpecEntityOperatorTlsSidecar `field:"optional" json:"tlsSidecar" yaml:"tlsSidecar"`
	// Configuration of the Topic Operator.
	TopicOperator *KafkaSpecEntityOperatorTopicOperator `field:"optional" json:"topicOperator" yaml:"topicOperator"`
	// Configuration of the User Operator.
	UserOperator *KafkaSpecEntityOperatorUserOperator `field:"optional" json:"userOperator" yaml:"userOperator"`
}

// Template for Entity Operator resources.
//
// The template allows users to specify how is the `Deployment` and `Pods` generated.
type KafkaSpecEntityOperatorTemplate struct {
	// Template for Entity Operator `Deployment`.
	Deployment *KafkaSpecEntityOperatorTemplateDeployment `field:"optional" json:"deployment" yaml:"deployment"`
	// Template for Entity Operator `Pods`.
	Pod *KafkaSpecEntityOperatorTemplatePod `field:"optional" json:"pod" yaml:"pod"`
	// Template for the Entity Operator service account.
	ServiceAccount *KafkaSpecEntityOperatorTemplateServiceAccount `field:"optional" json:"serviceAccount" yaml:"serviceAccount"`
	// Template for the Entity Operator TLS sidecar container.
	TlsSidecarContainer *KafkaSpecEntityOperatorTemplateTlsSidecarContainer `field:"optional" json:"tlsSidecarContainer" yaml:"tlsSidecarContainer"`
	// Template for the Entity Topic Operator container.
	TopicOperatorContainer *KafkaSpecEntityOperatorTemplateTopicOperatorContainer `field:"optional" json:"topicOperatorContainer" yaml:"topicOperatorContainer"`
	// Template for the Entity User Operator container.
	UserOperatorContainer *KafkaSpecEntityOperatorTemplateUserOperatorContainer `field:"optional" json:"userOperatorContainer" yaml:"userOperatorContainer"`
}

// Template for Entity Operator `Deployment`.
type KafkaSpecEntityOperatorTemplateDeployment struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecEntityOperatorTemplateDeploymentMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecEntityOperatorTemplateDeploymentMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for Entity Operator `Pods`.
type KafkaSpecEntityOperatorTemplatePod struct {
	// The pod's affinity rules.
	Affinity *KafkaSpecEntityOperatorTemplatePodAffinity `field:"optional" json:"affinity" yaml:"affinity"`
	// Indicates whether information about services should be injected into Pod's environment variables.
	EnableServiceLinks *bool `field:"optional" json:"enableServiceLinks" yaml:"enableServiceLinks"`
	// The pod's HostAliases.
	//
	// HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.
	HostAliases *[]*KafkaSpecEntityOperatorTemplatePodHostAliases `field:"optional" json:"hostAliases" yaml:"hostAliases"`
	// List of references to secrets in the same namespace to use for pulling any of the images used by this Pod.
	//
	// When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	ImagePullSecrets *[]*KafkaSpecEntityOperatorTemplatePodImagePullSecrets `field:"optional" json:"imagePullSecrets" yaml:"imagePullSecrets"`
	// Metadata applied to the resource.
	Metadata *KafkaSpecEntityOperatorTemplatePodMetadata `field:"optional" json:"metadata" yaml:"metadata"`
	// The name of the priority class used to assign priority to the pods.
	//
	// For more information about priority classes, see {K8sPriorityClass}.
	PriorityClassName *string `field:"optional" json:"priorityClassName" yaml:"priorityClassName"`
	// The name of the scheduler used to dispatch this `Pod`.
	//
	// If not specified, the default scheduler will be used.
	SchedulerName *string `field:"optional" json:"schedulerName" yaml:"schedulerName"`
	// Configures pod-level security attributes and common container settings.
	SecurityContext *KafkaSpecEntityOperatorTemplatePodSecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
	// The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal.
	//
	// Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.
	TerminationGracePeriodSeconds *float64 `field:"optional" json:"terminationGracePeriodSeconds" yaml:"terminationGracePeriodSeconds"`
	// Defines the total amount (for example `1Gi`) of local storage required for temporary EmptyDir volume (`/tmp`).
	//
	// Default value is `5Mi`.
	TmpDirSizeLimit *string `field:"optional" json:"tmpDirSizeLimit" yaml:"tmpDirSizeLimit"`
	// The pod's tolerations.
	Tolerations *[]*KafkaSpecEntityOperatorTemplatePodTolerations `field:"optional" json:"tolerations" yaml:"tolerations"`
	// The pod's topology spread constraints.
	TopologySpreadConstraints *[]*KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraints `field:"optional" json:"topologySpreadConstraints" yaml:"topologySpreadConstraints"`
}

// The pod's affinity rules.
type KafkaSpecEntityOperatorTemplatePodAffinity struct {
	NodeAffinity *KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinity `field:"optional" json:"nodeAffinity" yaml:"nodeAffinity"`
	PodAffinity *KafkaSpecEntityOperatorTemplatePodAffinityPodAffinity `field:"optional" json:"podAffinity" yaml:"podAffinity"`
	PodAntiAffinity *KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinity `field:"optional" json:"podAntiAffinity" yaml:"podAntiAffinity"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinity struct {
	PreferredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"preferredDuringSchedulingIgnoredDuringExecution" yaml:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"requiredDuringSchedulingIgnoredDuringExecution" yaml:"requiredDuringSchedulingIgnoredDuringExecution"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	Preference *KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference `field:"optional" json:"preference" yaml:"preference"`
	Weight *float64 `field:"optional" json:"weight" yaml:"weight"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference struct {
	MatchExpressions *[]*KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchFields *[]*KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields `field:"optional" json:"matchFields" yaml:"matchFields"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	NodeSelectorTerms *[]*KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms `field:"optional" json:"nodeSelectorTerms" yaml:"nodeSelectorTerms"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms struct {
	MatchExpressions *[]*KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchFields *[]*KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields `field:"optional" json:"matchFields" yaml:"matchFields"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinity struct {
	PreferredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"preferredDuringSchedulingIgnoredDuringExecution" yaml:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"requiredDuringSchedulingIgnoredDuringExecution" yaml:"requiredDuringSchedulingIgnoredDuringExecution"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	PodAffinityTerm *KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm `field:"optional" json:"podAffinityTerm" yaml:"podAffinityTerm"`
	Weight *float64 `field:"optional" json:"weight" yaml:"weight"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm struct {
	LabelSelector *KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector struct {
	MatchExpressions *[]*KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	LabelSelector *KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector struct {
	MatchExpressions *[]*KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinity struct {
	PreferredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"preferredDuringSchedulingIgnoredDuringExecution" yaml:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"requiredDuringSchedulingIgnoredDuringExecution" yaml:"requiredDuringSchedulingIgnoredDuringExecution"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	PodAffinityTerm *KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm `field:"optional" json:"podAffinityTerm" yaml:"podAffinityTerm"`
	Weight *float64 `field:"optional" json:"weight" yaml:"weight"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm struct {
	LabelSelector *KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector struct {
	MatchExpressions *[]*KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	LabelSelector *KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector struct {
	MatchExpressions *[]*KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecEntityOperatorTemplatePodHostAliases struct {
	Hostnames *[]*string `field:"optional" json:"hostnames" yaml:"hostnames"`
	Ip *string `field:"optional" json:"ip" yaml:"ip"`
}

type KafkaSpecEntityOperatorTemplatePodImagePullSecrets struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
}

// Metadata applied to the resource.
type KafkaSpecEntityOperatorTemplatePodMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Configures pod-level security attributes and common container settings.
type KafkaSpecEntityOperatorTemplatePodSecurityContext struct {
	FsGroup *float64 `field:"optional" json:"fsGroup" yaml:"fsGroup"`
	FsGroupChangePolicy *string `field:"optional" json:"fsGroupChangePolicy" yaml:"fsGroupChangePolicy"`
	RunAsGroup *float64 `field:"optional" json:"runAsGroup" yaml:"runAsGroup"`
	RunAsNonRoot *bool `field:"optional" json:"runAsNonRoot" yaml:"runAsNonRoot"`
	RunAsUser *float64 `field:"optional" json:"runAsUser" yaml:"runAsUser"`
	SeccompProfile *KafkaSpecEntityOperatorTemplatePodSecurityContextSeccompProfile `field:"optional" json:"seccompProfile" yaml:"seccompProfile"`
	SeLinuxOptions *KafkaSpecEntityOperatorTemplatePodSecurityContextSeLinuxOptions `field:"optional" json:"seLinuxOptions" yaml:"seLinuxOptions"`
	SupplementalGroups *[]*float64 `field:"optional" json:"supplementalGroups" yaml:"supplementalGroups"`
	Sysctls *[]*KafkaSpecEntityOperatorTemplatePodSecurityContextSysctls `field:"optional" json:"sysctls" yaml:"sysctls"`
	WindowsOptions *KafkaSpecEntityOperatorTemplatePodSecurityContextWindowsOptions `field:"optional" json:"windowsOptions" yaml:"windowsOptions"`
}

type KafkaSpecEntityOperatorTemplatePodSecurityContextSeLinuxOptions struct {
	Level *string `field:"optional" json:"level" yaml:"level"`
	Role *string `field:"optional" json:"role" yaml:"role"`
	Type *string `field:"optional" json:"type" yaml:"type"`
	User *string `field:"optional" json:"user" yaml:"user"`
}

type KafkaSpecEntityOperatorTemplatePodSecurityContextSeccompProfile struct {
	LocalhostProfile *string `field:"optional" json:"localhostProfile" yaml:"localhostProfile"`
	Type *string `field:"optional" json:"type" yaml:"type"`
}

type KafkaSpecEntityOperatorTemplatePodSecurityContextSysctls struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
	Value *string `field:"optional" json:"value" yaml:"value"`
}

type KafkaSpecEntityOperatorTemplatePodSecurityContextWindowsOptions struct {
	GmsaCredentialSpec *string `field:"optional" json:"gmsaCredentialSpec" yaml:"gmsaCredentialSpec"`
	GmsaCredentialSpecName *string `field:"optional" json:"gmsaCredentialSpecName" yaml:"gmsaCredentialSpecName"`
	HostProcess *bool `field:"optional" json:"hostProcess" yaml:"hostProcess"`
	RunAsUserName *string `field:"optional" json:"runAsUserName" yaml:"runAsUserName"`
}

type KafkaSpecEntityOperatorTemplatePodTolerations struct {
	Effect *string `field:"optional" json:"effect" yaml:"effect"`
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	TolerationSeconds *float64 `field:"optional" json:"tolerationSeconds" yaml:"tolerationSeconds"`
	Value *string `field:"optional" json:"value" yaml:"value"`
}

type KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraints struct {
	LabelSelector *KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	MaxSkew *float64 `field:"optional" json:"maxSkew" yaml:"maxSkew"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
	WhenUnsatisfiable *string `field:"optional" json:"whenUnsatisfiable" yaml:"whenUnsatisfiable"`
}

type KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsLabelSelector struct {
	MatchExpressions *[]*KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

// Template for the Entity Operator service account.
type KafkaSpecEntityOperatorTemplateServiceAccount struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecEntityOperatorTemplateServiceAccountMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecEntityOperatorTemplateServiceAccountMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for the Entity Operator TLS sidecar container.
type KafkaSpecEntityOperatorTemplateTlsSidecarContainer struct {
	// Environment variables which should be applied to the container.
	Env *[]*KafkaSpecEntityOperatorTemplateTlsSidecarContainerEnv `field:"optional" json:"env" yaml:"env"`
	// Security context for the container.
	SecurityContext *KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
}

type KafkaSpecEntityOperatorTemplateTlsSidecarContainerEnv struct {
	// The environment variable key.
	Name *string `field:"optional" json:"name" yaml:"name"`
	// The environment variable value.
	Value *string `field:"optional" json:"value" yaml:"value"`
}

// Security context for the container.
type KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContext struct {
	AllowPrivilegeEscalation *bool `field:"optional" json:"allowPrivilegeEscalation" yaml:"allowPrivilegeEscalation"`
	Capabilities *KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextCapabilities `field:"optional" json:"capabilities" yaml:"capabilities"`
	Privileged *bool `field:"optional" json:"privileged" yaml:"privileged"`
	ProcMount *string `field:"optional" json:"procMount" yaml:"procMount"`
	ReadOnlyRootFilesystem *bool `field:"optional" json:"readOnlyRootFilesystem" yaml:"readOnlyRootFilesystem"`
	RunAsGroup *float64 `field:"optional" json:"runAsGroup" yaml:"runAsGroup"`
	RunAsNonRoot *bool `field:"optional" json:"runAsNonRoot" yaml:"runAsNonRoot"`
	RunAsUser *float64 `field:"optional" json:"runAsUser" yaml:"runAsUser"`
	SeccompProfile *KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextSeccompProfile `field:"optional" json:"seccompProfile" yaml:"seccompProfile"`
	SeLinuxOptions *KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextSeLinuxOptions `field:"optional" json:"seLinuxOptions" yaml:"seLinuxOptions"`
	WindowsOptions *KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextWindowsOptions `field:"optional" json:"windowsOptions" yaml:"windowsOptions"`
}

type KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextCapabilities struct {
	Add *[]*string `field:"optional" json:"add" yaml:"add"`
	Drop *[]*string `field:"optional" json:"drop" yaml:"drop"`
}

type KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextSeLinuxOptions struct {
	Level *string `field:"optional" json:"level" yaml:"level"`
	Role *string `field:"optional" json:"role" yaml:"role"`
	Type *string `field:"optional" json:"type" yaml:"type"`
	User *string `field:"optional" json:"user" yaml:"user"`
}

type KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextSeccompProfile struct {
	LocalhostProfile *string `field:"optional" json:"localhostProfile" yaml:"localhostProfile"`
	Type *string `field:"optional" json:"type" yaml:"type"`
}

type KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextWindowsOptions struct {
	GmsaCredentialSpec *string `field:"optional" json:"gmsaCredentialSpec" yaml:"gmsaCredentialSpec"`
	GmsaCredentialSpecName *string `field:"optional" json:"gmsaCredentialSpecName" yaml:"gmsaCredentialSpecName"`
	HostProcess *bool `field:"optional" json:"hostProcess" yaml:"hostProcess"`
	RunAsUserName *string `field:"optional" json:"runAsUserName" yaml:"runAsUserName"`
}

// Template for the Entity Topic Operator container.
type KafkaSpecEntityOperatorTemplateTopicOperatorContainer struct {
	// Environment variables which should be applied to the container.
	Env *[]*KafkaSpecEntityOperatorTemplateTopicOperatorContainerEnv `field:"optional" json:"env" yaml:"env"`
	// Security context for the container.
	SecurityContext *KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
}

type KafkaSpecEntityOperatorTemplateTopicOperatorContainerEnv struct {
	// The environment variable key.
	Name *string `field:"optional" json:"name" yaml:"name"`
	// The environment variable value.
	Value *string `field:"optional" json:"value" yaml:"value"`
}

// Security context for the container.
type KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContext struct {
	AllowPrivilegeEscalation *bool `field:"optional" json:"allowPrivilegeEscalation" yaml:"allowPrivilegeEscalation"`
	Capabilities *KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextCapabilities `field:"optional" json:"capabilities" yaml:"capabilities"`
	Privileged *bool `field:"optional" json:"privileged" yaml:"privileged"`
	ProcMount *string `field:"optional" json:"procMount" yaml:"procMount"`
	ReadOnlyRootFilesystem *bool `field:"optional" json:"readOnlyRootFilesystem" yaml:"readOnlyRootFilesystem"`
	RunAsGroup *float64 `field:"optional" json:"runAsGroup" yaml:"runAsGroup"`
	RunAsNonRoot *bool `field:"optional" json:"runAsNonRoot" yaml:"runAsNonRoot"`
	RunAsUser *float64 `field:"optional" json:"runAsUser" yaml:"runAsUser"`
	SeccompProfile *KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextSeccompProfile `field:"optional" json:"seccompProfile" yaml:"seccompProfile"`
	SeLinuxOptions *KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextSeLinuxOptions `field:"optional" json:"seLinuxOptions" yaml:"seLinuxOptions"`
	WindowsOptions *KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextWindowsOptions `field:"optional" json:"windowsOptions" yaml:"windowsOptions"`
}

type KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextCapabilities struct {
	Add *[]*string `field:"optional" json:"add" yaml:"add"`
	Drop *[]*string `field:"optional" json:"drop" yaml:"drop"`
}

type KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextSeLinuxOptions struct {
	Level *string `field:"optional" json:"level" yaml:"level"`
	Role *string `field:"optional" json:"role" yaml:"role"`
	Type *string `field:"optional" json:"type" yaml:"type"`
	User *string `field:"optional" json:"user" yaml:"user"`
}

type KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextSeccompProfile struct {
	LocalhostProfile *string `field:"optional" json:"localhostProfile" yaml:"localhostProfile"`
	Type *string `field:"optional" json:"type" yaml:"type"`
}

type KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextWindowsOptions struct {
	GmsaCredentialSpec *string `field:"optional" json:"gmsaCredentialSpec" yaml:"gmsaCredentialSpec"`
	GmsaCredentialSpecName *string `field:"optional" json:"gmsaCredentialSpecName" yaml:"gmsaCredentialSpecName"`
	HostProcess *bool `field:"optional" json:"hostProcess" yaml:"hostProcess"`
	RunAsUserName *string `field:"optional" json:"runAsUserName" yaml:"runAsUserName"`
}

// Template for the Entity User Operator container.
type KafkaSpecEntityOperatorTemplateUserOperatorContainer struct {
	// Environment variables which should be applied to the container.
	Env *[]*KafkaSpecEntityOperatorTemplateUserOperatorContainerEnv `field:"optional" json:"env" yaml:"env"`
	// Security context for the container.
	SecurityContext *KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
}

type KafkaSpecEntityOperatorTemplateUserOperatorContainerEnv struct {
	// The environment variable key.
	Name *string `field:"optional" json:"name" yaml:"name"`
	// The environment variable value.
	Value *string `field:"optional" json:"value" yaml:"value"`
}

// Security context for the container.
type KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContext struct {
	AllowPrivilegeEscalation *bool `field:"optional" json:"allowPrivilegeEscalation" yaml:"allowPrivilegeEscalation"`
	Capabilities *KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextCapabilities `field:"optional" json:"capabilities" yaml:"capabilities"`
	Privileged *bool `field:"optional" json:"privileged" yaml:"privileged"`
	ProcMount *string `field:"optional" json:"procMount" yaml:"procMount"`
	ReadOnlyRootFilesystem *bool `field:"optional" json:"readOnlyRootFilesystem" yaml:"readOnlyRootFilesystem"`
	RunAsGroup *float64 `field:"optional" json:"runAsGroup" yaml:"runAsGroup"`
	RunAsNonRoot *bool `field:"optional" json:"runAsNonRoot" yaml:"runAsNonRoot"`
	RunAsUser *float64 `field:"optional" json:"runAsUser" yaml:"runAsUser"`
	SeccompProfile *KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextSeccompProfile `field:"optional" json:"seccompProfile" yaml:"seccompProfile"`
	SeLinuxOptions *KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextSeLinuxOptions `field:"optional" json:"seLinuxOptions" yaml:"seLinuxOptions"`
	WindowsOptions *KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextWindowsOptions `field:"optional" json:"windowsOptions" yaml:"windowsOptions"`
}

type KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextCapabilities struct {
	Add *[]*string `field:"optional" json:"add" yaml:"add"`
	Drop *[]*string `field:"optional" json:"drop" yaml:"drop"`
}

type KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextSeLinuxOptions struct {
	Level *string `field:"optional" json:"level" yaml:"level"`
	Role *string `field:"optional" json:"role" yaml:"role"`
	Type *string `field:"optional" json:"type" yaml:"type"`
	User *string `field:"optional" json:"user" yaml:"user"`
}

type KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextSeccompProfile struct {
	LocalhostProfile *string `field:"optional" json:"localhostProfile" yaml:"localhostProfile"`
	Type *string `field:"optional" json:"type" yaml:"type"`
}

type KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextWindowsOptions struct {
	GmsaCredentialSpec *string `field:"optional" json:"gmsaCredentialSpec" yaml:"gmsaCredentialSpec"`
	GmsaCredentialSpecName *string `field:"optional" json:"gmsaCredentialSpecName" yaml:"gmsaCredentialSpecName"`
	HostProcess *bool `field:"optional" json:"hostProcess" yaml:"hostProcess"`
	RunAsUserName *string `field:"optional" json:"runAsUserName" yaml:"runAsUserName"`
}

// TLS sidecar configuration.
type KafkaSpecEntityOperatorTlsSidecar struct {
	// The docker image for the container.
	Image *string `field:"optional" json:"image" yaml:"image"`
	// Pod liveness checking.
	LivenessProbe *KafkaSpecEntityOperatorTlsSidecarLivenessProbe `field:"optional" json:"livenessProbe" yaml:"livenessProbe"`
	// The log level for the TLS sidecar.
	//
	// Default value is `notice`.
	LogLevel KafkaSpecEntityOperatorTlsSidecarLogLevel `field:"optional" json:"logLevel" yaml:"logLevel"`
	// Pod readiness checking.
	ReadinessProbe *KafkaSpecEntityOperatorTlsSidecarReadinessProbe `field:"optional" json:"readinessProbe" yaml:"readinessProbe"`
	// CPU and memory resources to reserve.
	Resources *KafkaSpecEntityOperatorTlsSidecarResources `field:"optional" json:"resources" yaml:"resources"`
}

// Pod liveness checking.
type KafkaSpecEntityOperatorTlsSidecarLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	//
	// Defaults to 3. Minimum value is 1.
	FailureThreshold *float64 `field:"optional" json:"failureThreshold" yaml:"failureThreshold"`
	// The initial delay before first the health is first checked.
	//
	// Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds *float64 `field:"optional" json:"initialDelaySeconds" yaml:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	//
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *float64 `field:"optional" json:"periodSeconds" yaml:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	//
	// Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *float64 `field:"optional" json:"successThreshold" yaml:"successThreshold"`
	// The timeout for each attempted health check.
	//
	// Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds *float64 `field:"optional" json:"timeoutSeconds" yaml:"timeoutSeconds"`
}

// The log level for the TLS sidecar.
//
// Default value is `notice`.
type KafkaSpecEntityOperatorTlsSidecarLogLevel string

const (
	// emerg.
	KafkaSpecEntityOperatorTlsSidecarLogLevel_EMERG KafkaSpecEntityOperatorTlsSidecarLogLevel = "EMERG"
	// alert.
	KafkaSpecEntityOperatorTlsSidecarLogLevel_ALERT KafkaSpecEntityOperatorTlsSidecarLogLevel = "ALERT"
	// crit.
	KafkaSpecEntityOperatorTlsSidecarLogLevel_CRIT KafkaSpecEntityOperatorTlsSidecarLogLevel = "CRIT"
	// err.
	KafkaSpecEntityOperatorTlsSidecarLogLevel_ERR KafkaSpecEntityOperatorTlsSidecarLogLevel = "ERR"
	// warning.
	KafkaSpecEntityOperatorTlsSidecarLogLevel_WARNING KafkaSpecEntityOperatorTlsSidecarLogLevel = "WARNING"
	// notice.
	KafkaSpecEntityOperatorTlsSidecarLogLevel_NOTICE KafkaSpecEntityOperatorTlsSidecarLogLevel = "NOTICE"
	// info.
	KafkaSpecEntityOperatorTlsSidecarLogLevel_INFO KafkaSpecEntityOperatorTlsSidecarLogLevel = "INFO"
	// debug.
	KafkaSpecEntityOperatorTlsSidecarLogLevel_DEBUG KafkaSpecEntityOperatorTlsSidecarLogLevel = "DEBUG"
)

// Pod readiness checking.
type KafkaSpecEntityOperatorTlsSidecarReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	//
	// Defaults to 3. Minimum value is 1.
	FailureThreshold *float64 `field:"optional" json:"failureThreshold" yaml:"failureThreshold"`
	// The initial delay before first the health is first checked.
	//
	// Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds *float64 `field:"optional" json:"initialDelaySeconds" yaml:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	//
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *float64 `field:"optional" json:"periodSeconds" yaml:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	//
	// Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *float64 `field:"optional" json:"successThreshold" yaml:"successThreshold"`
	// The timeout for each attempted health check.
	//
	// Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds *float64 `field:"optional" json:"timeoutSeconds" yaml:"timeoutSeconds"`
}

// CPU and memory resources to reserve.
type KafkaSpecEntityOperatorTlsSidecarResources struct {
	Limits interface{} `field:"optional" json:"limits" yaml:"limits"`
	Requests interface{} `field:"optional" json:"requests" yaml:"requests"`
}

// Configuration of the Topic Operator.
type KafkaSpecEntityOperatorTopicOperator struct {
	// The image to use for the Topic Operator.
	Image *string `field:"optional" json:"image" yaml:"image"`
	// JVM Options for pods.
	JvmOptions *KafkaSpecEntityOperatorTopicOperatorJvmOptions `field:"optional" json:"jvmOptions" yaml:"jvmOptions"`
	// Pod liveness checking.
	LivenessProbe *KafkaSpecEntityOperatorTopicOperatorLivenessProbe `field:"optional" json:"livenessProbe" yaml:"livenessProbe"`
	// Logging configuration.
	Logging *KafkaSpecEntityOperatorTopicOperatorLogging `field:"optional" json:"logging" yaml:"logging"`
	// Pod readiness checking.
	ReadinessProbe *KafkaSpecEntityOperatorTopicOperatorReadinessProbe `field:"optional" json:"readinessProbe" yaml:"readinessProbe"`
	// Interval between periodic reconciliations.
	ReconciliationIntervalSeconds *float64 `field:"optional" json:"reconciliationIntervalSeconds" yaml:"reconciliationIntervalSeconds"`
	// CPU and memory resources to reserve.
	Resources *KafkaSpecEntityOperatorTopicOperatorResources `field:"optional" json:"resources" yaml:"resources"`
	// Pod startup checking.
	StartupProbe *KafkaSpecEntityOperatorTopicOperatorStartupProbe `field:"optional" json:"startupProbe" yaml:"startupProbe"`
	// The number of attempts at getting topic metadata.
	TopicMetadataMaxAttempts *float64 `field:"optional" json:"topicMetadataMaxAttempts" yaml:"topicMetadataMaxAttempts"`
	// The namespace the Topic Operator should watch.
	WatchedNamespace *string `field:"optional" json:"watchedNamespace" yaml:"watchedNamespace"`
	// Timeout for the ZooKeeper session.
	ZookeeperSessionTimeoutSeconds *float64 `field:"optional" json:"zookeeperSessionTimeoutSeconds" yaml:"zookeeperSessionTimeoutSeconds"`
}

// JVM Options for pods.
type KafkaSpecEntityOperatorTopicOperatorJvmOptions struct {
	// Specifies whether the Garbage Collection logging is enabled.
	//
	// The default is false.
	GcLoggingEnabled *bool `field:"optional" json:"gcLoggingEnabled" yaml:"gcLoggingEnabled"`
	// A map of additional system properties which will be passed using the `-D` option to the JVM.
	JavaSystemProperties *[]*KafkaSpecEntityOperatorTopicOperatorJvmOptionsJavaSystemProperties `field:"optional" json:"javaSystemProperties" yaml:"javaSystemProperties"`
	// -Xms option to to the JVM.
	Xms *string `field:"optional" json:"xms" yaml:"xms"`
	// -Xmx option to to the JVM.
	Xmx *string `field:"optional" json:"xmx" yaml:"xmx"`
	// A map of -XX options to the JVM.
	Xx interface{} `field:"optional" json:"xx" yaml:"xx"`
}

type KafkaSpecEntityOperatorTopicOperatorJvmOptionsJavaSystemProperties struct {
	// The system property name.
	Name *string `field:"optional" json:"name" yaml:"name"`
	// The system property value.
	Value *string `field:"optional" json:"value" yaml:"value"`
}

// Pod liveness checking.
type KafkaSpecEntityOperatorTopicOperatorLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	//
	// Defaults to 3. Minimum value is 1.
	FailureThreshold *float64 `field:"optional" json:"failureThreshold" yaml:"failureThreshold"`
	// The initial delay before first the health is first checked.
	//
	// Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds *float64 `field:"optional" json:"initialDelaySeconds" yaml:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	//
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *float64 `field:"optional" json:"periodSeconds" yaml:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	//
	// Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *float64 `field:"optional" json:"successThreshold" yaml:"successThreshold"`
	// The timeout for each attempted health check.
	//
	// Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds *float64 `field:"optional" json:"timeoutSeconds" yaml:"timeoutSeconds"`
}

// Logging configuration.
type KafkaSpecEntityOperatorTopicOperatorLogging struct {
	// Logging type, must be either 'inline' or 'external'.
	Type KafkaSpecEntityOperatorTopicOperatorLoggingType `field:"required" json:"type" yaml:"type"`
	// A Map from logger name to logger level.
	Loggers interface{} `field:"optional" json:"loggers" yaml:"loggers"`
	// `ConfigMap` entry where the logging configuration is stored.
	ValueFrom *KafkaSpecEntityOperatorTopicOperatorLoggingValueFrom `field:"optional" json:"valueFrom" yaml:"valueFrom"`
}

// Logging type, must be either 'inline' or 'external'.
type KafkaSpecEntityOperatorTopicOperatorLoggingType string

const (
	// inline.
	KafkaSpecEntityOperatorTopicOperatorLoggingType_INLINE KafkaSpecEntityOperatorTopicOperatorLoggingType = "INLINE"
	// external.
	KafkaSpecEntityOperatorTopicOperatorLoggingType_EXTERNAL KafkaSpecEntityOperatorTopicOperatorLoggingType = "EXTERNAL"
)

// `ConfigMap` entry where the logging configuration is stored.
type KafkaSpecEntityOperatorTopicOperatorLoggingValueFrom struct {
	// Reference to the key in the ConfigMap containing the configuration.
	ConfigMapKeyRef *KafkaSpecEntityOperatorTopicOperatorLoggingValueFromConfigMapKeyRef `field:"optional" json:"configMapKeyRef" yaml:"configMapKeyRef"`
}

// Reference to the key in the ConfigMap containing the configuration.
type KafkaSpecEntityOperatorTopicOperatorLoggingValueFromConfigMapKeyRef struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Name *string `field:"optional" json:"name" yaml:"name"`
	Optional *bool `field:"optional" json:"optional" yaml:"optional"`
}

// Pod readiness checking.
type KafkaSpecEntityOperatorTopicOperatorReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	//
	// Defaults to 3. Minimum value is 1.
	FailureThreshold *float64 `field:"optional" json:"failureThreshold" yaml:"failureThreshold"`
	// The initial delay before first the health is first checked.
	//
	// Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds *float64 `field:"optional" json:"initialDelaySeconds" yaml:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	//
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *float64 `field:"optional" json:"periodSeconds" yaml:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	//
	// Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *float64 `field:"optional" json:"successThreshold" yaml:"successThreshold"`
	// The timeout for each attempted health check.
	//
	// Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds *float64 `field:"optional" json:"timeoutSeconds" yaml:"timeoutSeconds"`
}

// CPU and memory resources to reserve.
type KafkaSpecEntityOperatorTopicOperatorResources struct {
	Limits interface{} `field:"optional" json:"limits" yaml:"limits"`
	Requests interface{} `field:"optional" json:"requests" yaml:"requests"`
}

// Pod startup checking.
type KafkaSpecEntityOperatorTopicOperatorStartupProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	//
	// Defaults to 3. Minimum value is 1.
	FailureThreshold *float64 `field:"optional" json:"failureThreshold" yaml:"failureThreshold"`
	// The initial delay before first the health is first checked.
	//
	// Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds *float64 `field:"optional" json:"initialDelaySeconds" yaml:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	//
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *float64 `field:"optional" json:"periodSeconds" yaml:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	//
	// Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *float64 `field:"optional" json:"successThreshold" yaml:"successThreshold"`
	// The timeout for each attempted health check.
	//
	// Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds *float64 `field:"optional" json:"timeoutSeconds" yaml:"timeoutSeconds"`
}

// Configuration of the User Operator.
type KafkaSpecEntityOperatorUserOperator struct {
	// The image to use for the User Operator.
	Image *string `field:"optional" json:"image" yaml:"image"`
	// JVM Options for pods.
	JvmOptions *KafkaSpecEntityOperatorUserOperatorJvmOptions `field:"optional" json:"jvmOptions" yaml:"jvmOptions"`
	// Pod liveness checking.
	LivenessProbe *KafkaSpecEntityOperatorUserOperatorLivenessProbe `field:"optional" json:"livenessProbe" yaml:"livenessProbe"`
	// Logging configuration.
	Logging *KafkaSpecEntityOperatorUserOperatorLogging `field:"optional" json:"logging" yaml:"logging"`
	// Pod readiness checking.
	ReadinessProbe *KafkaSpecEntityOperatorUserOperatorReadinessProbe `field:"optional" json:"readinessProbe" yaml:"readinessProbe"`
	// Interval between periodic reconciliations.
	ReconciliationIntervalSeconds *float64 `field:"optional" json:"reconciliationIntervalSeconds" yaml:"reconciliationIntervalSeconds"`
	// CPU and memory resources to reserve.
	Resources *KafkaSpecEntityOperatorUserOperatorResources `field:"optional" json:"resources" yaml:"resources"`
	// The prefix that will be added to the KafkaUser name to be used as the Secret name.
	SecretPrefix *string `field:"optional" json:"secretPrefix" yaml:"secretPrefix"`
	// The namespace the User Operator should watch.
	WatchedNamespace *string `field:"optional" json:"watchedNamespace" yaml:"watchedNamespace"`
	// Timeout for the ZooKeeper session.
	ZookeeperSessionTimeoutSeconds *float64 `field:"optional" json:"zookeeperSessionTimeoutSeconds" yaml:"zookeeperSessionTimeoutSeconds"`
}

// JVM Options for pods.
type KafkaSpecEntityOperatorUserOperatorJvmOptions struct {
	// Specifies whether the Garbage Collection logging is enabled.
	//
	// The default is false.
	GcLoggingEnabled *bool `field:"optional" json:"gcLoggingEnabled" yaml:"gcLoggingEnabled"`
	// A map of additional system properties which will be passed using the `-D` option to the JVM.
	JavaSystemProperties *[]*KafkaSpecEntityOperatorUserOperatorJvmOptionsJavaSystemProperties `field:"optional" json:"javaSystemProperties" yaml:"javaSystemProperties"`
	// -Xms option to to the JVM.
	Xms *string `field:"optional" json:"xms" yaml:"xms"`
	// -Xmx option to to the JVM.
	Xmx *string `field:"optional" json:"xmx" yaml:"xmx"`
	// A map of -XX options to the JVM.
	Xx interface{} `field:"optional" json:"xx" yaml:"xx"`
}

type KafkaSpecEntityOperatorUserOperatorJvmOptionsJavaSystemProperties struct {
	// The system property name.
	Name *string `field:"optional" json:"name" yaml:"name"`
	// The system property value.
	Value *string `field:"optional" json:"value" yaml:"value"`
}

// Pod liveness checking.
type KafkaSpecEntityOperatorUserOperatorLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	//
	// Defaults to 3. Minimum value is 1.
	FailureThreshold *float64 `field:"optional" json:"failureThreshold" yaml:"failureThreshold"`
	// The initial delay before first the health is first checked.
	//
	// Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds *float64 `field:"optional" json:"initialDelaySeconds" yaml:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	//
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *float64 `field:"optional" json:"periodSeconds" yaml:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	//
	// Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *float64 `field:"optional" json:"successThreshold" yaml:"successThreshold"`
	// The timeout for each attempted health check.
	//
	// Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds *float64 `field:"optional" json:"timeoutSeconds" yaml:"timeoutSeconds"`
}

// Logging configuration.
type KafkaSpecEntityOperatorUserOperatorLogging struct {
	// Logging type, must be either 'inline' or 'external'.
	Type KafkaSpecEntityOperatorUserOperatorLoggingType `field:"required" json:"type" yaml:"type"`
	// A Map from logger name to logger level.
	Loggers interface{} `field:"optional" json:"loggers" yaml:"loggers"`
	// `ConfigMap` entry where the logging configuration is stored.
	ValueFrom *KafkaSpecEntityOperatorUserOperatorLoggingValueFrom `field:"optional" json:"valueFrom" yaml:"valueFrom"`
}

// Logging type, must be either 'inline' or 'external'.
type KafkaSpecEntityOperatorUserOperatorLoggingType string

const (
	// inline.
	KafkaSpecEntityOperatorUserOperatorLoggingType_INLINE KafkaSpecEntityOperatorUserOperatorLoggingType = "INLINE"
	// external.
	KafkaSpecEntityOperatorUserOperatorLoggingType_EXTERNAL KafkaSpecEntityOperatorUserOperatorLoggingType = "EXTERNAL"
)

// `ConfigMap` entry where the logging configuration is stored.
type KafkaSpecEntityOperatorUserOperatorLoggingValueFrom struct {
	// Reference to the key in the ConfigMap containing the configuration.
	ConfigMapKeyRef *KafkaSpecEntityOperatorUserOperatorLoggingValueFromConfigMapKeyRef `field:"optional" json:"configMapKeyRef" yaml:"configMapKeyRef"`
}

// Reference to the key in the ConfigMap containing the configuration.
type KafkaSpecEntityOperatorUserOperatorLoggingValueFromConfigMapKeyRef struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Name *string `field:"optional" json:"name" yaml:"name"`
	Optional *bool `field:"optional" json:"optional" yaml:"optional"`
}

// Pod readiness checking.
type KafkaSpecEntityOperatorUserOperatorReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	//
	// Defaults to 3. Minimum value is 1.
	FailureThreshold *float64 `field:"optional" json:"failureThreshold" yaml:"failureThreshold"`
	// The initial delay before first the health is first checked.
	//
	// Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds *float64 `field:"optional" json:"initialDelaySeconds" yaml:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	//
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *float64 `field:"optional" json:"periodSeconds" yaml:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	//
	// Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *float64 `field:"optional" json:"successThreshold" yaml:"successThreshold"`
	// The timeout for each attempted health check.
	//
	// Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds *float64 `field:"optional" json:"timeoutSeconds" yaml:"timeoutSeconds"`
}

// CPU and memory resources to reserve.
type KafkaSpecEntityOperatorUserOperatorResources struct {
	Limits interface{} `field:"optional" json:"limits" yaml:"limits"`
	Requests interface{} `field:"optional" json:"requests" yaml:"requests"`
}

// Configuration for JmxTrans.
//
// When the property is present a JmxTrans deployment is created for gathering JMX metrics from each Kafka broker. For more information see https://github.com/jmxtrans/jmxtrans[JmxTrans GitHub].
type KafkaSpecJmxTrans struct {
	// Queries to send to the Kafka brokers to define what data should be read from each broker.
	//
	// For more information on these properties see, xref:type-JmxTransQueryTemplate-reference[`JmxTransQueryTemplate` schema reference].
	KafkaQueries *[]*KafkaSpecJmxTransKafkaQueries `field:"required" json:"kafkaQueries" yaml:"kafkaQueries"`
	// Defines the output hosts that will be referenced later on.
	//
	// For more information on these properties see, xref:type-JmxTransOutputDefinitionTemplate-reference[`JmxTransOutputDefinitionTemplate` schema reference].
	OutputDefinitions *[]*KafkaSpecJmxTransOutputDefinitions `field:"required" json:"outputDefinitions" yaml:"outputDefinitions"`
	// The image to use for the JmxTrans.
	Image *string `field:"optional" json:"image" yaml:"image"`
	// Sets the logging level of the JmxTrans deployment.For more information see, https://github.com/jmxtrans/jmxtrans-agent/wiki/Troubleshooting[JmxTrans Logging Level].
	LogLevel *string `field:"optional" json:"logLevel" yaml:"logLevel"`
	// CPU and memory resources to reserve.
	Resources *KafkaSpecJmxTransResources `field:"optional" json:"resources" yaml:"resources"`
	// Template for JmxTrans resources.
	Template *KafkaSpecJmxTransTemplate `field:"optional" json:"template" yaml:"template"`
}

type KafkaSpecJmxTransKafkaQueries struct {
	// Determine which attributes of the targeted MBean should be included.
	Attributes *[]*string `field:"required" json:"attributes" yaml:"attributes"`
	// List of the names of output definitions specified in the spec.kafka.jmxTrans.outputDefinitions that have defined where JMX metrics are pushed to, and in which data format.
	Outputs *[]*string `field:"required" json:"outputs" yaml:"outputs"`
	// If using wildcards instead of a specific MBean then the data is gathered from multiple MBeans.
	//
	// Otherwise if specifying an MBean then data is gathered from that specified MBean.
	TargetMBean *string `field:"required" json:"targetMBean" yaml:"targetMBean"`
}

type KafkaSpecJmxTransOutputDefinitions struct {
	// Template for setting the name of the output definition.
	//
	// This is used to identify where to send the results of queries should be sent.
	Name *string `field:"required" json:"name" yaml:"name"`
	// Template for setting the format of the data that will be pushed.For more information see https://github.com/jmxtrans/jmxtrans/wiki/OutputWriters[JmxTrans OutputWriters].
	OutputType *string `field:"required" json:"outputType" yaml:"outputType"`
	// How many seconds the JmxTrans waits before pushing a new set of data out.
	FlushDelayInSeconds *float64 `field:"optional" json:"flushDelayInSeconds" yaml:"flushDelayInSeconds"`
	// The DNS/hostname of the remote host that the data is pushed to.
	Host *string `field:"optional" json:"host" yaml:"host"`
	// The port of the remote host that the data is pushed to.
	Port *float64 `field:"optional" json:"port" yaml:"port"`
	// Template for filtering data to be included in response to a wildcard query.
	//
	// For more information see https://github.com/jmxtrans/jmxtrans/wiki/Queries[JmxTrans queries].
	TypeNames *[]*string `field:"optional" json:"typeNames" yaml:"typeNames"`
}

// CPU and memory resources to reserve.
type KafkaSpecJmxTransResources struct {
	Limits interface{} `field:"optional" json:"limits" yaml:"limits"`
	Requests interface{} `field:"optional" json:"requests" yaml:"requests"`
}

// Template for JmxTrans resources.
type KafkaSpecJmxTransTemplate struct {
	// Template for JmxTrans container.
	Container *KafkaSpecJmxTransTemplateContainer `field:"optional" json:"container" yaml:"container"`
	// Template for JmxTrans `Deployment`.
	Deployment *KafkaSpecJmxTransTemplateDeployment `field:"optional" json:"deployment" yaml:"deployment"`
	// Template for JmxTrans `Pods`.
	Pod *KafkaSpecJmxTransTemplatePod `field:"optional" json:"pod" yaml:"pod"`
	// Template for the JMX Trans service account.
	ServiceAccount *KafkaSpecJmxTransTemplateServiceAccount `field:"optional" json:"serviceAccount" yaml:"serviceAccount"`
}

// Template for JmxTrans container.
type KafkaSpecJmxTransTemplateContainer struct {
	// Environment variables which should be applied to the container.
	Env *[]*KafkaSpecJmxTransTemplateContainerEnv `field:"optional" json:"env" yaml:"env"`
	// Security context for the container.
	SecurityContext *KafkaSpecJmxTransTemplateContainerSecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
}

type KafkaSpecJmxTransTemplateContainerEnv struct {
	// The environment variable key.
	Name *string `field:"optional" json:"name" yaml:"name"`
	// The environment variable value.
	Value *string `field:"optional" json:"value" yaml:"value"`
}

// Security context for the container.
type KafkaSpecJmxTransTemplateContainerSecurityContext struct {
	AllowPrivilegeEscalation *bool `field:"optional" json:"allowPrivilegeEscalation" yaml:"allowPrivilegeEscalation"`
	Capabilities *KafkaSpecJmxTransTemplateContainerSecurityContextCapabilities `field:"optional" json:"capabilities" yaml:"capabilities"`
	Privileged *bool `field:"optional" json:"privileged" yaml:"privileged"`
	ProcMount *string `field:"optional" json:"procMount" yaml:"procMount"`
	ReadOnlyRootFilesystem *bool `field:"optional" json:"readOnlyRootFilesystem" yaml:"readOnlyRootFilesystem"`
	RunAsGroup *float64 `field:"optional" json:"runAsGroup" yaml:"runAsGroup"`
	RunAsNonRoot *bool `field:"optional" json:"runAsNonRoot" yaml:"runAsNonRoot"`
	RunAsUser *float64 `field:"optional" json:"runAsUser" yaml:"runAsUser"`
	SeccompProfile *KafkaSpecJmxTransTemplateContainerSecurityContextSeccompProfile `field:"optional" json:"seccompProfile" yaml:"seccompProfile"`
	SeLinuxOptions *KafkaSpecJmxTransTemplateContainerSecurityContextSeLinuxOptions `field:"optional" json:"seLinuxOptions" yaml:"seLinuxOptions"`
	WindowsOptions *KafkaSpecJmxTransTemplateContainerSecurityContextWindowsOptions `field:"optional" json:"windowsOptions" yaml:"windowsOptions"`
}

type KafkaSpecJmxTransTemplateContainerSecurityContextCapabilities struct {
	Add *[]*string `field:"optional" json:"add" yaml:"add"`
	Drop *[]*string `field:"optional" json:"drop" yaml:"drop"`
}

type KafkaSpecJmxTransTemplateContainerSecurityContextSeLinuxOptions struct {
	Level *string `field:"optional" json:"level" yaml:"level"`
	Role *string `field:"optional" json:"role" yaml:"role"`
	Type *string `field:"optional" json:"type" yaml:"type"`
	User *string `field:"optional" json:"user" yaml:"user"`
}

type KafkaSpecJmxTransTemplateContainerSecurityContextSeccompProfile struct {
	LocalhostProfile *string `field:"optional" json:"localhostProfile" yaml:"localhostProfile"`
	Type *string `field:"optional" json:"type" yaml:"type"`
}

type KafkaSpecJmxTransTemplateContainerSecurityContextWindowsOptions struct {
	GmsaCredentialSpec *string `field:"optional" json:"gmsaCredentialSpec" yaml:"gmsaCredentialSpec"`
	GmsaCredentialSpecName *string `field:"optional" json:"gmsaCredentialSpecName" yaml:"gmsaCredentialSpecName"`
	HostProcess *bool `field:"optional" json:"hostProcess" yaml:"hostProcess"`
	RunAsUserName *string `field:"optional" json:"runAsUserName" yaml:"runAsUserName"`
}

// Template for JmxTrans `Deployment`.
type KafkaSpecJmxTransTemplateDeployment struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecJmxTransTemplateDeploymentMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecJmxTransTemplateDeploymentMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for JmxTrans `Pods`.
type KafkaSpecJmxTransTemplatePod struct {
	// The pod's affinity rules.
	Affinity *KafkaSpecJmxTransTemplatePodAffinity `field:"optional" json:"affinity" yaml:"affinity"`
	// Indicates whether information about services should be injected into Pod's environment variables.
	EnableServiceLinks *bool `field:"optional" json:"enableServiceLinks" yaml:"enableServiceLinks"`
	// The pod's HostAliases.
	//
	// HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.
	HostAliases *[]*KafkaSpecJmxTransTemplatePodHostAliases `field:"optional" json:"hostAliases" yaml:"hostAliases"`
	// List of references to secrets in the same namespace to use for pulling any of the images used by this Pod.
	//
	// When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	ImagePullSecrets *[]*KafkaSpecJmxTransTemplatePodImagePullSecrets `field:"optional" json:"imagePullSecrets" yaml:"imagePullSecrets"`
	// Metadata applied to the resource.
	Metadata *KafkaSpecJmxTransTemplatePodMetadata `field:"optional" json:"metadata" yaml:"metadata"`
	// The name of the priority class used to assign priority to the pods.
	//
	// For more information about priority classes, see {K8sPriorityClass}.
	PriorityClassName *string `field:"optional" json:"priorityClassName" yaml:"priorityClassName"`
	// The name of the scheduler used to dispatch this `Pod`.
	//
	// If not specified, the default scheduler will be used.
	SchedulerName *string `field:"optional" json:"schedulerName" yaml:"schedulerName"`
	// Configures pod-level security attributes and common container settings.
	SecurityContext *KafkaSpecJmxTransTemplatePodSecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
	// The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal.
	//
	// Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.
	TerminationGracePeriodSeconds *float64 `field:"optional" json:"terminationGracePeriodSeconds" yaml:"terminationGracePeriodSeconds"`
	// Defines the total amount (for example `1Gi`) of local storage required for temporary EmptyDir volume (`/tmp`).
	//
	// Default value is `5Mi`.
	TmpDirSizeLimit *string `field:"optional" json:"tmpDirSizeLimit" yaml:"tmpDirSizeLimit"`
	// The pod's tolerations.
	Tolerations *[]*KafkaSpecJmxTransTemplatePodTolerations `field:"optional" json:"tolerations" yaml:"tolerations"`
	// The pod's topology spread constraints.
	TopologySpreadConstraints *[]*KafkaSpecJmxTransTemplatePodTopologySpreadConstraints `field:"optional" json:"topologySpreadConstraints" yaml:"topologySpreadConstraints"`
}

// The pod's affinity rules.
type KafkaSpecJmxTransTemplatePodAffinity struct {
	NodeAffinity *KafkaSpecJmxTransTemplatePodAffinityNodeAffinity `field:"optional" json:"nodeAffinity" yaml:"nodeAffinity"`
	PodAffinity *KafkaSpecJmxTransTemplatePodAffinityPodAffinity `field:"optional" json:"podAffinity" yaml:"podAffinity"`
	PodAntiAffinity *KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinity `field:"optional" json:"podAntiAffinity" yaml:"podAntiAffinity"`
}

type KafkaSpecJmxTransTemplatePodAffinityNodeAffinity struct {
	PreferredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"preferredDuringSchedulingIgnoredDuringExecution" yaml:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"requiredDuringSchedulingIgnoredDuringExecution" yaml:"requiredDuringSchedulingIgnoredDuringExecution"`
}

type KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	Preference *KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference `field:"optional" json:"preference" yaml:"preference"`
	Weight *float64 `field:"optional" json:"weight" yaml:"weight"`
}

type KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference struct {
	MatchExpressions *[]*KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchFields *[]*KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields `field:"optional" json:"matchFields" yaml:"matchFields"`
}

type KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	NodeSelectorTerms *[]*KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms `field:"optional" json:"nodeSelectorTerms" yaml:"nodeSelectorTerms"`
}

type KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms struct {
	MatchExpressions *[]*KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchFields *[]*KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields `field:"optional" json:"matchFields" yaml:"matchFields"`
}

type KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAffinity struct {
	PreferredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"preferredDuringSchedulingIgnoredDuringExecution" yaml:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"requiredDuringSchedulingIgnoredDuringExecution" yaml:"requiredDuringSchedulingIgnoredDuringExecution"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	PodAffinityTerm *KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm `field:"optional" json:"podAffinityTerm" yaml:"podAffinityTerm"`
	Weight *float64 `field:"optional" json:"weight" yaml:"weight"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm struct {
	LabelSelector *KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector struct {
	MatchExpressions *[]*KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	LabelSelector *KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector struct {
	MatchExpressions *[]*KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinity struct {
	PreferredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"preferredDuringSchedulingIgnoredDuringExecution" yaml:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"requiredDuringSchedulingIgnoredDuringExecution" yaml:"requiredDuringSchedulingIgnoredDuringExecution"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	PodAffinityTerm *KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm `field:"optional" json:"podAffinityTerm" yaml:"podAffinityTerm"`
	Weight *float64 `field:"optional" json:"weight" yaml:"weight"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm struct {
	LabelSelector *KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector struct {
	MatchExpressions *[]*KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	LabelSelector *KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector struct {
	MatchExpressions *[]*KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecJmxTransTemplatePodHostAliases struct {
	Hostnames *[]*string `field:"optional" json:"hostnames" yaml:"hostnames"`
	Ip *string `field:"optional" json:"ip" yaml:"ip"`
}

type KafkaSpecJmxTransTemplatePodImagePullSecrets struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
}

// Metadata applied to the resource.
type KafkaSpecJmxTransTemplatePodMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Configures pod-level security attributes and common container settings.
type KafkaSpecJmxTransTemplatePodSecurityContext struct {
	FsGroup *float64 `field:"optional" json:"fsGroup" yaml:"fsGroup"`
	FsGroupChangePolicy *string `field:"optional" json:"fsGroupChangePolicy" yaml:"fsGroupChangePolicy"`
	RunAsGroup *float64 `field:"optional" json:"runAsGroup" yaml:"runAsGroup"`
	RunAsNonRoot *bool `field:"optional" json:"runAsNonRoot" yaml:"runAsNonRoot"`
	RunAsUser *float64 `field:"optional" json:"runAsUser" yaml:"runAsUser"`
	SeccompProfile *KafkaSpecJmxTransTemplatePodSecurityContextSeccompProfile `field:"optional" json:"seccompProfile" yaml:"seccompProfile"`
	SeLinuxOptions *KafkaSpecJmxTransTemplatePodSecurityContextSeLinuxOptions `field:"optional" json:"seLinuxOptions" yaml:"seLinuxOptions"`
	SupplementalGroups *[]*float64 `field:"optional" json:"supplementalGroups" yaml:"supplementalGroups"`
	Sysctls *[]*KafkaSpecJmxTransTemplatePodSecurityContextSysctls `field:"optional" json:"sysctls" yaml:"sysctls"`
	WindowsOptions *KafkaSpecJmxTransTemplatePodSecurityContextWindowsOptions `field:"optional" json:"windowsOptions" yaml:"windowsOptions"`
}

type KafkaSpecJmxTransTemplatePodSecurityContextSeLinuxOptions struct {
	Level *string `field:"optional" json:"level" yaml:"level"`
	Role *string `field:"optional" json:"role" yaml:"role"`
	Type *string `field:"optional" json:"type" yaml:"type"`
	User *string `field:"optional" json:"user" yaml:"user"`
}

type KafkaSpecJmxTransTemplatePodSecurityContextSeccompProfile struct {
	LocalhostProfile *string `field:"optional" json:"localhostProfile" yaml:"localhostProfile"`
	Type *string `field:"optional" json:"type" yaml:"type"`
}

type KafkaSpecJmxTransTemplatePodSecurityContextSysctls struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
	Value *string `field:"optional" json:"value" yaml:"value"`
}

type KafkaSpecJmxTransTemplatePodSecurityContextWindowsOptions struct {
	GmsaCredentialSpec *string `field:"optional" json:"gmsaCredentialSpec" yaml:"gmsaCredentialSpec"`
	GmsaCredentialSpecName *string `field:"optional" json:"gmsaCredentialSpecName" yaml:"gmsaCredentialSpecName"`
	HostProcess *bool `field:"optional" json:"hostProcess" yaml:"hostProcess"`
	RunAsUserName *string `field:"optional" json:"runAsUserName" yaml:"runAsUserName"`
}

type KafkaSpecJmxTransTemplatePodTolerations struct {
	Effect *string `field:"optional" json:"effect" yaml:"effect"`
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	TolerationSeconds *float64 `field:"optional" json:"tolerationSeconds" yaml:"tolerationSeconds"`
	Value *string `field:"optional" json:"value" yaml:"value"`
}

type KafkaSpecJmxTransTemplatePodTopologySpreadConstraints struct {
	LabelSelector *KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	MaxSkew *float64 `field:"optional" json:"maxSkew" yaml:"maxSkew"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
	WhenUnsatisfiable *string `field:"optional" json:"whenUnsatisfiable" yaml:"whenUnsatisfiable"`
}

type KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsLabelSelector struct {
	MatchExpressions *[]*KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

// Template for the JMX Trans service account.
type KafkaSpecJmxTransTemplateServiceAccount struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecJmxTransTemplateServiceAccountMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecJmxTransTemplateServiceAccountMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Configuration of the Kafka cluster.
type KafkaSpecKafka struct {
	// Configures listeners of Kafka brokers.
	Listeners *[]*KafkaSpecKafkaListeners `field:"required" json:"listeners" yaml:"listeners"`
	// The number of pods in the cluster.
	Replicas *float64 `field:"required" json:"replicas" yaml:"replicas"`
	// Storage configuration (disk).
	//
	// Cannot be updated.
	Storage *KafkaSpecKafkaStorage `field:"required" json:"storage" yaml:"storage"`
	// Authorization configuration for Kafka brokers.
	Authorization *KafkaSpecKafkaAuthorization `field:"optional" json:"authorization" yaml:"authorization"`
	// The image of the init container used for initializing the `broker.rack`.
	BrokerRackInitImage *string `field:"optional" json:"brokerRackInitImage" yaml:"brokerRackInitImage"`
	// Kafka broker config properties with the following prefixes cannot be set: listeners, advertised., broker., listener., host.name, port, inter.broker.listener.name, sasl., ssl., security., password., log.dir, zookeeper.connect, zookeeper.set.acl, zookeeper.ssl, zookeeper.clientCnxnSocket, authorizer., super.user, cruise.control.metrics.topic, cruise.control.metrics.reporter.bootstrap.servers,node.id, process.roles, controller. (with the exception of: zookeeper.connection.timeout.ms, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols,cruise.control.metrics.topic.num.partitions, cruise.control.metrics.topic.replication.factor, cruise.control.metrics.topic.retention.ms,cruise.control.metrics.topic.auto.create.retries, cruise.control.metrics.topic.auto.create.timeout.ms,cruise.control.metrics.topic.min.insync.replicas,controller.quorum.election.backoff.max.ms, controller.quorum.election.timeout.ms, controller.quorum.fetch.timeout.ms).
	Config interface{} `field:"optional" json:"config" yaml:"config"`
	// The docker image for the pods.
	//
	// The default value depends on the configured `Kafka.spec.kafka.version`.
	Image *string `field:"optional" json:"image" yaml:"image"`
	// JMX Options for Kafka brokers.
	JmxOptions *KafkaSpecKafkaJmxOptions `field:"optional" json:"jmxOptions" yaml:"jmxOptions"`
	// JVM Options for pods.
	JvmOptions *KafkaSpecKafkaJvmOptions `field:"optional" json:"jvmOptions" yaml:"jvmOptions"`
	// Pod liveness checking.
	LivenessProbe *KafkaSpecKafkaLivenessProbe `field:"optional" json:"livenessProbe" yaml:"livenessProbe"`
	// Logging configuration for Kafka.
	Logging *KafkaSpecKafkaLogging `field:"optional" json:"logging" yaml:"logging"`
	// Metrics configuration.
	MetricsConfig *KafkaSpecKafkaMetricsConfig `field:"optional" json:"metricsConfig" yaml:"metricsConfig"`
	// Configuration of the `broker.rack` broker config.
	Rack *KafkaSpecKafkaRack `field:"optional" json:"rack" yaml:"rack"`
	// Pod readiness checking.
	ReadinessProbe *KafkaSpecKafkaReadinessProbe `field:"optional" json:"readinessProbe" yaml:"readinessProbe"`
	// CPU and memory resources to reserve.
	Resources *KafkaSpecKafkaResources `field:"optional" json:"resources" yaml:"resources"`
	// Template for Kafka cluster resources.
	//
	// The template allows users to specify how are the `StatefulSet`, `Pods` and `Services` generated.
	Template *KafkaSpecKafkaTemplate `field:"optional" json:"template" yaml:"template"`
	// The kafka broker version.
	//
	// Defaults to {DefaultKafkaVersion}. Consult the user documentation to understand the process required to upgrade or downgrade the version.
	Version *string `field:"optional" json:"version" yaml:"version"`
}

// Authorization configuration for Kafka brokers.
type KafkaSpecKafkaAuthorization struct {
	// Authorization type.
	//
	// Currently, the supported types are `simple`, `keycloak`, `opa` and `custom`. `simple` authorization type uses Kafka's `kafka.security.authorizer.AclAuthorizer` class for authorization. `keycloak` authorization type uses Keycloak Authorization Services for authorization. `opa` authorization type uses Open Policy Agent based authorization.`custom` authorization type uses user-provided implementation for authorization.
	Type KafkaSpecKafkaAuthorizationType `field:"required" json:"type" yaml:"type"`
	// Defines whether a Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent, for example, when it is temporarily unavailable).
	//
	// Defaults to `false` - all actions will be denied.
	AllowOnError *bool `field:"optional" json:"allowOnError" yaml:"allowOnError"`
	// Authorization implementation class, which must be available in classpath.
	AuthorizerClass *string `field:"optional" json:"authorizerClass" yaml:"authorizerClass"`
	// OAuth Client ID which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
	ClientId *string `field:"optional" json:"clientId" yaml:"clientId"`
	// The connect timeout in seconds when connecting to authorization server.
	//
	// If not set, the effective connect timeout is 60 seconds.
	ConnectTimeoutSeconds *float64 `field:"optional" json:"connectTimeoutSeconds" yaml:"connectTimeoutSeconds"`
	// Whether authorization decision should be delegated to the 'Simple' authorizer if DENIED by Keycloak Authorization Services policies.
	//
	// Default value is `false`.
	DelegateToKafkaAcls *bool `field:"optional" json:"delegateToKafkaAcls" yaml:"delegateToKafkaAcls"`
	// Enable or disable TLS hostname verification.
	//
	// Default value is `false`.
	DisableTlsHostnameVerification *bool `field:"optional" json:"disableTlsHostnameVerification" yaml:"disableTlsHostnameVerification"`
	// Defines whether the Open Policy Agent authorizer plugin should provide metrics.
	//
	// Defaults to `false`.
	EnableMetrics *bool `field:"optional" json:"enableMetrics" yaml:"enableMetrics"`
	// The expiration of the records kept in the local cache to avoid querying the Open Policy Agent for every request.
	//
	// Defines how often the cached authorization decisions are reloaded from the Open Policy Agent server. In milliseconds. Defaults to `3600000`.
	ExpireAfterMs *float64 `field:"optional" json:"expireAfterMs" yaml:"expireAfterMs"`
	// The time between two consecutive grants refresh runs in seconds.
	//
	// The default value is 60.
	GrantsRefreshPeriodSeconds *float64 `field:"optional" json:"grantsRefreshPeriodSeconds" yaml:"grantsRefreshPeriodSeconds"`
	// The number of threads to use to refresh grants for active sessions.
	//
	// The more threads, the more parallelism, so the sooner the job completes. However, using more threads places a heavier load on the authorization server. The default value is 5.
	GrantsRefreshPoolSize *float64 `field:"optional" json:"grantsRefreshPoolSize" yaml:"grantsRefreshPoolSize"`
	// Initial capacity of the local cache used by the authorizer to avoid querying the Open Policy Agent for every request Defaults to `5000`.
	InitialCacheCapacity *float64 `field:"optional" json:"initialCacheCapacity" yaml:"initialCacheCapacity"`
	// Maximum capacity of the local cache used by the authorizer to avoid querying the Open Policy Agent for every request.
	//
	// Defaults to `50000`.
	MaximumCacheSize *float64 `field:"optional" json:"maximumCacheSize" yaml:"maximumCacheSize"`
	// The read timeout in seconds when connecting to authorization server.
	//
	// If not set, the effective read timeout is 60 seconds.
	ReadTimeoutSeconds *float64 `field:"optional" json:"readTimeoutSeconds" yaml:"readTimeoutSeconds"`
	// List of super users, which are user principals with unlimited access rights.
	SuperUsers *[]*string `field:"optional" json:"superUsers" yaml:"superUsers"`
	// Indicates whether the custom authorizer supports the APIs for managing ACLs using the Kafka Admin API.
	//
	// Defaults to `false`.
	SupportsAdminApi *bool `field:"optional" json:"supportsAdminApi" yaml:"supportsAdminApi"`
	// Trusted certificates for TLS connection to the OAuth server.
	TlsTrustedCertificates *[]*KafkaSpecKafkaAuthorizationTlsTrustedCertificates `field:"optional" json:"tlsTrustedCertificates" yaml:"tlsTrustedCertificates"`
	// Authorization server token endpoint URI.
	TokenEndpointUri *string `field:"optional" json:"tokenEndpointUri" yaml:"tokenEndpointUri"`
	// The URL used to connect to the Open Policy Agent server.
	//
	// The URL has to include the policy which will be queried by the authorizer. This option is required.
	Url *string `field:"optional" json:"url" yaml:"url"`
}

type KafkaSpecKafkaAuthorizationTlsTrustedCertificates struct {
	// The name of the file certificate in the Secret.
	Certificate *string `field:"required" json:"certificate" yaml:"certificate"`
	// The name of the Secret containing the certificate.
	SecretName *string `field:"required" json:"secretName" yaml:"secretName"`
}

// Authorization type.
//
// Currently, the supported types are `simple`, `keycloak`, `opa` and `custom`. `simple` authorization type uses Kafka's `kafka.security.authorizer.AclAuthorizer` class for authorization. `keycloak` authorization type uses Keycloak Authorization Services for authorization. `opa` authorization type uses Open Policy Agent based authorization.`custom` authorization type uses user-provided implementation for authorization.
type KafkaSpecKafkaAuthorizationType string

const (
	// simple.
	KafkaSpecKafkaAuthorizationType_SIMPLE KafkaSpecKafkaAuthorizationType = "SIMPLE"
	// opa.
	KafkaSpecKafkaAuthorizationType_OPA KafkaSpecKafkaAuthorizationType = "OPA"
	// keycloak.
	KafkaSpecKafkaAuthorizationType_KEYCLOAK KafkaSpecKafkaAuthorizationType = "KEYCLOAK"
	// custom.
	KafkaSpecKafkaAuthorizationType_CUSTOM KafkaSpecKafkaAuthorizationType = "CUSTOM"
)

// Configuration of the Kafka Exporter.
//
// Kafka Exporter can provide additional metrics, for example lag of consumer group at topic/partition.
type KafkaSpecKafkaExporter struct {
	// Enable Sarama logging, a Go client library used by the Kafka Exporter.
	EnableSaramaLogging *bool `field:"optional" json:"enableSaramaLogging" yaml:"enableSaramaLogging"`
	// Regular expression to specify which consumer groups to collect.
	//
	// Default value is `.*`.
	GroupRegex *string `field:"optional" json:"groupRegex" yaml:"groupRegex"`
	// The docker image for the pods.
	Image *string `field:"optional" json:"image" yaml:"image"`
	// Pod liveness check.
	LivenessProbe *KafkaSpecKafkaExporterLivenessProbe `field:"optional" json:"livenessProbe" yaml:"livenessProbe"`
	// Only log messages with the given severity or above.
	//
	// Valid levels: [`info`, `debug`, `trace`]. Default log level is `info`.
	Logging *string `field:"optional" json:"logging" yaml:"logging"`
	// Pod readiness check.
	ReadinessProbe *KafkaSpecKafkaExporterReadinessProbe `field:"optional" json:"readinessProbe" yaml:"readinessProbe"`
	// CPU and memory resources to reserve.
	Resources *KafkaSpecKafkaExporterResources `field:"optional" json:"resources" yaml:"resources"`
	// Customization of deployment templates and pods.
	Template *KafkaSpecKafkaExporterTemplate `field:"optional" json:"template" yaml:"template"`
	// Regular expression to specify which topics to collect.
	//
	// Default value is `.*`.
	TopicRegex *string `field:"optional" json:"topicRegex" yaml:"topicRegex"`
}

// Pod liveness check.
type KafkaSpecKafkaExporterLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	//
	// Defaults to 3. Minimum value is 1.
	FailureThreshold *float64 `field:"optional" json:"failureThreshold" yaml:"failureThreshold"`
	// The initial delay before first the health is first checked.
	//
	// Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds *float64 `field:"optional" json:"initialDelaySeconds" yaml:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	//
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *float64 `field:"optional" json:"periodSeconds" yaml:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	//
	// Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *float64 `field:"optional" json:"successThreshold" yaml:"successThreshold"`
	// The timeout for each attempted health check.
	//
	// Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds *float64 `field:"optional" json:"timeoutSeconds" yaml:"timeoutSeconds"`
}

// Pod readiness check.
type KafkaSpecKafkaExporterReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	//
	// Defaults to 3. Minimum value is 1.
	FailureThreshold *float64 `field:"optional" json:"failureThreshold" yaml:"failureThreshold"`
	// The initial delay before first the health is first checked.
	//
	// Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds *float64 `field:"optional" json:"initialDelaySeconds" yaml:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	//
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *float64 `field:"optional" json:"periodSeconds" yaml:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	//
	// Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *float64 `field:"optional" json:"successThreshold" yaml:"successThreshold"`
	// The timeout for each attempted health check.
	//
	// Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds *float64 `field:"optional" json:"timeoutSeconds" yaml:"timeoutSeconds"`
}

// CPU and memory resources to reserve.
type KafkaSpecKafkaExporterResources struct {
	Limits interface{} `field:"optional" json:"limits" yaml:"limits"`
	Requests interface{} `field:"optional" json:"requests" yaml:"requests"`
}

// Customization of deployment templates and pods.
type KafkaSpecKafkaExporterTemplate struct {
	// Template for the Kafka Exporter container.
	Container *KafkaSpecKafkaExporterTemplateContainer `field:"optional" json:"container" yaml:"container"`
	// Template for Kafka Exporter `Deployment`.
	Deployment *KafkaSpecKafkaExporterTemplateDeployment `field:"optional" json:"deployment" yaml:"deployment"`
	// Template for Kafka Exporter `Pods`.
	Pod *KafkaSpecKafkaExporterTemplatePod `field:"optional" json:"pod" yaml:"pod"`
	// Template for Kafka Exporter `Service`.
	Service *KafkaSpecKafkaExporterTemplateService `field:"optional" json:"service" yaml:"service"`
	// Template for the Kafka Exporter service account.
	ServiceAccount *KafkaSpecKafkaExporterTemplateServiceAccount `field:"optional" json:"serviceAccount" yaml:"serviceAccount"`
}

// Template for the Kafka Exporter container.
type KafkaSpecKafkaExporterTemplateContainer struct {
	// Environment variables which should be applied to the container.
	Env *[]*KafkaSpecKafkaExporterTemplateContainerEnv `field:"optional" json:"env" yaml:"env"`
	// Security context for the container.
	SecurityContext *KafkaSpecKafkaExporterTemplateContainerSecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
}

type KafkaSpecKafkaExporterTemplateContainerEnv struct {
	// The environment variable key.
	Name *string `field:"optional" json:"name" yaml:"name"`
	// The environment variable value.
	Value *string `field:"optional" json:"value" yaml:"value"`
}

// Security context for the container.
type KafkaSpecKafkaExporterTemplateContainerSecurityContext struct {
	AllowPrivilegeEscalation *bool `field:"optional" json:"allowPrivilegeEscalation" yaml:"allowPrivilegeEscalation"`
	Capabilities *KafkaSpecKafkaExporterTemplateContainerSecurityContextCapabilities `field:"optional" json:"capabilities" yaml:"capabilities"`
	Privileged *bool `field:"optional" json:"privileged" yaml:"privileged"`
	ProcMount *string `field:"optional" json:"procMount" yaml:"procMount"`
	ReadOnlyRootFilesystem *bool `field:"optional" json:"readOnlyRootFilesystem" yaml:"readOnlyRootFilesystem"`
	RunAsGroup *float64 `field:"optional" json:"runAsGroup" yaml:"runAsGroup"`
	RunAsNonRoot *bool `field:"optional" json:"runAsNonRoot" yaml:"runAsNonRoot"`
	RunAsUser *float64 `field:"optional" json:"runAsUser" yaml:"runAsUser"`
	SeccompProfile *KafkaSpecKafkaExporterTemplateContainerSecurityContextSeccompProfile `field:"optional" json:"seccompProfile" yaml:"seccompProfile"`
	SeLinuxOptions *KafkaSpecKafkaExporterTemplateContainerSecurityContextSeLinuxOptions `field:"optional" json:"seLinuxOptions" yaml:"seLinuxOptions"`
	WindowsOptions *KafkaSpecKafkaExporterTemplateContainerSecurityContextWindowsOptions `field:"optional" json:"windowsOptions" yaml:"windowsOptions"`
}

type KafkaSpecKafkaExporterTemplateContainerSecurityContextCapabilities struct {
	Add *[]*string `field:"optional" json:"add" yaml:"add"`
	Drop *[]*string `field:"optional" json:"drop" yaml:"drop"`
}

type KafkaSpecKafkaExporterTemplateContainerSecurityContextSeLinuxOptions struct {
	Level *string `field:"optional" json:"level" yaml:"level"`
	Role *string `field:"optional" json:"role" yaml:"role"`
	Type *string `field:"optional" json:"type" yaml:"type"`
	User *string `field:"optional" json:"user" yaml:"user"`
}

type KafkaSpecKafkaExporterTemplateContainerSecurityContextSeccompProfile struct {
	LocalhostProfile *string `field:"optional" json:"localhostProfile" yaml:"localhostProfile"`
	Type *string `field:"optional" json:"type" yaml:"type"`
}

type KafkaSpecKafkaExporterTemplateContainerSecurityContextWindowsOptions struct {
	GmsaCredentialSpec *string `field:"optional" json:"gmsaCredentialSpec" yaml:"gmsaCredentialSpec"`
	GmsaCredentialSpecName *string `field:"optional" json:"gmsaCredentialSpecName" yaml:"gmsaCredentialSpecName"`
	HostProcess *bool `field:"optional" json:"hostProcess" yaml:"hostProcess"`
	RunAsUserName *string `field:"optional" json:"runAsUserName" yaml:"runAsUserName"`
}

// Template for Kafka Exporter `Deployment`.
type KafkaSpecKafkaExporterTemplateDeployment struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaExporterTemplateDeploymentMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaExporterTemplateDeploymentMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for Kafka Exporter `Pods`.
type KafkaSpecKafkaExporterTemplatePod struct {
	// The pod's affinity rules.
	Affinity *KafkaSpecKafkaExporterTemplatePodAffinity `field:"optional" json:"affinity" yaml:"affinity"`
	// Indicates whether information about services should be injected into Pod's environment variables.
	EnableServiceLinks *bool `field:"optional" json:"enableServiceLinks" yaml:"enableServiceLinks"`
	// The pod's HostAliases.
	//
	// HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.
	HostAliases *[]*KafkaSpecKafkaExporterTemplatePodHostAliases `field:"optional" json:"hostAliases" yaml:"hostAliases"`
	// List of references to secrets in the same namespace to use for pulling any of the images used by this Pod.
	//
	// When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	ImagePullSecrets *[]*KafkaSpecKafkaExporterTemplatePodImagePullSecrets `field:"optional" json:"imagePullSecrets" yaml:"imagePullSecrets"`
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaExporterTemplatePodMetadata `field:"optional" json:"metadata" yaml:"metadata"`
	// The name of the priority class used to assign priority to the pods.
	//
	// For more information about priority classes, see {K8sPriorityClass}.
	PriorityClassName *string `field:"optional" json:"priorityClassName" yaml:"priorityClassName"`
	// The name of the scheduler used to dispatch this `Pod`.
	//
	// If not specified, the default scheduler will be used.
	SchedulerName *string `field:"optional" json:"schedulerName" yaml:"schedulerName"`
	// Configures pod-level security attributes and common container settings.
	SecurityContext *KafkaSpecKafkaExporterTemplatePodSecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
	// The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal.
	//
	// Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.
	TerminationGracePeriodSeconds *float64 `field:"optional" json:"terminationGracePeriodSeconds" yaml:"terminationGracePeriodSeconds"`
	// Defines the total amount (for example `1Gi`) of local storage required for temporary EmptyDir volume (`/tmp`).
	//
	// Default value is `5Mi`.
	TmpDirSizeLimit *string `field:"optional" json:"tmpDirSizeLimit" yaml:"tmpDirSizeLimit"`
	// The pod's tolerations.
	Tolerations *[]*KafkaSpecKafkaExporterTemplatePodTolerations `field:"optional" json:"tolerations" yaml:"tolerations"`
	// The pod's topology spread constraints.
	TopologySpreadConstraints *[]*KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraints `field:"optional" json:"topologySpreadConstraints" yaml:"topologySpreadConstraints"`
}

// The pod's affinity rules.
type KafkaSpecKafkaExporterTemplatePodAffinity struct {
	NodeAffinity *KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinity `field:"optional" json:"nodeAffinity" yaml:"nodeAffinity"`
	PodAffinity *KafkaSpecKafkaExporterTemplatePodAffinityPodAffinity `field:"optional" json:"podAffinity" yaml:"podAffinity"`
	PodAntiAffinity *KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinity `field:"optional" json:"podAntiAffinity" yaml:"podAntiAffinity"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinity struct {
	PreferredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"preferredDuringSchedulingIgnoredDuringExecution" yaml:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"requiredDuringSchedulingIgnoredDuringExecution" yaml:"requiredDuringSchedulingIgnoredDuringExecution"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	Preference *KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference `field:"optional" json:"preference" yaml:"preference"`
	Weight *float64 `field:"optional" json:"weight" yaml:"weight"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference struct {
	MatchExpressions *[]*KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchFields *[]*KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields `field:"optional" json:"matchFields" yaml:"matchFields"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	NodeSelectorTerms *[]*KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms `field:"optional" json:"nodeSelectorTerms" yaml:"nodeSelectorTerms"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms struct {
	MatchExpressions *[]*KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchFields *[]*KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields `field:"optional" json:"matchFields" yaml:"matchFields"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinity struct {
	PreferredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"preferredDuringSchedulingIgnoredDuringExecution" yaml:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"requiredDuringSchedulingIgnoredDuringExecution" yaml:"requiredDuringSchedulingIgnoredDuringExecution"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	PodAffinityTerm *KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm `field:"optional" json:"podAffinityTerm" yaml:"podAffinityTerm"`
	Weight *float64 `field:"optional" json:"weight" yaml:"weight"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm struct {
	LabelSelector *KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector struct {
	MatchExpressions *[]*KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	LabelSelector *KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector struct {
	MatchExpressions *[]*KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinity struct {
	PreferredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"preferredDuringSchedulingIgnoredDuringExecution" yaml:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"requiredDuringSchedulingIgnoredDuringExecution" yaml:"requiredDuringSchedulingIgnoredDuringExecution"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	PodAffinityTerm *KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm `field:"optional" json:"podAffinityTerm" yaml:"podAffinityTerm"`
	Weight *float64 `field:"optional" json:"weight" yaml:"weight"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm struct {
	LabelSelector *KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector struct {
	MatchExpressions *[]*KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	LabelSelector *KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector struct {
	MatchExpressions *[]*KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaExporterTemplatePodHostAliases struct {
	Hostnames *[]*string `field:"optional" json:"hostnames" yaml:"hostnames"`
	Ip *string `field:"optional" json:"ip" yaml:"ip"`
}

type KafkaSpecKafkaExporterTemplatePodImagePullSecrets struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaExporterTemplatePodMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Configures pod-level security attributes and common container settings.
type KafkaSpecKafkaExporterTemplatePodSecurityContext struct {
	FsGroup *float64 `field:"optional" json:"fsGroup" yaml:"fsGroup"`
	FsGroupChangePolicy *string `field:"optional" json:"fsGroupChangePolicy" yaml:"fsGroupChangePolicy"`
	RunAsGroup *float64 `field:"optional" json:"runAsGroup" yaml:"runAsGroup"`
	RunAsNonRoot *bool `field:"optional" json:"runAsNonRoot" yaml:"runAsNonRoot"`
	RunAsUser *float64 `field:"optional" json:"runAsUser" yaml:"runAsUser"`
	SeccompProfile *KafkaSpecKafkaExporterTemplatePodSecurityContextSeccompProfile `field:"optional" json:"seccompProfile" yaml:"seccompProfile"`
	SeLinuxOptions *KafkaSpecKafkaExporterTemplatePodSecurityContextSeLinuxOptions `field:"optional" json:"seLinuxOptions" yaml:"seLinuxOptions"`
	SupplementalGroups *[]*float64 `field:"optional" json:"supplementalGroups" yaml:"supplementalGroups"`
	Sysctls *[]*KafkaSpecKafkaExporterTemplatePodSecurityContextSysctls `field:"optional" json:"sysctls" yaml:"sysctls"`
	WindowsOptions *KafkaSpecKafkaExporterTemplatePodSecurityContextWindowsOptions `field:"optional" json:"windowsOptions" yaml:"windowsOptions"`
}

type KafkaSpecKafkaExporterTemplatePodSecurityContextSeLinuxOptions struct {
	Level *string `field:"optional" json:"level" yaml:"level"`
	Role *string `field:"optional" json:"role" yaml:"role"`
	Type *string `field:"optional" json:"type" yaml:"type"`
	User *string `field:"optional" json:"user" yaml:"user"`
}

type KafkaSpecKafkaExporterTemplatePodSecurityContextSeccompProfile struct {
	LocalhostProfile *string `field:"optional" json:"localhostProfile" yaml:"localhostProfile"`
	Type *string `field:"optional" json:"type" yaml:"type"`
}

type KafkaSpecKafkaExporterTemplatePodSecurityContextSysctls struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
	Value *string `field:"optional" json:"value" yaml:"value"`
}

type KafkaSpecKafkaExporterTemplatePodSecurityContextWindowsOptions struct {
	GmsaCredentialSpec *string `field:"optional" json:"gmsaCredentialSpec" yaml:"gmsaCredentialSpec"`
	GmsaCredentialSpecName *string `field:"optional" json:"gmsaCredentialSpecName" yaml:"gmsaCredentialSpecName"`
	HostProcess *bool `field:"optional" json:"hostProcess" yaml:"hostProcess"`
	RunAsUserName *string `field:"optional" json:"runAsUserName" yaml:"runAsUserName"`
}

type KafkaSpecKafkaExporterTemplatePodTolerations struct {
	Effect *string `field:"optional" json:"effect" yaml:"effect"`
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	TolerationSeconds *float64 `field:"optional" json:"tolerationSeconds" yaml:"tolerationSeconds"`
	Value *string `field:"optional" json:"value" yaml:"value"`
}

type KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraints struct {
	LabelSelector *KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	MaxSkew *float64 `field:"optional" json:"maxSkew" yaml:"maxSkew"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
	WhenUnsatisfiable *string `field:"optional" json:"whenUnsatisfiable" yaml:"whenUnsatisfiable"`
}

type KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsLabelSelector struct {
	MatchExpressions *[]*KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

// Template for Kafka Exporter `Service`.
type KafkaSpecKafkaExporterTemplateService struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaExporterTemplateServiceMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Template for the Kafka Exporter service account.
type KafkaSpecKafkaExporterTemplateServiceAccount struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaExporterTemplateServiceAccountMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaExporterTemplateServiceAccountMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaExporterTemplateServiceMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// JMX Options for Kafka brokers.
type KafkaSpecKafkaJmxOptions struct {
	// Authentication configuration for connecting to the JMX port.
	Authentication *KafkaSpecKafkaJmxOptionsAuthentication `field:"optional" json:"authentication" yaml:"authentication"`
}

// Authentication configuration for connecting to the JMX port.
type KafkaSpecKafkaJmxOptionsAuthentication struct {
	// Authentication type.
	//
	// Currently the only supported types are `password`.`password` type creates a username and protected port with no TLS.
	Type KafkaSpecKafkaJmxOptionsAuthenticationType `field:"required" json:"type" yaml:"type"`
}

// Authentication type.
//
// Currently the only supported types are `password`.`password` type creates a username and protected port with no TLS.
type KafkaSpecKafkaJmxOptionsAuthenticationType string

const (
	// password.
	KafkaSpecKafkaJmxOptionsAuthenticationType_PASSWORD KafkaSpecKafkaJmxOptionsAuthenticationType = "PASSWORD"
)

// JVM Options for pods.
type KafkaSpecKafkaJvmOptions struct {
	// Specifies whether the Garbage Collection logging is enabled.
	//
	// The default is false.
	GcLoggingEnabled *bool `field:"optional" json:"gcLoggingEnabled" yaml:"gcLoggingEnabled"`
	// A map of additional system properties which will be passed using the `-D` option to the JVM.
	JavaSystemProperties *[]*KafkaSpecKafkaJvmOptionsJavaSystemProperties `field:"optional" json:"javaSystemProperties" yaml:"javaSystemProperties"`
	// -Xms option to to the JVM.
	Xms *string `field:"optional" json:"xms" yaml:"xms"`
	// -Xmx option to to the JVM.
	Xmx *string `field:"optional" json:"xmx" yaml:"xmx"`
	// A map of -XX options to the JVM.
	Xx interface{} `field:"optional" json:"xx" yaml:"xx"`
}

type KafkaSpecKafkaJvmOptionsJavaSystemProperties struct {
	// The system property name.
	Name *string `field:"optional" json:"name" yaml:"name"`
	// The system property value.
	Value *string `field:"optional" json:"value" yaml:"value"`
}

type KafkaSpecKafkaListeners struct {
	// Name of the listener.
	//
	// The name will be used to identify the listener and the related Kubernetes objects. The name has to be unique within given a Kafka cluster. The name can consist of lowercase characters and numbers and be up to 11 characters long.
	Name *string `field:"required" json:"name" yaml:"name"`
	// Port number used by the listener inside Kafka.
	//
	// The port number has to be unique within a given Kafka cluster. Allowed port numbers are 9092 and higher with the exception of ports 9404 and 9999, which are already used for Prometheus and JMX. Depending on the listener type, the port number might not be the same as the port number that connects Kafka clients.
	Port *float64 `field:"required" json:"port" yaml:"port"`
	// Enables TLS encryption on the listener.
	//
	// This is a required property.
	Tls *bool `field:"required" json:"tls" yaml:"tls"`
	// Type of the listener. Currently the supported types are `internal`, `route`, `loadbalancer`, `nodeport` and `ingress`.
	//
	// * `internal` type exposes Kafka internally only within the Kubernetes cluster.
	// * `route` type uses OpenShift Routes to expose Kafka.
	// * `loadbalancer` type uses LoadBalancer type services to expose Kafka.
	// * `nodeport` type uses NodePort type services to expose Kafka.
	// * `ingress` type uses Kubernetes Nginx Ingress to expose Kafka.
	Type KafkaSpecKafkaListenersType `field:"required" json:"type" yaml:"type"`
	// Authentication configuration for this listener.
	Authentication *KafkaSpecKafkaListenersAuthentication `field:"optional" json:"authentication" yaml:"authentication"`
	// Additional listener configuration.
	Configuration *KafkaSpecKafkaListenersConfiguration `field:"optional" json:"configuration" yaml:"configuration"`
	// List of peers which should be able to connect to this listener.
	//
	// Peers in this list are combined using a logical OR operation. If this field is empty or missing, all connections will be allowed for this listener. If this field is present and contains at least one item, the listener only allows the traffic which matches at least one item in this list.
	NetworkPolicyPeers *[]*KafkaSpecKafkaListenersNetworkPolicyPeers `field:"optional" json:"networkPolicyPeers" yaml:"networkPolicyPeers"`
}

// Authentication configuration for this listener.
type KafkaSpecKafkaListenersAuthentication struct {
	// Authentication type.
	//
	// `oauth` type uses SASL OAUTHBEARER Authentication. `scram-sha-512` type uses SASL SCRAM-SHA-512 Authentication. `tls` type uses TLS Client Authentication. `tls` type is supported only on TLS listeners.`custom` type allows for any authentication type to be used.
	Type KafkaSpecKafkaListenersAuthenticationType `field:"required" json:"type" yaml:"type"`
	// Configure whether the access token is treated as JWT.
	//
	// This must be set to `false` if the authorization server returns opaque tokens. Defaults to `true`.
	AccessTokenIsJwt *bool `field:"optional" json:"accessTokenIsJwt" yaml:"accessTokenIsJwt"`
	// Configure whether the access token type check is performed or not.
	//
	// This should be set to `false` if the authorization server does not include 'typ' claim in JWT token. Defaults to `true`.
	CheckAccessTokenType *bool `field:"optional" json:"checkAccessTokenType" yaml:"checkAccessTokenType"`
	// Enable or disable audience checking.
	//
	// Audience checks identify the recipients of tokens. If audience checking is enabled, the OAuth Client ID also has to be configured using the `clientId` property. The Kafka broker will reject tokens that do not have its `clientId` in their `aud` (audience) claim.Default value is `false`.
	CheckAudience *bool `field:"optional" json:"checkAudience" yaml:"checkAudience"`
	// Enable or disable issuer checking.
	//
	// By default issuer is checked using the value configured by `validIssuerUri`. Default value is `true`.
	CheckIssuer *bool `field:"optional" json:"checkIssuer" yaml:"checkIssuer"`
	// The audience to use when making requests to the authorization server's token endpoint.
	//
	// Used for inter-broker authentication and for configuring OAuth 2.0 over PLAIN using the `clientId` and `secret` method.
	ClientAudience *string `field:"optional" json:"clientAudience" yaml:"clientAudience"`
	// OAuth Client ID which the Kafka broker can use to authenticate against the authorization server and use the introspect endpoint URI.
	ClientId *string `field:"optional" json:"clientId" yaml:"clientId"`
	// The scope to use when making requests to the authorization server's token endpoint.
	//
	// Used for inter-broker authentication and for configuring OAuth 2.0 over PLAIN using the `clientId` and `secret` method.
	ClientScope *string `field:"optional" json:"clientScope" yaml:"clientScope"`
	// Link to Kubernetes Secret containing the OAuth client secret which the Kafka broker can use to authenticate against the authorization server and use the introspect endpoint URI.
	ClientSecret *KafkaSpecKafkaListenersAuthenticationClientSecret `field:"optional" json:"clientSecret" yaml:"clientSecret"`
	// The connect timeout in seconds when connecting to authorization server.
	//
	// If not set, the effective connect timeout is 60 seconds.
	ConnectTimeoutSeconds *float64 `field:"optional" json:"connectTimeoutSeconds" yaml:"connectTimeoutSeconds"`
	// JsonPath filter query to be applied to the JWT token or to the response of the introspection endpoint for additional token validation.
	//
	// Not set by default.
	CustomClaimCheck *string `field:"optional" json:"customClaimCheck" yaml:"customClaimCheck"`
	// Enable or disable TLS hostname verification.
	//
	// Default value is `false`.
	DisableTlsHostnameVerification *bool `field:"optional" json:"disableTlsHostnameVerification" yaml:"disableTlsHostnameVerification"`
	// Enable or disable ECDSA support by installing BouncyCastle crypto provider.
	//
	// ECDSA support is always enabled. The BouncyCastle libraries are no longer packaged with Strimzi. Value is ignored.
	EnableEcdsa *bool `field:"optional" json:"enableEcdsa" yaml:"enableEcdsa"`
	// Enable or disable OAuth authentication over SASL_OAUTHBEARER.
	//
	// Default value is `true`.
	EnableOauthBearer *bool `field:"optional" json:"enableOauthBearer" yaml:"enableOauthBearer"`
	// Enable or disable OAuth authentication over SASL_PLAIN.
	//
	// There is no re-authentication support when this mechanism is used. Default value is `false`.
	EnablePlain *bool `field:"optional" json:"enablePlain" yaml:"enablePlain"`
	// The fallback username claim to be used for the user id if the claim specified by `userNameClaim` is not present.
	//
	// This is useful when `client_credentials` authentication only results in the client id being provided in another claim. It only takes effect if `userNameClaim` is set.
	FallbackUserNameClaim *string `field:"optional" json:"fallbackUserNameClaim" yaml:"fallbackUserNameClaim"`
	// The prefix to use with the value of `fallbackUserNameClaim` to construct the user id.
	//
	// This only takes effect if `fallbackUserNameClaim` is true, and the value is present for the claim. Mapping usernames and client ids into the same user id space is useful in preventing name collisions.
	FallbackUserNamePrefix *string `field:"optional" json:"fallbackUserNamePrefix" yaml:"fallbackUserNamePrefix"`
	// JsonPath query used to extract groups for the user during authentication.
	//
	// Extracted groups can be used by a custom authorizer. By default no groups are extracted.
	GroupsClaim *string `field:"optional" json:"groupsClaim" yaml:"groupsClaim"`
	// A delimiter used to parse groups when they are extracted as a single String value rather than a JSON array.
	//
	// Default value is ',' (comma).
	GroupsClaimDelimiter *string `field:"optional" json:"groupsClaimDelimiter" yaml:"groupsClaimDelimiter"`
	// URI of the token introspection endpoint which can be used to validate opaque non-JWT tokens.
	IntrospectionEndpointUri *string `field:"optional" json:"introspectionEndpointUri" yaml:"introspectionEndpointUri"`
	// URI of the JWKS certificate endpoint, which can be used for local JWT validation.
	JwksEndpointUri *string `field:"optional" json:"jwksEndpointUri" yaml:"jwksEndpointUri"`
	// Configures how often are the JWKS certificates considered valid.
	//
	// The expiry interval has to be at least 60 seconds longer then the refresh interval specified in `jwksRefreshSeconds`. Defaults to 360 seconds.
	JwksExpirySeconds *float64 `field:"optional" json:"jwksExpirySeconds" yaml:"jwksExpirySeconds"`
	// The minimum pause between two consecutive refreshes.
	//
	// When an unknown signing key is encountered the refresh is scheduled immediately, but will always wait for this minimum pause. Defaults to 1 second.
	JwksMinRefreshPauseSeconds *float64 `field:"optional" json:"jwksMinRefreshPauseSeconds" yaml:"jwksMinRefreshPauseSeconds"`
	// Configures how often are the JWKS certificates refreshed.
	//
	// The refresh interval has to be at least 60 seconds shorter then the expiry interval specified in `jwksExpirySeconds`. Defaults to 300 seconds.
	JwksRefreshSeconds *float64 `field:"optional" json:"jwksRefreshSeconds" yaml:"jwksRefreshSeconds"`
	// Configuration to be used for a specific listener.
	//
	// All values are prefixed with listener.name._<listener_name>_.
	ListenerConfig interface{} `field:"optional" json:"listenerConfig" yaml:"listenerConfig"`
	// Maximum number of seconds the authenticated session remains valid without re-authentication.
	//
	// This enables Apache Kafka re-authentication feature, and causes sessions to expire when the access token expires. If the access token expires before max time or if max time is reached, the client has to re-authenticate, otherwise the server will drop the connection. Not set by default - the authenticated session does not expire when the access token expires. This option only applies to SASL_OAUTHBEARER authentication mechanism (when `enableOauthBearer` is `true`).
	MaxSecondsWithoutReauthentication *float64 `field:"optional" json:"maxSecondsWithoutReauthentication" yaml:"maxSecondsWithoutReauthentication"`
	// The read timeout in seconds when connecting to authorization server.
	//
	// If not set, the effective read timeout is 60 seconds.
	ReadTimeoutSeconds *float64 `field:"optional" json:"readTimeoutSeconds" yaml:"readTimeoutSeconds"`
	// Enable or disable SASL on this listener.
	Sasl *bool `field:"optional" json:"sasl" yaml:"sasl"`
	// Secrets to be mounted to /opt/kafka/custom-authn-secrets/custom-listener-_<listener_name>-<port>_/_<secret_name>_.
	Secrets *[]*KafkaSpecKafkaListenersAuthenticationSecrets `field:"optional" json:"secrets" yaml:"secrets"`
	// Trusted certificates for TLS connection to the OAuth server.
	TlsTrustedCertificates *[]*KafkaSpecKafkaListenersAuthenticationTlsTrustedCertificates `field:"optional" json:"tlsTrustedCertificates" yaml:"tlsTrustedCertificates"`
	// URI of the Token Endpoint to use with SASL_PLAIN mechanism when the client authenticates with `clientId` and a `secret`.
	//
	// If set, the client can authenticate over SASL_PLAIN by either setting `username` to `clientId`, and setting `password` to client `secret`, or by setting `username` to account username, and `password` to access token prefixed with `$accessToken:`. If this option is not set, the `password` is always interpreted as an access token (without a prefix), and `username` as the account username (a so called 'no-client-credentials' mode).
	TokenEndpointUri *string `field:"optional" json:"tokenEndpointUri" yaml:"tokenEndpointUri"`
	// URI of the User Info Endpoint to use as a fallback to obtaining the user id when the Introspection Endpoint does not return information that can be used for the user id.
	UserInfoEndpointUri *string `field:"optional" json:"userInfoEndpointUri" yaml:"userInfoEndpointUri"`
	// Name of the claim from the JWT authentication token, Introspection Endpoint response or User Info Endpoint response which will be used to extract the user id.
	//
	// Defaults to `sub`.
	UserNameClaim *string `field:"optional" json:"userNameClaim" yaml:"userNameClaim"`
	// URI of the token issuer used for authentication.
	ValidIssuerUri *string `field:"optional" json:"validIssuerUri" yaml:"validIssuerUri"`
	// Valid value for the `token_type` attribute returned by the Introspection Endpoint.
	//
	// No default value, and not checked by default.
	ValidTokenType *string `field:"optional" json:"validTokenType" yaml:"validTokenType"`
}

// Link to Kubernetes Secret containing the OAuth client secret which the Kafka broker can use to authenticate against the authorization server and use the introspect endpoint URI.
type KafkaSpecKafkaListenersAuthenticationClientSecret struct {
	// The key under which the secret value is stored in the Kubernetes Secret.
	Key *string `field:"required" json:"key" yaml:"key"`
	// The name of the Kubernetes Secret containing the secret value.
	SecretName *string `field:"required" json:"secretName" yaml:"secretName"`
}

type KafkaSpecKafkaListenersAuthenticationSecrets struct {
	// The key under which the secret value is stored in the Kubernetes Secret.
	Key *string `field:"required" json:"key" yaml:"key"`
	// The name of the Kubernetes Secret containing the secret value.
	SecretName *string `field:"required" json:"secretName" yaml:"secretName"`
}

type KafkaSpecKafkaListenersAuthenticationTlsTrustedCertificates struct {
	// The name of the file certificate in the Secret.
	Certificate *string `field:"required" json:"certificate" yaml:"certificate"`
	// The name of the Secret containing the certificate.
	SecretName *string `field:"required" json:"secretName" yaml:"secretName"`
}

// Authentication type.
//
// `oauth` type uses SASL OAUTHBEARER Authentication. `scram-sha-512` type uses SASL SCRAM-SHA-512 Authentication. `tls` type uses TLS Client Authentication. `tls` type is supported only on TLS listeners.`custom` type allows for any authentication type to be used.
type KafkaSpecKafkaListenersAuthenticationType string

const (
	// tls.
	KafkaSpecKafkaListenersAuthenticationType_TLS KafkaSpecKafkaListenersAuthenticationType = "TLS"
	// scram-sha-512.
	KafkaSpecKafkaListenersAuthenticationType_SCRAM_SHA_512 KafkaSpecKafkaListenersAuthenticationType = "SCRAM_SHA_512"
	// oauth.
	KafkaSpecKafkaListenersAuthenticationType_OAUTH KafkaSpecKafkaListenersAuthenticationType = "OAUTH"
	// custom.
	KafkaSpecKafkaListenersAuthenticationType_CUSTOM KafkaSpecKafkaListenersAuthenticationType = "CUSTOM"
)

// Additional listener configuration.
type KafkaSpecKafkaListenersConfiguration struct {
	// Bootstrap configuration.
	Bootstrap *KafkaSpecKafkaListenersConfigurationBootstrap `field:"optional" json:"bootstrap" yaml:"bootstrap"`
	// Reference to the `Secret` which holds the certificate and private key pair which will be used for this listener.
	//
	// The certificate can optionally contain the whole chain. This field can be used only with listeners with enabled TLS encryption.
	BrokerCertChainAndKey *KafkaSpecKafkaListenersConfigurationBrokerCertChainAndKey `field:"optional" json:"brokerCertChainAndKey" yaml:"brokerCertChainAndKey"`
	// Per-broker configurations.
	Brokers *[]*KafkaSpecKafkaListenersConfigurationBrokers `field:"optional" json:"brokers" yaml:"brokers"`
	// Configures the `Ingress` class that defines which `Ingress` controller will be used.
	//
	// This field can be used only with `ingress` type listener. If not specified, the default Ingress controller will be used.
	Class *string `field:"optional" json:"class" yaml:"class"`
	// Whether to create the bootstrap service or not.
	//
	// The bootstrap service is created by default (if not specified differently). This field can be used with the `loadBalancer` type listener.
	CreateBootstrapService *bool `field:"optional" json:"createBootstrapService" yaml:"createBootstrapService"`
	// Specifies whether the service routes external traffic to node-local or cluster-wide endpoints.
	//
	// `Cluster` may cause a second hop to another node and obscures the client source IP. `Local` avoids a second hop for LoadBalancer and Nodeport type services and preserves the client source IP (when supported by the infrastructure). If unspecified, Kubernetes will use `Cluster` as the default.This field can be used only with `loadbalancer` or `nodeport` type listener.
	ExternalTrafficPolicy KafkaSpecKafkaListenersConfigurationExternalTrafficPolicy `field:"optional" json:"externalTrafficPolicy" yaml:"externalTrafficPolicy"`
	// A list of finalizers which will be configured for the `LoadBalancer` type Services created for this listener.
	//
	// If supported by the platform, the finalizer `service.kubernetes.io/load-balancer-cleanup` to make sure that the external load balancer is deleted together with the service.For more information, see https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#garbage-collecting-load-balancers. This field can be used only with `loadbalancer` type listeners.
	Finalizers *[]*string `field:"optional" json:"finalizers" yaml:"finalizers"`
	// Specifies the IP Families used by the service.
	//
	// Available options are `IPv4` and `IPv6. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting. Available on Kubernetes 1.20 and newer.
	IpFamilies *[]KafkaSpecKafkaListenersConfigurationIpFamilies `field:"optional" json:"ipFamilies" yaml:"ipFamilies"`
	// Specifies the IP Family Policy used by the service.
	//
	// Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type. Available on Kubernetes 1.20 and newer.
	IpFamilyPolicy KafkaSpecKafkaListenersConfigurationIpFamilyPolicy `field:"optional" json:"ipFamilyPolicy" yaml:"ipFamilyPolicy"`
	// A list of CIDR ranges (for example `10.0.0.0/8` or `130.211.204.1/32`) from which clients can connect to load balancer type listeners. If supported by the platform, traffic through the loadbalancer is restricted to the specified CIDR ranges. This field is applicable only for loadbalancer type services and is ignored if the cloud provider does not support the feature. This field can be used only with `loadbalancer` type listener.
	LoadBalancerSourceRanges *[]*string `field:"optional" json:"loadBalancerSourceRanges" yaml:"loadBalancerSourceRanges"`
	// The maximum connection creation rate we allow in this listener at any time.
	//
	// New connections will be throttled if the limit is reached.
	MaxConnectionCreationRate *float64 `field:"optional" json:"maxConnectionCreationRate" yaml:"maxConnectionCreationRate"`
	// The maximum number of connections we allow for this listener in the broker at any time.
	//
	// New connections are blocked if the limit is reached.
	MaxConnections *float64 `field:"optional" json:"maxConnections" yaml:"maxConnections"`
	// Defines which address type should be used as the node address.
	//
	// Available types are: `ExternalDNS`, `ExternalIP`, `InternalDNS`, `InternalIP` and `Hostname`. By default, the addresses will be used in the following order (the first one found will be used):
	//
	// * `ExternalDNS`
	// * `ExternalIP`
	// * `InternalDNS`
	// * `InternalIP`
	// * `Hostname`
	//
	// This field is used to select the preferred address type, which is checked first. If no address is found for this address type, the other types are checked in the default order. This field can only be used with `nodeport` type listener.
	PreferredNodePortAddressType KafkaSpecKafkaListenersConfigurationPreferredNodePortAddressType `field:"optional" json:"preferredNodePortAddressType" yaml:"preferredNodePortAddressType"`
	// Configures whether the Kubernetes service DNS domain should be used or not.
	//
	// If set to `true`, the generated addresses will contain the service DNS domain suffix (by default `.cluster.local`, can be configured using environment variable `KUBERNETES_SERVICE_DNS_DOMAIN`). Defaults to `false`.This field can be used only with `internal` type listener.
	UseServiceDnsDomain *bool `field:"optional" json:"useServiceDnsDomain" yaml:"useServiceDnsDomain"`
}

// Bootstrap configuration.
type KafkaSpecKafkaListenersConfigurationBootstrap struct {
	// Additional alternative names for the bootstrap service.
	//
	// The alternative names will be added to the list of subject alternative names of the TLS certificates.
	AlternativeNames *[]*string `field:"optional" json:"alternativeNames" yaml:"alternativeNames"`
	// Annotations that will be added to the `Ingress`, `Route`, or `Service` resource.
	//
	// You can use this field to configure DNS providers such as External DNS. This field can be used only with `loadbalancer`, `nodeport`, `route`, or `ingress` type listeners.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// The bootstrap host.
	//
	// This field will be used in the Ingress resource or in the Route resource to specify the desired hostname. This field can be used only with `route` (optional) or `ingress` (required) type listeners.
	Host *string `field:"optional" json:"host" yaml:"host"`
	// Labels that will be added to the `Ingress`, `Route`, or `Service` resource.
	//
	// This field can be used only with `loadbalancer`, `nodeport`, `route`, or `ingress` type listeners.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
	// The loadbalancer is requested with the IP address specified in this field.
	//
	// This feature depends on whether the underlying cloud provider supports specifying the `loadBalancerIP` when a load balancer is created. This field is ignored if the cloud provider does not support the feature.This field can be used only with `loadbalancer` type listener.
	LoadBalancerIp *string `field:"optional" json:"loadBalancerIp" yaml:"loadBalancerIp"`
	// Node port for the bootstrap service.
	//
	// This field can be used only with `nodeport` type listener.
	NodePort *float64 `field:"optional" json:"nodePort" yaml:"nodePort"`
}

// Reference to the `Secret` which holds the certificate and private key pair which will be used for this listener.
//
// The certificate can optionally contain the whole chain. This field can be used only with listeners with enabled TLS encryption.
type KafkaSpecKafkaListenersConfigurationBrokerCertChainAndKey struct {
	// The name of the file certificate in the Secret.
	Certificate *string `field:"required" json:"certificate" yaml:"certificate"`
	// The name of the private key in the Secret.
	Key *string `field:"required" json:"key" yaml:"key"`
	// The name of the Secret containing the certificate.
	SecretName *string `field:"required" json:"secretName" yaml:"secretName"`
}

type KafkaSpecKafkaListenersConfigurationBrokers struct {
	// ID of the kafka broker (broker identifier).
	//
	// Broker IDs start from 0 and correspond to the number of broker replicas.
	Broker *float64 `field:"required" json:"broker" yaml:"broker"`
	// The host name which will be used in the brokers' `advertised.brokers`.
	AdvertisedHost *string `field:"optional" json:"advertisedHost" yaml:"advertisedHost"`
	// The port number which will be used in the brokers' `advertised.brokers`.
	AdvertisedPort *float64 `field:"optional" json:"advertisedPort" yaml:"advertisedPort"`
	// Annotations that will be added to the `Ingress` or `Service` resource.
	//
	// You can use this field to configure DNS providers such as External DNS. This field can be used only with `loadbalancer`, `nodeport`, or `ingress` type listeners.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// The broker host.
	//
	// This field will be used in the Ingress resource or in the Route resource to specify the desired hostname. This field can be used only with `route` (optional) or `ingress` (required) type listeners.
	Host *string `field:"optional" json:"host" yaml:"host"`
	// Labels that will be added to the `Ingress`, `Route`, or `Service` resource.
	//
	// This field can be used only with `loadbalancer`, `nodeport`, `route`, or `ingress` type listeners.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
	// The loadbalancer is requested with the IP address specified in this field.
	//
	// This feature depends on whether the underlying cloud provider supports specifying the `loadBalancerIP` when a load balancer is created. This field is ignored if the cloud provider does not support the feature.This field can be used only with `loadbalancer` type listener.
	LoadBalancerIp *string `field:"optional" json:"loadBalancerIp" yaml:"loadBalancerIp"`
	// Node port for the per-broker service.
	//
	// This field can be used only with `nodeport` type listener.
	NodePort *float64 `field:"optional" json:"nodePort" yaml:"nodePort"`
}

// Specifies whether the service routes external traffic to node-local or cluster-wide endpoints.
//
// `Cluster` may cause a second hop to another node and obscures the client source IP. `Local` avoids a second hop for LoadBalancer and Nodeport type services and preserves the client source IP (when supported by the infrastructure). If unspecified, Kubernetes will use `Cluster` as the default.This field can be used only with `loadbalancer` or `nodeport` type listener.
type KafkaSpecKafkaListenersConfigurationExternalTrafficPolicy string

const (
	// Local.
	KafkaSpecKafkaListenersConfigurationExternalTrafficPolicy_LOCAL KafkaSpecKafkaListenersConfigurationExternalTrafficPolicy = "LOCAL"
	// Cluster.
	KafkaSpecKafkaListenersConfigurationExternalTrafficPolicy_CLUSTER KafkaSpecKafkaListenersConfigurationExternalTrafficPolicy = "CLUSTER"
)

type KafkaSpecKafkaListenersConfigurationIpFamilies string

const (
	// IPv4.
	KafkaSpecKafkaListenersConfigurationIpFamilies_I_PV4 KafkaSpecKafkaListenersConfigurationIpFamilies = "I_PV4"
	// IPv6.
	KafkaSpecKafkaListenersConfigurationIpFamilies_I_PV6 KafkaSpecKafkaListenersConfigurationIpFamilies = "I_PV6"
)

// Specifies the IP Family Policy used by the service.
//
// Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type. Available on Kubernetes 1.20 and newer.
type KafkaSpecKafkaListenersConfigurationIpFamilyPolicy string

const (
	// SingleStack.
	KafkaSpecKafkaListenersConfigurationIpFamilyPolicy_SINGLE_STACK KafkaSpecKafkaListenersConfigurationIpFamilyPolicy = "SINGLE_STACK"
	// PreferDualStack.
	KafkaSpecKafkaListenersConfigurationIpFamilyPolicy_PREFER_DUAL_STACK KafkaSpecKafkaListenersConfigurationIpFamilyPolicy = "PREFER_DUAL_STACK"
	// RequireDualStack.
	KafkaSpecKafkaListenersConfigurationIpFamilyPolicy_REQUIRE_DUAL_STACK KafkaSpecKafkaListenersConfigurationIpFamilyPolicy = "REQUIRE_DUAL_STACK"
)

// Defines which address type should be used as the node address.
//
// Available types are: `ExternalDNS`, `ExternalIP`, `InternalDNS`, `InternalIP` and `Hostname`. By default, the addresses will be used in the following order (the first one found will be used):
//
// * `ExternalDNS`
// * `ExternalIP`
// * `InternalDNS`
// * `InternalIP`
// * `Hostname`
//
// This field is used to select the preferred address type, which is checked first. If no address is found for this address type, the other types are checked in the default order. This field can only be used with `nodeport` type listener.
type KafkaSpecKafkaListenersConfigurationPreferredNodePortAddressType string

const (
	// ExternalIP.
	KafkaSpecKafkaListenersConfigurationPreferredNodePortAddressType_EXTERNAL_IP KafkaSpecKafkaListenersConfigurationPreferredNodePortAddressType = "EXTERNAL_IP"
	// ExternalDNS.
	KafkaSpecKafkaListenersConfigurationPreferredNodePortAddressType_EXTERNAL_DNS KafkaSpecKafkaListenersConfigurationPreferredNodePortAddressType = "EXTERNAL_DNS"
	// InternalIP.
	KafkaSpecKafkaListenersConfigurationPreferredNodePortAddressType_INTERNAL_IP KafkaSpecKafkaListenersConfigurationPreferredNodePortAddressType = "INTERNAL_IP"
	// InternalDNS.
	KafkaSpecKafkaListenersConfigurationPreferredNodePortAddressType_INTERNAL_DNS KafkaSpecKafkaListenersConfigurationPreferredNodePortAddressType = "INTERNAL_DNS"
	// Hostname.
	KafkaSpecKafkaListenersConfigurationPreferredNodePortAddressType_HOSTNAME KafkaSpecKafkaListenersConfigurationPreferredNodePortAddressType = "HOSTNAME"
)

type KafkaSpecKafkaListenersNetworkPolicyPeers struct {
	IpBlock *KafkaSpecKafkaListenersNetworkPolicyPeersIpBlock `field:"optional" json:"ipBlock" yaml:"ipBlock"`
	NamespaceSelector *KafkaSpecKafkaListenersNetworkPolicyPeersNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	PodSelector *KafkaSpecKafkaListenersNetworkPolicyPeersPodSelector `field:"optional" json:"podSelector" yaml:"podSelector"`
}

type KafkaSpecKafkaListenersNetworkPolicyPeersIpBlock struct {
	Cidr *string `field:"optional" json:"cidr" yaml:"cidr"`
	Except *[]*string `field:"optional" json:"except" yaml:"except"`
}

type KafkaSpecKafkaListenersNetworkPolicyPeersNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecKafkaListenersNetworkPolicyPeersNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecKafkaListenersNetworkPolicyPeersNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaListenersNetworkPolicyPeersPodSelector struct {
	MatchExpressions *[]*KafkaSpecKafkaListenersNetworkPolicyPeersPodSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecKafkaListenersNetworkPolicyPeersPodSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

// Type of the listener. Currently the supported types are `internal`, `route`, `loadbalancer`, `nodeport` and `ingress`.
//
// * `internal` type exposes Kafka internally only within the Kubernetes cluster.
// * `route` type uses OpenShift Routes to expose Kafka.
// * `loadbalancer` type uses LoadBalancer type services to expose Kafka.
// * `nodeport` type uses NodePort type services to expose Kafka.
// * `ingress` type uses Kubernetes Nginx Ingress to expose Kafka.
type KafkaSpecKafkaListenersType string

const (
	// internal.
	KafkaSpecKafkaListenersType_INTERNAL KafkaSpecKafkaListenersType = "INTERNAL"
	// route.
	KafkaSpecKafkaListenersType_ROUTE KafkaSpecKafkaListenersType = "ROUTE"
	// loadbalancer.
	KafkaSpecKafkaListenersType_LOADBALANCER KafkaSpecKafkaListenersType = "LOADBALANCER"
	// nodeport.
	KafkaSpecKafkaListenersType_NODEPORT KafkaSpecKafkaListenersType = "NODEPORT"
	// ingress.
	KafkaSpecKafkaListenersType_INGRESS KafkaSpecKafkaListenersType = "INGRESS"
)

// Pod liveness checking.
type KafkaSpecKafkaLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	//
	// Defaults to 3. Minimum value is 1.
	FailureThreshold *float64 `field:"optional" json:"failureThreshold" yaml:"failureThreshold"`
	// The initial delay before first the health is first checked.
	//
	// Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds *float64 `field:"optional" json:"initialDelaySeconds" yaml:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	//
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *float64 `field:"optional" json:"periodSeconds" yaml:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	//
	// Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *float64 `field:"optional" json:"successThreshold" yaml:"successThreshold"`
	// The timeout for each attempted health check.
	//
	// Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds *float64 `field:"optional" json:"timeoutSeconds" yaml:"timeoutSeconds"`
}

// Logging configuration for Kafka.
type KafkaSpecKafkaLogging struct {
	// Logging type, must be either 'inline' or 'external'.
	Type KafkaSpecKafkaLoggingType `field:"required" json:"type" yaml:"type"`
	// A Map from logger name to logger level.
	Loggers interface{} `field:"optional" json:"loggers" yaml:"loggers"`
	// `ConfigMap` entry where the logging configuration is stored.
	ValueFrom *KafkaSpecKafkaLoggingValueFrom `field:"optional" json:"valueFrom" yaml:"valueFrom"`
}

// Logging type, must be either 'inline' or 'external'.
type KafkaSpecKafkaLoggingType string

const (
	// inline.
	KafkaSpecKafkaLoggingType_INLINE KafkaSpecKafkaLoggingType = "INLINE"
	// external.
	KafkaSpecKafkaLoggingType_EXTERNAL KafkaSpecKafkaLoggingType = "EXTERNAL"
)

// `ConfigMap` entry where the logging configuration is stored.
type KafkaSpecKafkaLoggingValueFrom struct {
	// Reference to the key in the ConfigMap containing the configuration.
	ConfigMapKeyRef *KafkaSpecKafkaLoggingValueFromConfigMapKeyRef `field:"optional" json:"configMapKeyRef" yaml:"configMapKeyRef"`
}

// Reference to the key in the ConfigMap containing the configuration.
type KafkaSpecKafkaLoggingValueFromConfigMapKeyRef struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Name *string `field:"optional" json:"name" yaml:"name"`
	Optional *bool `field:"optional" json:"optional" yaml:"optional"`
}

// Metrics configuration.
type KafkaSpecKafkaMetricsConfig struct {
	// Metrics type.
	//
	// Only 'jmxPrometheusExporter' supported currently.
	Type KafkaSpecKafkaMetricsConfigType `field:"required" json:"type" yaml:"type"`
	// ConfigMap entry where the Prometheus JMX Exporter configuration is stored.
	//
	// For details of the structure of this configuration, see the {JMXExporter}.
	ValueFrom *KafkaSpecKafkaMetricsConfigValueFrom `field:"required" json:"valueFrom" yaml:"valueFrom"`
}

// Metrics type.
//
// Only 'jmxPrometheusExporter' supported currently.
type KafkaSpecKafkaMetricsConfigType string

const (
	// jmxPrometheusExporter.
	KafkaSpecKafkaMetricsConfigType_JMX_PROMETHEUS_EXPORTER KafkaSpecKafkaMetricsConfigType = "JMX_PROMETHEUS_EXPORTER"
)

// ConfigMap entry where the Prometheus JMX Exporter configuration is stored.
//
// For details of the structure of this configuration, see the {JMXExporter}.
type KafkaSpecKafkaMetricsConfigValueFrom struct {
	// Reference to the key in the ConfigMap containing the configuration.
	ConfigMapKeyRef *KafkaSpecKafkaMetricsConfigValueFromConfigMapKeyRef `field:"optional" json:"configMapKeyRef" yaml:"configMapKeyRef"`
}

// Reference to the key in the ConfigMap containing the configuration.
type KafkaSpecKafkaMetricsConfigValueFromConfigMapKeyRef struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Name *string `field:"optional" json:"name" yaml:"name"`
	Optional *bool `field:"optional" json:"optional" yaml:"optional"`
}

// Configuration of the `broker.rack` broker config.
type KafkaSpecKafkaRack struct {
	// A key that matches labels assigned to the Kubernetes cluster nodes.
	//
	// The value of the label is used to set the broker's `broker.rack` config and `client.rack` in Kafka Connect.
	TopologyKey *string `field:"required" json:"topologyKey" yaml:"topologyKey"`
}

// Pod readiness checking.
type KafkaSpecKafkaReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	//
	// Defaults to 3. Minimum value is 1.
	FailureThreshold *float64 `field:"optional" json:"failureThreshold" yaml:"failureThreshold"`
	// The initial delay before first the health is first checked.
	//
	// Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds *float64 `field:"optional" json:"initialDelaySeconds" yaml:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	//
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *float64 `field:"optional" json:"periodSeconds" yaml:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	//
	// Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *float64 `field:"optional" json:"successThreshold" yaml:"successThreshold"`
	// The timeout for each attempted health check.
	//
	// Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds *float64 `field:"optional" json:"timeoutSeconds" yaml:"timeoutSeconds"`
}

// CPU and memory resources to reserve.
type KafkaSpecKafkaResources struct {
	Limits interface{} `field:"optional" json:"limits" yaml:"limits"`
	Requests interface{} `field:"optional" json:"requests" yaml:"requests"`
}

// Storage configuration (disk).
//
// Cannot be updated.
type KafkaSpecKafkaStorage struct {
	// Storage type, must be either 'ephemeral', 'persistent-claim', or 'jbod'.
	Type KafkaSpecKafkaStorageType `field:"required" json:"type" yaml:"type"`
	// The storage class to use for dynamic volume allocation.
	Class *string `field:"optional" json:"class" yaml:"class"`
	// Specifies if the persistent volume claim has to be deleted when the cluster is un-deployed.
	DeleteClaim *bool `field:"optional" json:"deleteClaim" yaml:"deleteClaim"`
	// Storage identification number.
	//
	// It is mandatory only for storage volumes defined in a storage of type 'jbod'.
	Id *float64 `field:"optional" json:"id" yaml:"id"`
	// Overrides for individual brokers.
	//
	// The `overrides` field allows to specify a different configuration for different brokers.
	Overrides *[]*KafkaSpecKafkaStorageOverrides `field:"optional" json:"overrides" yaml:"overrides"`
	// Specifies a specific persistent volume to use.
	//
	// It contains key:value pairs representing labels for selecting such a volume.
	Selector interface{} `field:"optional" json:"selector" yaml:"selector"`
	// When type=persistent-claim, defines the size of the persistent volume claim (i.e 1Gi). Mandatory when type=persistent-claim.
	Size *string `field:"optional" json:"size" yaml:"size"`
	// When type=ephemeral, defines the total amount of local storage required for this EmptyDir volume (for example 1Gi).
	SizeLimit *string `field:"optional" json:"sizeLimit" yaml:"sizeLimit"`
	// List of volumes as Storage objects representing the JBOD disks array.
	Volumes *[]*KafkaSpecKafkaStorageVolumes `field:"optional" json:"volumes" yaml:"volumes"`
}

type KafkaSpecKafkaStorageOverrides struct {
	// Id of the kafka broker (broker identifier).
	Broker *float64 `field:"optional" json:"broker" yaml:"broker"`
	// The storage class to use for dynamic volume allocation for this broker.
	Class *string `field:"optional" json:"class" yaml:"class"`
}

// Storage type, must be either 'ephemeral', 'persistent-claim', or 'jbod'.
type KafkaSpecKafkaStorageType string

const (
	// ephemeral.
	KafkaSpecKafkaStorageType_EPHEMERAL KafkaSpecKafkaStorageType = "EPHEMERAL"
	// persistent-claim.
	KafkaSpecKafkaStorageType_PERSISTENT_CLAIM KafkaSpecKafkaStorageType = "PERSISTENT_CLAIM"
	// jbod.
	KafkaSpecKafkaStorageType_JBOD KafkaSpecKafkaStorageType = "JBOD"
)

type KafkaSpecKafkaStorageVolumes struct {
	// Storage type, must be either 'ephemeral' or 'persistent-claim'.
	Type KafkaSpecKafkaStorageVolumesType `field:"required" json:"type" yaml:"type"`
	// The storage class to use for dynamic volume allocation.
	Class *string `field:"optional" json:"class" yaml:"class"`
	// Specifies if the persistent volume claim has to be deleted when the cluster is un-deployed.
	DeleteClaim *bool `field:"optional" json:"deleteClaim" yaml:"deleteClaim"`
	// Storage identification number.
	//
	// It is mandatory only for storage volumes defined in a storage of type 'jbod'.
	Id *float64 `field:"optional" json:"id" yaml:"id"`
	// Overrides for individual brokers.
	//
	// The `overrides` field allows to specify a different configuration for different brokers.
	Overrides *[]*KafkaSpecKafkaStorageVolumesOverrides `field:"optional" json:"overrides" yaml:"overrides"`
	// Specifies a specific persistent volume to use.
	//
	// It contains key:value pairs representing labels for selecting such a volume.
	Selector interface{} `field:"optional" json:"selector" yaml:"selector"`
	// When type=persistent-claim, defines the size of the persistent volume claim (i.e 1Gi). Mandatory when type=persistent-claim.
	Size *string `field:"optional" json:"size" yaml:"size"`
	// When type=ephemeral, defines the total amount of local storage required for this EmptyDir volume (for example 1Gi).
	SizeLimit *string `field:"optional" json:"sizeLimit" yaml:"sizeLimit"`
}

type KafkaSpecKafkaStorageVolumesOverrides struct {
	// Id of the kafka broker (broker identifier).
	Broker *float64 `field:"optional" json:"broker" yaml:"broker"`
	// The storage class to use for dynamic volume allocation for this broker.
	Class *string `field:"optional" json:"class" yaml:"class"`
}

// Storage type, must be either 'ephemeral' or 'persistent-claim'.
type KafkaSpecKafkaStorageVolumesType string

const (
	// ephemeral.
	KafkaSpecKafkaStorageVolumesType_EPHEMERAL KafkaSpecKafkaStorageVolumesType = "EPHEMERAL"
	// persistent-claim.
	KafkaSpecKafkaStorageVolumesType_PERSISTENT_CLAIM KafkaSpecKafkaStorageVolumesType = "PERSISTENT_CLAIM"
)

// Template for Kafka cluster resources.
//
// The template allows users to specify how are the `StatefulSet`, `Pods` and `Services` generated.
type KafkaSpecKafkaTemplate struct {
	// Template for Kafka bootstrap `Service`.
	BootstrapService *KafkaSpecKafkaTemplateBootstrapService `field:"optional" json:"bootstrapService" yaml:"bootstrapService"`
	// Template for Kafka broker `Service`.
	BrokersService *KafkaSpecKafkaTemplateBrokersService `field:"optional" json:"brokersService" yaml:"brokersService"`
	// Template for Secret with Kafka Cluster certificate public key.
	ClusterCaCert *KafkaSpecKafkaTemplateClusterCaCert `field:"optional" json:"clusterCaCert" yaml:"clusterCaCert"`
	// Template for the Kafka ClusterRoleBinding.
	ClusterRoleBinding *KafkaSpecKafkaTemplateClusterRoleBinding `field:"optional" json:"clusterRoleBinding" yaml:"clusterRoleBinding"`
	// Template for Kafka external bootstrap `Ingress`.
	ExternalBootstrapIngress *KafkaSpecKafkaTemplateExternalBootstrapIngress `field:"optional" json:"externalBootstrapIngress" yaml:"externalBootstrapIngress"`
	// Template for Kafka external bootstrap `Route`.
	ExternalBootstrapRoute *KafkaSpecKafkaTemplateExternalBootstrapRoute `field:"optional" json:"externalBootstrapRoute" yaml:"externalBootstrapRoute"`
	// Template for Kafka external bootstrap `Service`.
	ExternalBootstrapService *KafkaSpecKafkaTemplateExternalBootstrapService `field:"optional" json:"externalBootstrapService" yaml:"externalBootstrapService"`
	// Template for the Kafka init container.
	InitContainer *KafkaSpecKafkaTemplateInitContainer `field:"optional" json:"initContainer" yaml:"initContainer"`
	// Template for Secret of the Kafka Cluster JMX authentication.
	JmxSecret *KafkaSpecKafkaTemplateJmxSecret `field:"optional" json:"jmxSecret" yaml:"jmxSecret"`
	// Template for the Kafka broker container.
	KafkaContainer *KafkaSpecKafkaTemplateKafkaContainer `field:"optional" json:"kafkaContainer" yaml:"kafkaContainer"`
	// Template for Kafka per-pod `Ingress` used for access from outside of Kubernetes.
	PerPodIngress *KafkaSpecKafkaTemplatePerPodIngress `field:"optional" json:"perPodIngress" yaml:"perPodIngress"`
	// Template for Kafka per-pod `Routes` used for access from outside of OpenShift.
	PerPodRoute *KafkaSpecKafkaTemplatePerPodRoute `field:"optional" json:"perPodRoute" yaml:"perPodRoute"`
	// Template for Kafka per-pod `Services` used for access from outside of Kubernetes.
	PerPodService *KafkaSpecKafkaTemplatePerPodService `field:"optional" json:"perPodService" yaml:"perPodService"`
	// Template for all Kafka `PersistentVolumeClaims`.
	PersistentVolumeClaim *KafkaSpecKafkaTemplatePersistentVolumeClaim `field:"optional" json:"persistentVolumeClaim" yaml:"persistentVolumeClaim"`
	// Template for Kafka `Pods`.
	Pod *KafkaSpecKafkaTemplatePod `field:"optional" json:"pod" yaml:"pod"`
	// Template for Kafka `PodDisruptionBudget`.
	PodDisruptionBudget *KafkaSpecKafkaTemplatePodDisruptionBudget `field:"optional" json:"podDisruptionBudget" yaml:"podDisruptionBudget"`
	// Template for Kafka `StrimziPodSet` resource.
	PodSet *KafkaSpecKafkaTemplatePodSet `field:"optional" json:"podSet" yaml:"podSet"`
	// Template for the Kafka service account.
	ServiceAccount *KafkaSpecKafkaTemplateServiceAccount `field:"optional" json:"serviceAccount" yaml:"serviceAccount"`
	// Template for Kafka `StatefulSet`.
	Statefulset *KafkaSpecKafkaTemplateStatefulset `field:"optional" json:"statefulset" yaml:"statefulset"`
}

// Template for Kafka bootstrap `Service`.
type KafkaSpecKafkaTemplateBootstrapService struct {
	// Specifies the IP Families used by the service.
	//
	// Available options are `IPv4` and `IPv6. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting. Available on Kubernetes 1.20 and newer.
	IpFamilies *[]KafkaSpecKafkaTemplateBootstrapServiceIpFamilies `field:"optional" json:"ipFamilies" yaml:"ipFamilies"`
	// Specifies the IP Family Policy used by the service.
	//
	// Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type. Available on Kubernetes 1.20 and newer.
	IpFamilyPolicy KafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicy `field:"optional" json:"ipFamilyPolicy" yaml:"ipFamilyPolicy"`
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplateBootstrapServiceMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

type KafkaSpecKafkaTemplateBootstrapServiceIpFamilies string

const (
	// IPv4.
	KafkaSpecKafkaTemplateBootstrapServiceIpFamilies_I_PV4 KafkaSpecKafkaTemplateBootstrapServiceIpFamilies = "I_PV4"
	// IPv6.
	KafkaSpecKafkaTemplateBootstrapServiceIpFamilies_I_PV6 KafkaSpecKafkaTemplateBootstrapServiceIpFamilies = "I_PV6"
)

// Specifies the IP Family Policy used by the service.
//
// Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type. Available on Kubernetes 1.20 and newer.
type KafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicy string

const (
	// SingleStack.
	KafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicy_SINGLE_STACK KafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicy = "SINGLE_STACK"
	// PreferDualStack.
	KafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicy_PREFER_DUAL_STACK KafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicy = "PREFER_DUAL_STACK"
	// RequireDualStack.
	KafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicy_REQUIRE_DUAL_STACK KafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicy = "REQUIRE_DUAL_STACK"
)

// Metadata applied to the resource.
type KafkaSpecKafkaTemplateBootstrapServiceMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for Kafka broker `Service`.
type KafkaSpecKafkaTemplateBrokersService struct {
	// Specifies the IP Families used by the service.
	//
	// Available options are `IPv4` and `IPv6. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting. Available on Kubernetes 1.20 and newer.
	IpFamilies *[]KafkaSpecKafkaTemplateBrokersServiceIpFamilies `field:"optional" json:"ipFamilies" yaml:"ipFamilies"`
	// Specifies the IP Family Policy used by the service.
	//
	// Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type. Available on Kubernetes 1.20 and newer.
	IpFamilyPolicy KafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicy `field:"optional" json:"ipFamilyPolicy" yaml:"ipFamilyPolicy"`
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplateBrokersServiceMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

type KafkaSpecKafkaTemplateBrokersServiceIpFamilies string

const (
	// IPv4.
	KafkaSpecKafkaTemplateBrokersServiceIpFamilies_I_PV4 KafkaSpecKafkaTemplateBrokersServiceIpFamilies = "I_PV4"
	// IPv6.
	KafkaSpecKafkaTemplateBrokersServiceIpFamilies_I_PV6 KafkaSpecKafkaTemplateBrokersServiceIpFamilies = "I_PV6"
)

// Specifies the IP Family Policy used by the service.
//
// Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type. Available on Kubernetes 1.20 and newer.
type KafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicy string

const (
	// SingleStack.
	KafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicy_SINGLE_STACK KafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicy = "SINGLE_STACK"
	// PreferDualStack.
	KafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicy_PREFER_DUAL_STACK KafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicy = "PREFER_DUAL_STACK"
	// RequireDualStack.
	KafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicy_REQUIRE_DUAL_STACK KafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicy = "REQUIRE_DUAL_STACK"
)

// Metadata applied to the resource.
type KafkaSpecKafkaTemplateBrokersServiceMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for Secret with Kafka Cluster certificate public key.
type KafkaSpecKafkaTemplateClusterCaCert struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplateClusterCaCertMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplateClusterCaCertMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for the Kafka ClusterRoleBinding.
type KafkaSpecKafkaTemplateClusterRoleBinding struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplateClusterRoleBindingMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplateClusterRoleBindingMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for Kafka external bootstrap `Ingress`.
type KafkaSpecKafkaTemplateExternalBootstrapIngress struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplateExternalBootstrapIngressMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplateExternalBootstrapIngressMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for Kafka external bootstrap `Route`.
type KafkaSpecKafkaTemplateExternalBootstrapRoute struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplateExternalBootstrapRouteMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplateExternalBootstrapRouteMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for Kafka external bootstrap `Service`.
type KafkaSpecKafkaTemplateExternalBootstrapService struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplateExternalBootstrapServiceMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplateExternalBootstrapServiceMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for the Kafka init container.
type KafkaSpecKafkaTemplateInitContainer struct {
	// Environment variables which should be applied to the container.
	Env *[]*KafkaSpecKafkaTemplateInitContainerEnv `field:"optional" json:"env" yaml:"env"`
	// Security context for the container.
	SecurityContext *KafkaSpecKafkaTemplateInitContainerSecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
}

type KafkaSpecKafkaTemplateInitContainerEnv struct {
	// The environment variable key.
	Name *string `field:"optional" json:"name" yaml:"name"`
	// The environment variable value.
	Value *string `field:"optional" json:"value" yaml:"value"`
}

// Security context for the container.
type KafkaSpecKafkaTemplateInitContainerSecurityContext struct {
	AllowPrivilegeEscalation *bool `field:"optional" json:"allowPrivilegeEscalation" yaml:"allowPrivilegeEscalation"`
	Capabilities *KafkaSpecKafkaTemplateInitContainerSecurityContextCapabilities `field:"optional" json:"capabilities" yaml:"capabilities"`
	Privileged *bool `field:"optional" json:"privileged" yaml:"privileged"`
	ProcMount *string `field:"optional" json:"procMount" yaml:"procMount"`
	ReadOnlyRootFilesystem *bool `field:"optional" json:"readOnlyRootFilesystem" yaml:"readOnlyRootFilesystem"`
	RunAsGroup *float64 `field:"optional" json:"runAsGroup" yaml:"runAsGroup"`
	RunAsNonRoot *bool `field:"optional" json:"runAsNonRoot" yaml:"runAsNonRoot"`
	RunAsUser *float64 `field:"optional" json:"runAsUser" yaml:"runAsUser"`
	SeccompProfile *KafkaSpecKafkaTemplateInitContainerSecurityContextSeccompProfile `field:"optional" json:"seccompProfile" yaml:"seccompProfile"`
	SeLinuxOptions *KafkaSpecKafkaTemplateInitContainerSecurityContextSeLinuxOptions `field:"optional" json:"seLinuxOptions" yaml:"seLinuxOptions"`
	WindowsOptions *KafkaSpecKafkaTemplateInitContainerSecurityContextWindowsOptions `field:"optional" json:"windowsOptions" yaml:"windowsOptions"`
}

type KafkaSpecKafkaTemplateInitContainerSecurityContextCapabilities struct {
	Add *[]*string `field:"optional" json:"add" yaml:"add"`
	Drop *[]*string `field:"optional" json:"drop" yaml:"drop"`
}

type KafkaSpecKafkaTemplateInitContainerSecurityContextSeLinuxOptions struct {
	Level *string `field:"optional" json:"level" yaml:"level"`
	Role *string `field:"optional" json:"role" yaml:"role"`
	Type *string `field:"optional" json:"type" yaml:"type"`
	User *string `field:"optional" json:"user" yaml:"user"`
}

type KafkaSpecKafkaTemplateInitContainerSecurityContextSeccompProfile struct {
	LocalhostProfile *string `field:"optional" json:"localhostProfile" yaml:"localhostProfile"`
	Type *string `field:"optional" json:"type" yaml:"type"`
}

type KafkaSpecKafkaTemplateInitContainerSecurityContextWindowsOptions struct {
	GmsaCredentialSpec *string `field:"optional" json:"gmsaCredentialSpec" yaml:"gmsaCredentialSpec"`
	GmsaCredentialSpecName *string `field:"optional" json:"gmsaCredentialSpecName" yaml:"gmsaCredentialSpecName"`
	HostProcess *bool `field:"optional" json:"hostProcess" yaml:"hostProcess"`
	RunAsUserName *string `field:"optional" json:"runAsUserName" yaml:"runAsUserName"`
}

// Template for Secret of the Kafka Cluster JMX authentication.
type KafkaSpecKafkaTemplateJmxSecret struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplateJmxSecretMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplateJmxSecretMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for the Kafka broker container.
type KafkaSpecKafkaTemplateKafkaContainer struct {
	// Environment variables which should be applied to the container.
	Env *[]*KafkaSpecKafkaTemplateKafkaContainerEnv `field:"optional" json:"env" yaml:"env"`
	// Security context for the container.
	SecurityContext *KafkaSpecKafkaTemplateKafkaContainerSecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
}

type KafkaSpecKafkaTemplateKafkaContainerEnv struct {
	// The environment variable key.
	Name *string `field:"optional" json:"name" yaml:"name"`
	// The environment variable value.
	Value *string `field:"optional" json:"value" yaml:"value"`
}

// Security context for the container.
type KafkaSpecKafkaTemplateKafkaContainerSecurityContext struct {
	AllowPrivilegeEscalation *bool `field:"optional" json:"allowPrivilegeEscalation" yaml:"allowPrivilegeEscalation"`
	Capabilities *KafkaSpecKafkaTemplateKafkaContainerSecurityContextCapabilities `field:"optional" json:"capabilities" yaml:"capabilities"`
	Privileged *bool `field:"optional" json:"privileged" yaml:"privileged"`
	ProcMount *string `field:"optional" json:"procMount" yaml:"procMount"`
	ReadOnlyRootFilesystem *bool `field:"optional" json:"readOnlyRootFilesystem" yaml:"readOnlyRootFilesystem"`
	RunAsGroup *float64 `field:"optional" json:"runAsGroup" yaml:"runAsGroup"`
	RunAsNonRoot *bool `field:"optional" json:"runAsNonRoot" yaml:"runAsNonRoot"`
	RunAsUser *float64 `field:"optional" json:"runAsUser" yaml:"runAsUser"`
	SeccompProfile *KafkaSpecKafkaTemplateKafkaContainerSecurityContextSeccompProfile `field:"optional" json:"seccompProfile" yaml:"seccompProfile"`
	SeLinuxOptions *KafkaSpecKafkaTemplateKafkaContainerSecurityContextSeLinuxOptions `field:"optional" json:"seLinuxOptions" yaml:"seLinuxOptions"`
	WindowsOptions *KafkaSpecKafkaTemplateKafkaContainerSecurityContextWindowsOptions `field:"optional" json:"windowsOptions" yaml:"windowsOptions"`
}

type KafkaSpecKafkaTemplateKafkaContainerSecurityContextCapabilities struct {
	Add *[]*string `field:"optional" json:"add" yaml:"add"`
	Drop *[]*string `field:"optional" json:"drop" yaml:"drop"`
}

type KafkaSpecKafkaTemplateKafkaContainerSecurityContextSeLinuxOptions struct {
	Level *string `field:"optional" json:"level" yaml:"level"`
	Role *string `field:"optional" json:"role" yaml:"role"`
	Type *string `field:"optional" json:"type" yaml:"type"`
	User *string `field:"optional" json:"user" yaml:"user"`
}

type KafkaSpecKafkaTemplateKafkaContainerSecurityContextSeccompProfile struct {
	LocalhostProfile *string `field:"optional" json:"localhostProfile" yaml:"localhostProfile"`
	Type *string `field:"optional" json:"type" yaml:"type"`
}

type KafkaSpecKafkaTemplateKafkaContainerSecurityContextWindowsOptions struct {
	GmsaCredentialSpec *string `field:"optional" json:"gmsaCredentialSpec" yaml:"gmsaCredentialSpec"`
	GmsaCredentialSpecName *string `field:"optional" json:"gmsaCredentialSpecName" yaml:"gmsaCredentialSpecName"`
	HostProcess *bool `field:"optional" json:"hostProcess" yaml:"hostProcess"`
	RunAsUserName *string `field:"optional" json:"runAsUserName" yaml:"runAsUserName"`
}

// Template for Kafka per-pod `Ingress` used for access from outside of Kubernetes.
type KafkaSpecKafkaTemplatePerPodIngress struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplatePerPodIngressMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplatePerPodIngressMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for Kafka per-pod `Routes` used for access from outside of OpenShift.
type KafkaSpecKafkaTemplatePerPodRoute struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplatePerPodRouteMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplatePerPodRouteMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for Kafka per-pod `Services` used for access from outside of Kubernetes.
type KafkaSpecKafkaTemplatePerPodService struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplatePerPodServiceMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplatePerPodServiceMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for all Kafka `PersistentVolumeClaims`.
type KafkaSpecKafkaTemplatePersistentVolumeClaim struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplatePersistentVolumeClaimMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplatePersistentVolumeClaimMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for Kafka `Pods`.
type KafkaSpecKafkaTemplatePod struct {
	// The pod's affinity rules.
	Affinity *KafkaSpecKafkaTemplatePodAffinity `field:"optional" json:"affinity" yaml:"affinity"`
	// Indicates whether information about services should be injected into Pod's environment variables.
	EnableServiceLinks *bool `field:"optional" json:"enableServiceLinks" yaml:"enableServiceLinks"`
	// The pod's HostAliases.
	//
	// HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.
	HostAliases *[]*KafkaSpecKafkaTemplatePodHostAliases `field:"optional" json:"hostAliases" yaml:"hostAliases"`
	// List of references to secrets in the same namespace to use for pulling any of the images used by this Pod.
	//
	// When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	ImagePullSecrets *[]*KafkaSpecKafkaTemplatePodImagePullSecrets `field:"optional" json:"imagePullSecrets" yaml:"imagePullSecrets"`
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplatePodMetadata `field:"optional" json:"metadata" yaml:"metadata"`
	// The name of the priority class used to assign priority to the pods.
	//
	// For more information about priority classes, see {K8sPriorityClass}.
	PriorityClassName *string `field:"optional" json:"priorityClassName" yaml:"priorityClassName"`
	// The name of the scheduler used to dispatch this `Pod`.
	//
	// If not specified, the default scheduler will be used.
	SchedulerName *string `field:"optional" json:"schedulerName" yaml:"schedulerName"`
	// Configures pod-level security attributes and common container settings.
	SecurityContext *KafkaSpecKafkaTemplatePodSecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
	// The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal.
	//
	// Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.
	TerminationGracePeriodSeconds *float64 `field:"optional" json:"terminationGracePeriodSeconds" yaml:"terminationGracePeriodSeconds"`
	// Defines the total amount (for example `1Gi`) of local storage required for temporary EmptyDir volume (`/tmp`).
	//
	// Default value is `5Mi`.
	TmpDirSizeLimit *string `field:"optional" json:"tmpDirSizeLimit" yaml:"tmpDirSizeLimit"`
	// The pod's tolerations.
	Tolerations *[]*KafkaSpecKafkaTemplatePodTolerations `field:"optional" json:"tolerations" yaml:"tolerations"`
	// The pod's topology spread constraints.
	TopologySpreadConstraints *[]*KafkaSpecKafkaTemplatePodTopologySpreadConstraints `field:"optional" json:"topologySpreadConstraints" yaml:"topologySpreadConstraints"`
}

// The pod's affinity rules.
type KafkaSpecKafkaTemplatePodAffinity struct {
	NodeAffinity *KafkaSpecKafkaTemplatePodAffinityNodeAffinity `field:"optional" json:"nodeAffinity" yaml:"nodeAffinity"`
	PodAffinity *KafkaSpecKafkaTemplatePodAffinityPodAffinity `field:"optional" json:"podAffinity" yaml:"podAffinity"`
	PodAntiAffinity *KafkaSpecKafkaTemplatePodAffinityPodAntiAffinity `field:"optional" json:"podAntiAffinity" yaml:"podAntiAffinity"`
}

type KafkaSpecKafkaTemplatePodAffinityNodeAffinity struct {
	PreferredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"preferredDuringSchedulingIgnoredDuringExecution" yaml:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"requiredDuringSchedulingIgnoredDuringExecution" yaml:"requiredDuringSchedulingIgnoredDuringExecution"`
}

type KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	Preference *KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference `field:"optional" json:"preference" yaml:"preference"`
	Weight *float64 `field:"optional" json:"weight" yaml:"weight"`
}

type KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference struct {
	MatchExpressions *[]*KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchFields *[]*KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields `field:"optional" json:"matchFields" yaml:"matchFields"`
}

type KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	NodeSelectorTerms *[]*KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms `field:"optional" json:"nodeSelectorTerms" yaml:"nodeSelectorTerms"`
}

type KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms struct {
	MatchExpressions *[]*KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchFields *[]*KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields `field:"optional" json:"matchFields" yaml:"matchFields"`
}

type KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinity struct {
	PreferredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"preferredDuringSchedulingIgnoredDuringExecution" yaml:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"requiredDuringSchedulingIgnoredDuringExecution" yaml:"requiredDuringSchedulingIgnoredDuringExecution"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	PodAffinityTerm *KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm `field:"optional" json:"podAffinityTerm" yaml:"podAffinityTerm"`
	Weight *float64 `field:"optional" json:"weight" yaml:"weight"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm struct {
	LabelSelector *KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector struct {
	MatchExpressions *[]*KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	LabelSelector *KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector struct {
	MatchExpressions *[]*KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinity struct {
	PreferredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"preferredDuringSchedulingIgnoredDuringExecution" yaml:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"requiredDuringSchedulingIgnoredDuringExecution" yaml:"requiredDuringSchedulingIgnoredDuringExecution"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	PodAffinityTerm *KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm `field:"optional" json:"podAffinityTerm" yaml:"podAffinityTerm"`
	Weight *float64 `field:"optional" json:"weight" yaml:"weight"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm struct {
	LabelSelector *KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector struct {
	MatchExpressions *[]*KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	LabelSelector *KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector struct {
	MatchExpressions *[]*KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

// Template for Kafka `PodDisruptionBudget`.
type KafkaSpecKafkaTemplatePodDisruptionBudget struct {
	// Maximum number of unavailable pods to allow automatic Pod eviction.
	//
	// A Pod eviction is allowed when the `maxUnavailable` number of pods or fewer are unavailable after the eviction. Setting this value to 0 prevents all voluntary evictions, so the pods must be evicted manually. Defaults to 1.
	MaxUnavailable *float64 `field:"optional" json:"maxUnavailable" yaml:"maxUnavailable"`
	// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
	Metadata *KafkaSpecKafkaTemplatePodDisruptionBudgetMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
type KafkaSpecKafkaTemplatePodDisruptionBudgetMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

type KafkaSpecKafkaTemplatePodHostAliases struct {
	Hostnames *[]*string `field:"optional" json:"hostnames" yaml:"hostnames"`
	Ip *string `field:"optional" json:"ip" yaml:"ip"`
}

type KafkaSpecKafkaTemplatePodImagePullSecrets struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplatePodMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Configures pod-level security attributes and common container settings.
type KafkaSpecKafkaTemplatePodSecurityContext struct {
	FsGroup *float64 `field:"optional" json:"fsGroup" yaml:"fsGroup"`
	FsGroupChangePolicy *string `field:"optional" json:"fsGroupChangePolicy" yaml:"fsGroupChangePolicy"`
	RunAsGroup *float64 `field:"optional" json:"runAsGroup" yaml:"runAsGroup"`
	RunAsNonRoot *bool `field:"optional" json:"runAsNonRoot" yaml:"runAsNonRoot"`
	RunAsUser *float64 `field:"optional" json:"runAsUser" yaml:"runAsUser"`
	SeccompProfile *KafkaSpecKafkaTemplatePodSecurityContextSeccompProfile `field:"optional" json:"seccompProfile" yaml:"seccompProfile"`
	SeLinuxOptions *KafkaSpecKafkaTemplatePodSecurityContextSeLinuxOptions `field:"optional" json:"seLinuxOptions" yaml:"seLinuxOptions"`
	SupplementalGroups *[]*float64 `field:"optional" json:"supplementalGroups" yaml:"supplementalGroups"`
	Sysctls *[]*KafkaSpecKafkaTemplatePodSecurityContextSysctls `field:"optional" json:"sysctls" yaml:"sysctls"`
	WindowsOptions *KafkaSpecKafkaTemplatePodSecurityContextWindowsOptions `field:"optional" json:"windowsOptions" yaml:"windowsOptions"`
}

type KafkaSpecKafkaTemplatePodSecurityContextSeLinuxOptions struct {
	Level *string `field:"optional" json:"level" yaml:"level"`
	Role *string `field:"optional" json:"role" yaml:"role"`
	Type *string `field:"optional" json:"type" yaml:"type"`
	User *string `field:"optional" json:"user" yaml:"user"`
}

type KafkaSpecKafkaTemplatePodSecurityContextSeccompProfile struct {
	LocalhostProfile *string `field:"optional" json:"localhostProfile" yaml:"localhostProfile"`
	Type *string `field:"optional" json:"type" yaml:"type"`
}

type KafkaSpecKafkaTemplatePodSecurityContextSysctls struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
	Value *string `field:"optional" json:"value" yaml:"value"`
}

type KafkaSpecKafkaTemplatePodSecurityContextWindowsOptions struct {
	GmsaCredentialSpec *string `field:"optional" json:"gmsaCredentialSpec" yaml:"gmsaCredentialSpec"`
	GmsaCredentialSpecName *string `field:"optional" json:"gmsaCredentialSpecName" yaml:"gmsaCredentialSpecName"`
	HostProcess *bool `field:"optional" json:"hostProcess" yaml:"hostProcess"`
	RunAsUserName *string `field:"optional" json:"runAsUserName" yaml:"runAsUserName"`
}

// Template for Kafka `StrimziPodSet` resource.
type KafkaSpecKafkaTemplatePodSet struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplatePodSetMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplatePodSetMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

type KafkaSpecKafkaTemplatePodTolerations struct {
	Effect *string `field:"optional" json:"effect" yaml:"effect"`
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	TolerationSeconds *float64 `field:"optional" json:"tolerationSeconds" yaml:"tolerationSeconds"`
	Value *string `field:"optional" json:"value" yaml:"value"`
}

type KafkaSpecKafkaTemplatePodTopologySpreadConstraints struct {
	LabelSelector *KafkaSpecKafkaTemplatePodTopologySpreadConstraintsLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	MaxSkew *float64 `field:"optional" json:"maxSkew" yaml:"maxSkew"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
	WhenUnsatisfiable *string `field:"optional" json:"whenUnsatisfiable" yaml:"whenUnsatisfiable"`
}

type KafkaSpecKafkaTemplatePodTopologySpreadConstraintsLabelSelector struct {
	MatchExpressions *[]*KafkaSpecKafkaTemplatePodTopologySpreadConstraintsLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecKafkaTemplatePodTopologySpreadConstraintsLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

// Template for the Kafka service account.
type KafkaSpecKafkaTemplateServiceAccount struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplateServiceAccountMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplateServiceAccountMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for Kafka `StatefulSet`.
type KafkaSpecKafkaTemplateStatefulset struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecKafkaTemplateStatefulsetMetadata `field:"optional" json:"metadata" yaml:"metadata"`
	// PodManagementPolicy which will be used for this StatefulSet.
	//
	// Valid values are `Parallel` and `OrderedReady`. Defaults to `Parallel`.
	PodManagementPolicy KafkaSpecKafkaTemplateStatefulsetPodManagementPolicy `field:"optional" json:"podManagementPolicy" yaml:"podManagementPolicy"`
}

// Metadata applied to the resource.
type KafkaSpecKafkaTemplateStatefulsetMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// PodManagementPolicy which will be used for this StatefulSet.
//
// Valid values are `Parallel` and `OrderedReady`. Defaults to `Parallel`.
type KafkaSpecKafkaTemplateStatefulsetPodManagementPolicy string

const (
	// OrderedReady.
	KafkaSpecKafkaTemplateStatefulsetPodManagementPolicy_ORDERED_READY KafkaSpecKafkaTemplateStatefulsetPodManagementPolicy = "ORDERED_READY"
	// Parallel.
	KafkaSpecKafkaTemplateStatefulsetPodManagementPolicy_PARALLEL KafkaSpecKafkaTemplateStatefulsetPodManagementPolicy = "PARALLEL"
)

// Configuration of the ZooKeeper cluster.
type KafkaSpecZookeeper struct {
	// The number of pods in the cluster.
	Replicas *float64 `field:"required" json:"replicas" yaml:"replicas"`
	// Storage configuration (disk).
	//
	// Cannot be updated.
	Storage *KafkaSpecZookeeperStorage `field:"required" json:"storage" yaml:"storage"`
	// The ZooKeeper broker config.
	//
	// Properties with the following prefixes cannot be set: server., dataDir, dataLogDir, clientPort, authProvider, quorum.auth, requireClientAuthScheme, snapshot.trust.empty, standaloneEnabled, reconfigEnabled, 4lw.commands.whitelist, secureClientPort, ssl., serverCnxnFactory, sslQuorum (with the exception of: ssl.protocol, ssl.quorum.protocol, ssl.enabledProtocols, ssl.quorum.enabledProtocols, ssl.ciphersuites, ssl.quorum.ciphersuites, ssl.hostnameVerification, ssl.quorum.hostnameVerification).
	Config interface{} `field:"optional" json:"config" yaml:"config"`
	// The docker image for the pods.
	Image *string `field:"optional" json:"image" yaml:"image"`
	// JMX Options for Zookeeper nodes.
	JmxOptions *KafkaSpecZookeeperJmxOptions `field:"optional" json:"jmxOptions" yaml:"jmxOptions"`
	// JVM Options for pods.
	JvmOptions *KafkaSpecZookeeperJvmOptions `field:"optional" json:"jvmOptions" yaml:"jvmOptions"`
	// Pod liveness checking.
	LivenessProbe *KafkaSpecZookeeperLivenessProbe `field:"optional" json:"livenessProbe" yaml:"livenessProbe"`
	// Logging configuration for ZooKeeper.
	Logging *KafkaSpecZookeeperLogging `field:"optional" json:"logging" yaml:"logging"`
	// Metrics configuration.
	MetricsConfig *KafkaSpecZookeeperMetricsConfig `field:"optional" json:"metricsConfig" yaml:"metricsConfig"`
	// Pod readiness checking.
	ReadinessProbe *KafkaSpecZookeeperReadinessProbe `field:"optional" json:"readinessProbe" yaml:"readinessProbe"`
	// CPU and memory resources to reserve.
	Resources *KafkaSpecZookeeperResources `field:"optional" json:"resources" yaml:"resources"`
	// Template for ZooKeeper cluster resources.
	//
	// The template allows users to specify how are the `StatefulSet`, `Pods` and `Services` generated.
	Template *KafkaSpecZookeeperTemplate `field:"optional" json:"template" yaml:"template"`
}

// JMX Options for Zookeeper nodes.
type KafkaSpecZookeeperJmxOptions struct {
	// Authentication configuration for connecting to the JMX port.
	Authentication *KafkaSpecZookeeperJmxOptionsAuthentication `field:"optional" json:"authentication" yaml:"authentication"`
}

// Authentication configuration for connecting to the JMX port.
type KafkaSpecZookeeperJmxOptionsAuthentication struct {
	// Authentication type.
	//
	// Currently the only supported types are `password`.`password` type creates a username and protected port with no TLS.
	Type KafkaSpecZookeeperJmxOptionsAuthenticationType `field:"required" json:"type" yaml:"type"`
}

// Authentication type.
//
// Currently the only supported types are `password`.`password` type creates a username and protected port with no TLS.
type KafkaSpecZookeeperJmxOptionsAuthenticationType string

const (
	// password.
	KafkaSpecZookeeperJmxOptionsAuthenticationType_PASSWORD KafkaSpecZookeeperJmxOptionsAuthenticationType = "PASSWORD"
)

// JVM Options for pods.
type KafkaSpecZookeeperJvmOptions struct {
	// Specifies whether the Garbage Collection logging is enabled.
	//
	// The default is false.
	GcLoggingEnabled *bool `field:"optional" json:"gcLoggingEnabled" yaml:"gcLoggingEnabled"`
	// A map of additional system properties which will be passed using the `-D` option to the JVM.
	JavaSystemProperties *[]*KafkaSpecZookeeperJvmOptionsJavaSystemProperties `field:"optional" json:"javaSystemProperties" yaml:"javaSystemProperties"`
	// -Xms option to to the JVM.
	Xms *string `field:"optional" json:"xms" yaml:"xms"`
	// -Xmx option to to the JVM.
	Xmx *string `field:"optional" json:"xmx" yaml:"xmx"`
	// A map of -XX options to the JVM.
	Xx interface{} `field:"optional" json:"xx" yaml:"xx"`
}

type KafkaSpecZookeeperJvmOptionsJavaSystemProperties struct {
	// The system property name.
	Name *string `field:"optional" json:"name" yaml:"name"`
	// The system property value.
	Value *string `field:"optional" json:"value" yaml:"value"`
}

// Pod liveness checking.
type KafkaSpecZookeeperLivenessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	//
	// Defaults to 3. Minimum value is 1.
	FailureThreshold *float64 `field:"optional" json:"failureThreshold" yaml:"failureThreshold"`
	// The initial delay before first the health is first checked.
	//
	// Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds *float64 `field:"optional" json:"initialDelaySeconds" yaml:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	//
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *float64 `field:"optional" json:"periodSeconds" yaml:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	//
	// Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *float64 `field:"optional" json:"successThreshold" yaml:"successThreshold"`
	// The timeout for each attempted health check.
	//
	// Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds *float64 `field:"optional" json:"timeoutSeconds" yaml:"timeoutSeconds"`
}

// Logging configuration for ZooKeeper.
type KafkaSpecZookeeperLogging struct {
	// Logging type, must be either 'inline' or 'external'.
	Type KafkaSpecZookeeperLoggingType `field:"required" json:"type" yaml:"type"`
	// A Map from logger name to logger level.
	Loggers interface{} `field:"optional" json:"loggers" yaml:"loggers"`
	// `ConfigMap` entry where the logging configuration is stored.
	ValueFrom *KafkaSpecZookeeperLoggingValueFrom `field:"optional" json:"valueFrom" yaml:"valueFrom"`
}

// Logging type, must be either 'inline' or 'external'.
type KafkaSpecZookeeperLoggingType string

const (
	// inline.
	KafkaSpecZookeeperLoggingType_INLINE KafkaSpecZookeeperLoggingType = "INLINE"
	// external.
	KafkaSpecZookeeperLoggingType_EXTERNAL KafkaSpecZookeeperLoggingType = "EXTERNAL"
)

// `ConfigMap` entry where the logging configuration is stored.
type KafkaSpecZookeeperLoggingValueFrom struct {
	// Reference to the key in the ConfigMap containing the configuration.
	ConfigMapKeyRef *KafkaSpecZookeeperLoggingValueFromConfigMapKeyRef `field:"optional" json:"configMapKeyRef" yaml:"configMapKeyRef"`
}

// Reference to the key in the ConfigMap containing the configuration.
type KafkaSpecZookeeperLoggingValueFromConfigMapKeyRef struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Name *string `field:"optional" json:"name" yaml:"name"`
	Optional *bool `field:"optional" json:"optional" yaml:"optional"`
}

// Metrics configuration.
type KafkaSpecZookeeperMetricsConfig struct {
	// Metrics type.
	//
	// Only 'jmxPrometheusExporter' supported currently.
	Type KafkaSpecZookeeperMetricsConfigType `field:"required" json:"type" yaml:"type"`
	// ConfigMap entry where the Prometheus JMX Exporter configuration is stored.
	//
	// For details of the structure of this configuration, see the {JMXExporter}.
	ValueFrom *KafkaSpecZookeeperMetricsConfigValueFrom `field:"required" json:"valueFrom" yaml:"valueFrom"`
}

// Metrics type.
//
// Only 'jmxPrometheusExporter' supported currently.
type KafkaSpecZookeeperMetricsConfigType string

const (
	// jmxPrometheusExporter.
	KafkaSpecZookeeperMetricsConfigType_JMX_PROMETHEUS_EXPORTER KafkaSpecZookeeperMetricsConfigType = "JMX_PROMETHEUS_EXPORTER"
)

// ConfigMap entry where the Prometheus JMX Exporter configuration is stored.
//
// For details of the structure of this configuration, see the {JMXExporter}.
type KafkaSpecZookeeperMetricsConfigValueFrom struct {
	// Reference to the key in the ConfigMap containing the configuration.
	ConfigMapKeyRef *KafkaSpecZookeeperMetricsConfigValueFromConfigMapKeyRef `field:"optional" json:"configMapKeyRef" yaml:"configMapKeyRef"`
}

// Reference to the key in the ConfigMap containing the configuration.
type KafkaSpecZookeeperMetricsConfigValueFromConfigMapKeyRef struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Name *string `field:"optional" json:"name" yaml:"name"`
	Optional *bool `field:"optional" json:"optional" yaml:"optional"`
}

// Pod readiness checking.
type KafkaSpecZookeeperReadinessProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	//
	// Defaults to 3. Minimum value is 1.
	FailureThreshold *float64 `field:"optional" json:"failureThreshold" yaml:"failureThreshold"`
	// The initial delay before first the health is first checked.
	//
	// Default to 15 seconds. Minimum value is 0.
	InitialDelaySeconds *float64 `field:"optional" json:"initialDelaySeconds" yaml:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	//
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *float64 `field:"optional" json:"periodSeconds" yaml:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	//
	// Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *float64 `field:"optional" json:"successThreshold" yaml:"successThreshold"`
	// The timeout for each attempted health check.
	//
	// Default to 5 seconds. Minimum value is 1.
	TimeoutSeconds *float64 `field:"optional" json:"timeoutSeconds" yaml:"timeoutSeconds"`
}

// CPU and memory resources to reserve.
type KafkaSpecZookeeperResources struct {
	Limits interface{} `field:"optional" json:"limits" yaml:"limits"`
	Requests interface{} `field:"optional" json:"requests" yaml:"requests"`
}

// Storage configuration (disk).
//
// Cannot be updated.
type KafkaSpecZookeeperStorage struct {
	// Storage type, must be either 'ephemeral' or 'persistent-claim'.
	Type KafkaSpecZookeeperStorageType `field:"required" json:"type" yaml:"type"`
	// The storage class to use for dynamic volume allocation.
	Class *string `field:"optional" json:"class" yaml:"class"`
	// Specifies if the persistent volume claim has to be deleted when the cluster is un-deployed.
	DeleteClaim *bool `field:"optional" json:"deleteClaim" yaml:"deleteClaim"`
	// Storage identification number.
	//
	// It is mandatory only for storage volumes defined in a storage of type 'jbod'.
	Id *float64 `field:"optional" json:"id" yaml:"id"`
	// Overrides for individual brokers.
	//
	// The `overrides` field allows to specify a different configuration for different brokers.
	Overrides *[]*KafkaSpecZookeeperStorageOverrides `field:"optional" json:"overrides" yaml:"overrides"`
	// Specifies a specific persistent volume to use.
	//
	// It contains key:value pairs representing labels for selecting such a volume.
	Selector interface{} `field:"optional" json:"selector" yaml:"selector"`
	// When type=persistent-claim, defines the size of the persistent volume claim (i.e 1Gi). Mandatory when type=persistent-claim.
	Size *string `field:"optional" json:"size" yaml:"size"`
	// When type=ephemeral, defines the total amount of local storage required for this EmptyDir volume (for example 1Gi).
	SizeLimit *string `field:"optional" json:"sizeLimit" yaml:"sizeLimit"`
}

type KafkaSpecZookeeperStorageOverrides struct {
	// Id of the kafka broker (broker identifier).
	Broker *float64 `field:"optional" json:"broker" yaml:"broker"`
	// The storage class to use for dynamic volume allocation for this broker.
	Class *string `field:"optional" json:"class" yaml:"class"`
}

// Storage type, must be either 'ephemeral' or 'persistent-claim'.
type KafkaSpecZookeeperStorageType string

const (
	// ephemeral.
	KafkaSpecZookeeperStorageType_EPHEMERAL KafkaSpecZookeeperStorageType = "EPHEMERAL"
	// persistent-claim.
	KafkaSpecZookeeperStorageType_PERSISTENT_CLAIM KafkaSpecZookeeperStorageType = "PERSISTENT_CLAIM"
)

// Template for ZooKeeper cluster resources.
//
// The template allows users to specify how are the `StatefulSet`, `Pods` and `Services` generated.
type KafkaSpecZookeeperTemplate struct {
	// Template for ZooKeeper client `Service`.
	ClientService *KafkaSpecZookeeperTemplateClientService `field:"optional" json:"clientService" yaml:"clientService"`
	// Template for Secret of the Zookeeper Cluster JMX authentication.
	JmxSecret *KafkaSpecZookeeperTemplateJmxSecret `field:"optional" json:"jmxSecret" yaml:"jmxSecret"`
	// Template for ZooKeeper nodes `Service`.
	NodesService *KafkaSpecZookeeperTemplateNodesService `field:"optional" json:"nodesService" yaml:"nodesService"`
	// Template for all ZooKeeper `PersistentVolumeClaims`.
	PersistentVolumeClaim *KafkaSpecZookeeperTemplatePersistentVolumeClaim `field:"optional" json:"persistentVolumeClaim" yaml:"persistentVolumeClaim"`
	// Template for ZooKeeper `Pods`.
	Pod *KafkaSpecZookeeperTemplatePod `field:"optional" json:"pod" yaml:"pod"`
	// Template for ZooKeeper `PodDisruptionBudget`.
	PodDisruptionBudget *KafkaSpecZookeeperTemplatePodDisruptionBudget `field:"optional" json:"podDisruptionBudget" yaml:"podDisruptionBudget"`
	// Template for ZooKeeper `StrimziPodSet` resource.
	PodSet *KafkaSpecZookeeperTemplatePodSet `field:"optional" json:"podSet" yaml:"podSet"`
	// Template for the ZooKeeper service account.
	ServiceAccount *KafkaSpecZookeeperTemplateServiceAccount `field:"optional" json:"serviceAccount" yaml:"serviceAccount"`
	// Template for ZooKeeper `StatefulSet`.
	Statefulset *KafkaSpecZookeeperTemplateStatefulset `field:"optional" json:"statefulset" yaml:"statefulset"`
	// Template for the ZooKeeper container.
	ZookeeperContainer *KafkaSpecZookeeperTemplateZookeeperContainer `field:"optional" json:"zookeeperContainer" yaml:"zookeeperContainer"`
}

// Template for ZooKeeper client `Service`.
type KafkaSpecZookeeperTemplateClientService struct {
	// Specifies the IP Families used by the service.
	//
	// Available options are `IPv4` and `IPv6. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting. Available on Kubernetes 1.20 and newer.
	IpFamilies *[]KafkaSpecZookeeperTemplateClientServiceIpFamilies `field:"optional" json:"ipFamilies" yaml:"ipFamilies"`
	// Specifies the IP Family Policy used by the service.
	//
	// Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type. Available on Kubernetes 1.20 and newer.
	IpFamilyPolicy KafkaSpecZookeeperTemplateClientServiceIpFamilyPolicy `field:"optional" json:"ipFamilyPolicy" yaml:"ipFamilyPolicy"`
	// Metadata applied to the resource.
	Metadata *KafkaSpecZookeeperTemplateClientServiceMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

type KafkaSpecZookeeperTemplateClientServiceIpFamilies string

const (
	// IPv4.
	KafkaSpecZookeeperTemplateClientServiceIpFamilies_I_PV4 KafkaSpecZookeeperTemplateClientServiceIpFamilies = "I_PV4"
	// IPv6.
	KafkaSpecZookeeperTemplateClientServiceIpFamilies_I_PV6 KafkaSpecZookeeperTemplateClientServiceIpFamilies = "I_PV6"
)

// Specifies the IP Family Policy used by the service.
//
// Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type. Available on Kubernetes 1.20 and newer.
type KafkaSpecZookeeperTemplateClientServiceIpFamilyPolicy string

const (
	// SingleStack.
	KafkaSpecZookeeperTemplateClientServiceIpFamilyPolicy_SINGLE_STACK KafkaSpecZookeeperTemplateClientServiceIpFamilyPolicy = "SINGLE_STACK"
	// PreferDualStack.
	KafkaSpecZookeeperTemplateClientServiceIpFamilyPolicy_PREFER_DUAL_STACK KafkaSpecZookeeperTemplateClientServiceIpFamilyPolicy = "PREFER_DUAL_STACK"
	// RequireDualStack.
	KafkaSpecZookeeperTemplateClientServiceIpFamilyPolicy_REQUIRE_DUAL_STACK KafkaSpecZookeeperTemplateClientServiceIpFamilyPolicy = "REQUIRE_DUAL_STACK"
)

// Metadata applied to the resource.
type KafkaSpecZookeeperTemplateClientServiceMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for Secret of the Zookeeper Cluster JMX authentication.
type KafkaSpecZookeeperTemplateJmxSecret struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecZookeeperTemplateJmxSecretMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecZookeeperTemplateJmxSecretMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for ZooKeeper nodes `Service`.
type KafkaSpecZookeeperTemplateNodesService struct {
	// Specifies the IP Families used by the service.
	//
	// Available options are `IPv4` and `IPv6. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting. Available on Kubernetes 1.20 and newer.
	IpFamilies *[]KafkaSpecZookeeperTemplateNodesServiceIpFamilies `field:"optional" json:"ipFamilies" yaml:"ipFamilies"`
	// Specifies the IP Family Policy used by the service.
	//
	// Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type. Available on Kubernetes 1.20 and newer.
	IpFamilyPolicy KafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicy `field:"optional" json:"ipFamilyPolicy" yaml:"ipFamilyPolicy"`
	// Metadata applied to the resource.
	Metadata *KafkaSpecZookeeperTemplateNodesServiceMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

type KafkaSpecZookeeperTemplateNodesServiceIpFamilies string

const (
	// IPv4.
	KafkaSpecZookeeperTemplateNodesServiceIpFamilies_I_PV4 KafkaSpecZookeeperTemplateNodesServiceIpFamilies = "I_PV4"
	// IPv6.
	KafkaSpecZookeeperTemplateNodesServiceIpFamilies_I_PV6 KafkaSpecZookeeperTemplateNodesServiceIpFamilies = "I_PV6"
)

// Specifies the IP Family Policy used by the service.
//
// Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type. Available on Kubernetes 1.20 and newer.
type KafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicy string

const (
	// SingleStack.
	KafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicy_SINGLE_STACK KafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicy = "SINGLE_STACK"
	// PreferDualStack.
	KafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicy_PREFER_DUAL_STACK KafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicy = "PREFER_DUAL_STACK"
	// RequireDualStack.
	KafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicy_REQUIRE_DUAL_STACK KafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicy = "REQUIRE_DUAL_STACK"
)

// Metadata applied to the resource.
type KafkaSpecZookeeperTemplateNodesServiceMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for all ZooKeeper `PersistentVolumeClaims`.
type KafkaSpecZookeeperTemplatePersistentVolumeClaim struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecZookeeperTemplatePersistentVolumeClaimMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecZookeeperTemplatePersistentVolumeClaimMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for ZooKeeper `Pods`.
type KafkaSpecZookeeperTemplatePod struct {
	// The pod's affinity rules.
	Affinity *KafkaSpecZookeeperTemplatePodAffinity `field:"optional" json:"affinity" yaml:"affinity"`
	// Indicates whether information about services should be injected into Pod's environment variables.
	EnableServiceLinks *bool `field:"optional" json:"enableServiceLinks" yaml:"enableServiceLinks"`
	// The pod's HostAliases.
	//
	// HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.
	HostAliases *[]*KafkaSpecZookeeperTemplatePodHostAliases `field:"optional" json:"hostAliases" yaml:"hostAliases"`
	// List of references to secrets in the same namespace to use for pulling any of the images used by this Pod.
	//
	// When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	ImagePullSecrets *[]*KafkaSpecZookeeperTemplatePodImagePullSecrets `field:"optional" json:"imagePullSecrets" yaml:"imagePullSecrets"`
	// Metadata applied to the resource.
	Metadata *KafkaSpecZookeeperTemplatePodMetadata `field:"optional" json:"metadata" yaml:"metadata"`
	// The name of the priority class used to assign priority to the pods.
	//
	// For more information about priority classes, see {K8sPriorityClass}.
	PriorityClassName *string `field:"optional" json:"priorityClassName" yaml:"priorityClassName"`
	// The name of the scheduler used to dispatch this `Pod`.
	//
	// If not specified, the default scheduler will be used.
	SchedulerName *string `field:"optional" json:"schedulerName" yaml:"schedulerName"`
	// Configures pod-level security attributes and common container settings.
	SecurityContext *KafkaSpecZookeeperTemplatePodSecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
	// The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal.
	//
	// Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.
	TerminationGracePeriodSeconds *float64 `field:"optional" json:"terminationGracePeriodSeconds" yaml:"terminationGracePeriodSeconds"`
	// Defines the total amount (for example `1Gi`) of local storage required for temporary EmptyDir volume (`/tmp`).
	//
	// Default value is `5Mi`.
	TmpDirSizeLimit *string `field:"optional" json:"tmpDirSizeLimit" yaml:"tmpDirSizeLimit"`
	// The pod's tolerations.
	Tolerations *[]*KafkaSpecZookeeperTemplatePodTolerations `field:"optional" json:"tolerations" yaml:"tolerations"`
	// The pod's topology spread constraints.
	TopologySpreadConstraints *[]*KafkaSpecZookeeperTemplatePodTopologySpreadConstraints `field:"optional" json:"topologySpreadConstraints" yaml:"topologySpreadConstraints"`
}

// The pod's affinity rules.
type KafkaSpecZookeeperTemplatePodAffinity struct {
	NodeAffinity *KafkaSpecZookeeperTemplatePodAffinityNodeAffinity `field:"optional" json:"nodeAffinity" yaml:"nodeAffinity"`
	PodAffinity *KafkaSpecZookeeperTemplatePodAffinityPodAffinity `field:"optional" json:"podAffinity" yaml:"podAffinity"`
	PodAntiAffinity *KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinity `field:"optional" json:"podAntiAffinity" yaml:"podAntiAffinity"`
}

type KafkaSpecZookeeperTemplatePodAffinityNodeAffinity struct {
	PreferredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"preferredDuringSchedulingIgnoredDuringExecution" yaml:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution *KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"requiredDuringSchedulingIgnoredDuringExecution" yaml:"requiredDuringSchedulingIgnoredDuringExecution"`
}

type KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	Preference *KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference `field:"optional" json:"preference" yaml:"preference"`
	Weight *float64 `field:"optional" json:"weight" yaml:"weight"`
}

type KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference struct {
	MatchExpressions *[]*KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchFields *[]*KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields `field:"optional" json:"matchFields" yaml:"matchFields"`
}

type KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	NodeSelectorTerms *[]*KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms `field:"optional" json:"nodeSelectorTerms" yaml:"nodeSelectorTerms"`
}

type KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms struct {
	MatchExpressions *[]*KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchFields *[]*KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields `field:"optional" json:"matchFields" yaml:"matchFields"`
}

type KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinity struct {
	PreferredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"preferredDuringSchedulingIgnoredDuringExecution" yaml:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"requiredDuringSchedulingIgnoredDuringExecution" yaml:"requiredDuringSchedulingIgnoredDuringExecution"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	PodAffinityTerm *KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm `field:"optional" json:"podAffinityTerm" yaml:"podAffinityTerm"`
	Weight *float64 `field:"optional" json:"weight" yaml:"weight"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm struct {
	LabelSelector *KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector struct {
	MatchExpressions *[]*KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	LabelSelector *KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector struct {
	MatchExpressions *[]*KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinity struct {
	PreferredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"preferredDuringSchedulingIgnoredDuringExecution" yaml:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution *[]*KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution `field:"optional" json:"requiredDuringSchedulingIgnoredDuringExecution" yaml:"requiredDuringSchedulingIgnoredDuringExecution"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution struct {
	PodAffinityTerm *KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm `field:"optional" json:"podAffinityTerm" yaml:"podAffinityTerm"`
	Weight *float64 `field:"optional" json:"weight" yaml:"weight"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm struct {
	LabelSelector *KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector struct {
	MatchExpressions *[]*KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution struct {
	LabelSelector *KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Namespaces *[]*string `field:"optional" json:"namespaces" yaml:"namespaces"`
	NamespaceSelector *KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector `field:"optional" json:"namespaceSelector" yaml:"namespaceSelector"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector struct {
	MatchExpressions *[]*KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector struct {
	MatchExpressions *[]*KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

// Template for ZooKeeper `PodDisruptionBudget`.
type KafkaSpecZookeeperTemplatePodDisruptionBudget struct {
	// Maximum number of unavailable pods to allow automatic Pod eviction.
	//
	// A Pod eviction is allowed when the `maxUnavailable` number of pods or fewer are unavailable after the eviction. Setting this value to 0 prevents all voluntary evictions, so the pods must be evicted manually. Defaults to 1.
	MaxUnavailable *float64 `field:"optional" json:"maxUnavailable" yaml:"maxUnavailable"`
	// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
	Metadata *KafkaSpecZookeeperTemplatePodDisruptionBudgetMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
type KafkaSpecZookeeperTemplatePodDisruptionBudgetMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

type KafkaSpecZookeeperTemplatePodHostAliases struct {
	Hostnames *[]*string `field:"optional" json:"hostnames" yaml:"hostnames"`
	Ip *string `field:"optional" json:"ip" yaml:"ip"`
}

type KafkaSpecZookeeperTemplatePodImagePullSecrets struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
}

// Metadata applied to the resource.
type KafkaSpecZookeeperTemplatePodMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Configures pod-level security attributes and common container settings.
type KafkaSpecZookeeperTemplatePodSecurityContext struct {
	FsGroup *float64 `field:"optional" json:"fsGroup" yaml:"fsGroup"`
	FsGroupChangePolicy *string `field:"optional" json:"fsGroupChangePolicy" yaml:"fsGroupChangePolicy"`
	RunAsGroup *float64 `field:"optional" json:"runAsGroup" yaml:"runAsGroup"`
	RunAsNonRoot *bool `field:"optional" json:"runAsNonRoot" yaml:"runAsNonRoot"`
	RunAsUser *float64 `field:"optional" json:"runAsUser" yaml:"runAsUser"`
	SeccompProfile *KafkaSpecZookeeperTemplatePodSecurityContextSeccompProfile `field:"optional" json:"seccompProfile" yaml:"seccompProfile"`
	SeLinuxOptions *KafkaSpecZookeeperTemplatePodSecurityContextSeLinuxOptions `field:"optional" json:"seLinuxOptions" yaml:"seLinuxOptions"`
	SupplementalGroups *[]*float64 `field:"optional" json:"supplementalGroups" yaml:"supplementalGroups"`
	Sysctls *[]*KafkaSpecZookeeperTemplatePodSecurityContextSysctls `field:"optional" json:"sysctls" yaml:"sysctls"`
	WindowsOptions *KafkaSpecZookeeperTemplatePodSecurityContextWindowsOptions `field:"optional" json:"windowsOptions" yaml:"windowsOptions"`
}

type KafkaSpecZookeeperTemplatePodSecurityContextSeLinuxOptions struct {
	Level *string `field:"optional" json:"level" yaml:"level"`
	Role *string `field:"optional" json:"role" yaml:"role"`
	Type *string `field:"optional" json:"type" yaml:"type"`
	User *string `field:"optional" json:"user" yaml:"user"`
}

type KafkaSpecZookeeperTemplatePodSecurityContextSeccompProfile struct {
	LocalhostProfile *string `field:"optional" json:"localhostProfile" yaml:"localhostProfile"`
	Type *string `field:"optional" json:"type" yaml:"type"`
}

type KafkaSpecZookeeperTemplatePodSecurityContextSysctls struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
	Value *string `field:"optional" json:"value" yaml:"value"`
}

type KafkaSpecZookeeperTemplatePodSecurityContextWindowsOptions struct {
	GmsaCredentialSpec *string `field:"optional" json:"gmsaCredentialSpec" yaml:"gmsaCredentialSpec"`
	GmsaCredentialSpecName *string `field:"optional" json:"gmsaCredentialSpecName" yaml:"gmsaCredentialSpecName"`
	HostProcess *bool `field:"optional" json:"hostProcess" yaml:"hostProcess"`
	RunAsUserName *string `field:"optional" json:"runAsUserName" yaml:"runAsUserName"`
}

// Template for ZooKeeper `StrimziPodSet` resource.
type KafkaSpecZookeeperTemplatePodSet struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecZookeeperTemplatePodSetMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecZookeeperTemplatePodSetMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

type KafkaSpecZookeeperTemplatePodTolerations struct {
	Effect *string `field:"optional" json:"effect" yaml:"effect"`
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	TolerationSeconds *float64 `field:"optional" json:"tolerationSeconds" yaml:"tolerationSeconds"`
	Value *string `field:"optional" json:"value" yaml:"value"`
}

type KafkaSpecZookeeperTemplatePodTopologySpreadConstraints struct {
	LabelSelector *KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsLabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	MaxSkew *float64 `field:"optional" json:"maxSkew" yaml:"maxSkew"`
	TopologyKey *string `field:"optional" json:"topologyKey" yaml:"topologyKey"`
	WhenUnsatisfiable *string `field:"optional" json:"whenUnsatisfiable" yaml:"whenUnsatisfiable"`
}

type KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsLabelSelector struct {
	MatchExpressions *[]*KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsLabelSelectorMatchExpressions `field:"optional" json:"matchExpressions" yaml:"matchExpressions"`
	MatchLabels interface{} `field:"optional" json:"matchLabels" yaml:"matchLabels"`
}

type KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsLabelSelectorMatchExpressions struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Operator *string `field:"optional" json:"operator" yaml:"operator"`
	Values *[]*string `field:"optional" json:"values" yaml:"values"`
}

// Template for the ZooKeeper service account.
type KafkaSpecZookeeperTemplateServiceAccount struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecZookeeperTemplateServiceAccountMetadata `field:"optional" json:"metadata" yaml:"metadata"`
}

// Metadata applied to the resource.
type KafkaSpecZookeeperTemplateServiceAccountMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// Template for ZooKeeper `StatefulSet`.
type KafkaSpecZookeeperTemplateStatefulset struct {
	// Metadata applied to the resource.
	Metadata *KafkaSpecZookeeperTemplateStatefulsetMetadata `field:"optional" json:"metadata" yaml:"metadata"`
	// PodManagementPolicy which will be used for this StatefulSet.
	//
	// Valid values are `Parallel` and `OrderedReady`. Defaults to `Parallel`.
	PodManagementPolicy KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy `field:"optional" json:"podManagementPolicy" yaml:"podManagementPolicy"`
}

// Metadata applied to the resource.
type KafkaSpecZookeeperTemplateStatefulsetMetadata struct {
	// Annotations added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Annotations interface{} `field:"optional" json:"annotations" yaml:"annotations"`
	// Labels added to the resource template.
	//
	// Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
	Labels interface{} `field:"optional" json:"labels" yaml:"labels"`
}

// PodManagementPolicy which will be used for this StatefulSet.
//
// Valid values are `Parallel` and `OrderedReady`. Defaults to `Parallel`.
type KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy string

const (
	// OrderedReady.
	KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy_ORDERED_READY KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy = "ORDERED_READY"
	// Parallel.
	KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy_PARALLEL KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy = "PARALLEL"
)

// Template for the ZooKeeper container.
type KafkaSpecZookeeperTemplateZookeeperContainer struct {
	// Environment variables which should be applied to the container.
	Env *[]*KafkaSpecZookeeperTemplateZookeeperContainerEnv `field:"optional" json:"env" yaml:"env"`
	// Security context for the container.
	SecurityContext *KafkaSpecZookeeperTemplateZookeeperContainerSecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
}

type KafkaSpecZookeeperTemplateZookeeperContainerEnv struct {
	// The environment variable key.
	Name *string `field:"optional" json:"name" yaml:"name"`
	// The environment variable value.
	Value *string `field:"optional" json:"value" yaml:"value"`
}

// Security context for the container.
type KafkaSpecZookeeperTemplateZookeeperContainerSecurityContext struct {
	AllowPrivilegeEscalation *bool `field:"optional" json:"allowPrivilegeEscalation" yaml:"allowPrivilegeEscalation"`
	Capabilities *KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextCapabilities `field:"optional" json:"capabilities" yaml:"capabilities"`
	Privileged *bool `field:"optional" json:"privileged" yaml:"privileged"`
	ProcMount *string `field:"optional" json:"procMount" yaml:"procMount"`
	ReadOnlyRootFilesystem *bool `field:"optional" json:"readOnlyRootFilesystem" yaml:"readOnlyRootFilesystem"`
	RunAsGroup *float64 `field:"optional" json:"runAsGroup" yaml:"runAsGroup"`
	RunAsNonRoot *bool `field:"optional" json:"runAsNonRoot" yaml:"runAsNonRoot"`
	RunAsUser *float64 `field:"optional" json:"runAsUser" yaml:"runAsUser"`
	SeccompProfile *KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextSeccompProfile `field:"optional" json:"seccompProfile" yaml:"seccompProfile"`
	SeLinuxOptions *KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextSeLinuxOptions `field:"optional" json:"seLinuxOptions" yaml:"seLinuxOptions"`
	WindowsOptions *KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextWindowsOptions `field:"optional" json:"windowsOptions" yaml:"windowsOptions"`
}

type KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextCapabilities struct {
	Add *[]*string `field:"optional" json:"add" yaml:"add"`
	Drop *[]*string `field:"optional" json:"drop" yaml:"drop"`
}

type KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextSeLinuxOptions struct {
	Level *string `field:"optional" json:"level" yaml:"level"`
	Role *string `field:"optional" json:"role" yaml:"role"`
	Type *string `field:"optional" json:"type" yaml:"type"`
	User *string `field:"optional" json:"user" yaml:"user"`
}

type KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextSeccompProfile struct {
	LocalhostProfile *string `field:"optional" json:"localhostProfile" yaml:"localhostProfile"`
	Type *string `field:"optional" json:"type" yaml:"type"`
}

type KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextWindowsOptions struct {
	GmsaCredentialSpec *string `field:"optional" json:"gmsaCredentialSpec" yaml:"gmsaCredentialSpec"`
	GmsaCredentialSpecName *string `field:"optional" json:"gmsaCredentialSpecName" yaml:"gmsaCredentialSpecName"`
	HostProcess *bool `field:"optional" json:"hostProcess" yaml:"hostProcess"`
	RunAsUserName *string `field:"optional" json:"runAsUserName" yaml:"runAsUserName"`
}

