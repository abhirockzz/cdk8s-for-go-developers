// dynamodbservicesk8saws
package dynamodbservicesk8saws

import (
	_init_ "example.com/dynamodb-cdk8s/imports/dynamodbservicesk8saws/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"example.com/dynamodb-cdk8s/imports/dynamodbservicesk8saws/internal"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/cdk8s-team/cdk8s-core-go/cdk8s/v2"
)

// Table is the Schema for the Tables API.
type Table interface {
	cdk8s.ApiObject
	// The group portion of the API version (e.g. `authorization.k8s.io`).
	ApiGroup() *string
	// The object's API version (e.g. `authorization.k8s.io/v1`).
	ApiVersion() *string
	// The chart in which this object is defined.
	Chart() cdk8s.Chart
	// The object kind.
	Kind() *string
	// Metadata associated with this API object.
	Metadata() cdk8s.ApiObjectMetadataDefinition
	// The name of the API object.
	//
	// If a name is specified in `metadata.name` this will be the name returned.
	// Otherwise, a name will be generated by calling
	// `Chart.of(this).generatedObjectName(this)`, which by default uses the
	// construct path to generate a DNS-compatible name for the resource.
	Name() *string
	// The tree node.
	Node() constructs.Node
	// Create a dependency between this ApiObject and other constructs.
	//
	// These can be other ApiObjects, Charts, or custom.
	AddDependency(dependencies ...constructs.IConstruct)
	// Applies a set of RFC-6902 JSON-Patch operations to the manifest synthesized for this API object.
	//
	// Example:
	//     kubePod.addJsonPatch(JsonPatch.replace('/spec/enableServiceLinks', true));
	//
	AddJsonPatch(ops ...cdk8s.JsonPatch)
	// Renders the object to Kubernetes JSON.
	ToJson() interface{}
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for Table
type jsiiProxy_Table struct {
	internal.Type__cdk8sApiObject
}

func (j *jsiiProxy_Table) ApiGroup() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiGroup",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Table) ApiVersion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiVersion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Table) Chart() cdk8s.Chart {
	var returns cdk8s.Chart
	_jsii_.Get(
		j,
		"chart",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Table) Kind() *string {
	var returns *string
	_jsii_.Get(
		j,
		"kind",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Table) Metadata() cdk8s.ApiObjectMetadataDefinition {
	var returns cdk8s.ApiObjectMetadataDefinition
	_jsii_.Get(
		j,
		"metadata",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Table) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Table) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}


// Defines a "Table" API object.
func NewTable(scope constructs.Construct, id *string, props *TableProps) Table {
	_init_.Initialize()

	j := jsiiProxy_Table{}

	_jsii_.Create(
		"dynamodbservicesk8saws.Table",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Defines a "Table" API object.
func NewTable_Override(t Table, scope constructs.Construct, id *string, props *TableProps) {
	_init_.Initialize()

	_jsii_.Create(
		"dynamodbservicesk8saws.Table",
		[]interface{}{scope, id, props},
		t,
	)
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
func Table_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"dynamodbservicesk8saws.Table",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Renders a Kubernetes manifest for "Table".
//
// This can be used to inline resource manifests inside other objects (e.g. as templates).
func Table_Manifest(props *TableProps) interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"dynamodbservicesk8saws.Table",
		"manifest",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Returns the `ApiObject` named `Resource` which is a child of the given construct.
//
// If `c` is an `ApiObject`, it is returned directly. Throws an
// exception if the construct does not have a child named `Default` _or_ if
// this child is not an `ApiObject`.
func Table_Of(c constructs.IConstruct) cdk8s.ApiObject {
	_init_.Initialize()

	var returns cdk8s.ApiObject

	_jsii_.StaticInvoke(
		"dynamodbservicesk8saws.Table",
		"of",
		[]interface{}{c},
		&returns,
	)

	return returns
}

func Table_GVK() *cdk8s.GroupVersionKind {
	_init_.Initialize()
	var returns *cdk8s.GroupVersionKind
	_jsii_.StaticGet(
		"dynamodbservicesk8saws.Table",
		"GVK",
		&returns,
	)
	return returns
}

func (t *jsiiProxy_Table) AddDependency(dependencies ...constructs.IConstruct) {
	args := []interface{}{}
	for _, a := range dependencies {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		t,
		"addDependency",
		args,
	)
}

func (t *jsiiProxy_Table) AddJsonPatch(ops ...cdk8s.JsonPatch) {
	args := []interface{}{}
	for _, a := range ops {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		t,
		"addJsonPatch",
		args,
	)
}

func (t *jsiiProxy_Table) ToJson() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		t,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (t *jsiiProxy_Table) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		t,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Table is the Schema for the Tables API.
type TableProps struct {
	Metadata *cdk8s.ApiObjectMetadata `field:"optional" json:"metadata" yaml:"metadata"`
	// TableSpec defines the desired state of Table.
	Spec *TableSpec `field:"optional" json:"spec" yaml:"spec"`
}

// TableSpec defines the desired state of Table.
type TableSpec struct {
	// An array of attributes that describe the key schema for the table and indexes.
	AttributeDefinitions *[]*TableSpecAttributeDefinitions `field:"required" json:"attributeDefinitions" yaml:"attributeDefinitions"`
	// Specifies the attributes that make up the primary key for a table or an index.
	//
	// The attributes in KeySchema must also be defined in the AttributeDefinitions array. For more information, see Data Model (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html) in the Amazon DynamoDB Developer Guide.
	// Each KeySchemaElement in the array is composed of:
	// * AttributeName - The name of this key attribute.
	// * KeyType - The role that the key attribute will assume: HASH - partition    key RANGE - sort key
	// The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from the DynamoDB usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.
	// The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
	// For a simple primary key (partition key), you must provide exactly one element with a KeyType of HASH.
	// For a composite primary key (partition key and sort key), you must provide exactly two elements, in this order: The first element must have a KeyType of HASH, and the second element must have a KeyType of RANGE.
	// For more information, see Working with Tables (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key) in the Amazon DynamoDB Developer Guide.
	KeySchema *[]*TableSpecKeySchema `field:"required" json:"keySchema" yaml:"keySchema"`
	// The name of the table to create.
	TableName *string `field:"required" json:"tableName" yaml:"tableName"`
	// Controls how you are charged for read and write throughput and how you manage capacity.
	//
	// This setting can be changed later.
	// * PROVISIONED - We recommend using PROVISIONED for predictable workloads.    PROVISIONED sets the billing mode to Provisioned Mode (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual).
	// * PAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable    workloads. PAY_PER_REQUEST sets the billing mode to On-Demand Mode (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand).
	BillingMode *string `field:"optional" json:"billingMode" yaml:"billingMode"`
	// One or more global secondary indexes (the maximum is 20) to be created on the table.
	//
	// Each global secondary index in the array includes the following:
	// * IndexName - The name of the global secondary index. Must be unique only    for this table.
	// * KeySchema - Specifies the key schema for the global secondary index.
	// * Projection - Specifies attributes that are copied (projected) from the    table into the index. These are in addition to the primary key attributes    and index key attributes, which are automatically projected. Each attribute    specification is composed of: ProjectionType - One of the following: KEYS_ONLY    - Only the index and primary keys are projected into the index. INCLUDE    - Only the specified table attributes are projected into the index. The    list of projected attributes is in NonKeyAttributes. ALL - All of the    table attributes are projected into the index. NonKeyAttributes - A list    of one or more non-key attribute names that are projected into the secondary    index. The total count of attributes provided in NonKeyAttributes, summed    across all of the secondary indexes, must not exceed 100. If you project    the same attribute into two different indexes, this counts as two distinct    attributes when determining the total.
	// * ProvisionedThroughput - The provisioned throughput settings for the    global secondary index, consisting of read and write capacity units.
	GlobalSecondaryIndexes *[]*TableSpecGlobalSecondaryIndexes `field:"optional" json:"globalSecondaryIndexes" yaml:"globalSecondaryIndexes"`
	// One or more local secondary indexes (the maximum is 5) to be created on the table.
	//
	// Each index is scoped to a given partition key value. There is a 10 GB size limit per partition key value; otherwise, the size of a local secondary index is unconstrained.
	// Each local secondary index in the array includes the following:
	// * IndexName - The name of the local secondary index. Must be unique only    for this table.
	// * KeySchema - Specifies the key schema for the local secondary index.    The key schema must begin with the same partition key as the table.
	// * Projection - Specifies attributes that are copied (projected) from the    table into the index. These are in addition to the primary key attributes    and index key attributes, which are automatically projected. Each attribute    specification is composed of: ProjectionType - One of the following: KEYS_ONLY    - Only the index and primary keys are projected into the index. INCLUDE    - Only the specified table attributes are projected into the index. The    list of projected attributes is in NonKeyAttributes. ALL - All of the    table attributes are projected into the index. NonKeyAttributes - A list    of one or more non-key attribute names that are projected into the secondary    index. The total count of attributes provided in NonKeyAttributes, summed    across all of the secondary indexes, must not exceed 100. If you project    the same attribute into two different indexes, this counts as two distinct    attributes when determining the total.
	LocalSecondaryIndexes *[]*TableSpecLocalSecondaryIndexes `field:"optional" json:"localSecondaryIndexes" yaml:"localSecondaryIndexes"`
	// Represents the provisioned throughput settings for a specified table or index.
	//
	// The settings can be modified using the UpdateTable operation.
	// If you set BillingMode as PROVISIONED, you must specify this property. If you set BillingMode as PAY_PER_REQUEST, you cannot specify this property.
	// For current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
	ProvisionedThroughput *TableSpecProvisionedThroughput `field:"optional" json:"provisionedThroughput" yaml:"provisionedThroughput"`
	// Represents the settings used to enable server-side encryption.
	SseSpecification *TableSpecSseSpecification `field:"optional" json:"sseSpecification" yaml:"sseSpecification"`
	// The settings for DynamoDB Streams on the table.
	//
	// These settings consist of:
	// * StreamEnabled - Indicates whether DynamoDB Streams is to be enabled    (true) or disabled (false).
	// * StreamViewType - When an item in the table is modified, StreamViewType    determines what information is written to the table's stream. Valid values    for StreamViewType are: KEYS_ONLY - Only the key attributes of the modified    item are written to the stream. NEW_IMAGE - The entire item, as it appears    after it was modified, is written to the stream. OLD_IMAGE - The entire    item, as it appeared before it was modified, is written to the stream.    NEW_AND_OLD_IMAGES - Both the new and the old item images of the item    are written to the stream.
	StreamSpecification *TableSpecStreamSpecification `field:"optional" json:"streamSpecification" yaml:"streamSpecification"`
	// A list of key-value pairs to label the table.
	//
	// For more information, see Tagging for DynamoDB (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html).
	Tags *[]*TableSpecTags `field:"optional" json:"tags" yaml:"tags"`
	// Represents the settings used to enable or disable Time to Live for the specified table.
	TimeToLive *TableSpecTimeToLive `field:"optional" json:"timeToLive" yaml:"timeToLive"`
}

// Represents an attribute for describing the key schema for the table and indexes.
type TableSpecAttributeDefinitions struct {
	AttributeName *string `field:"optional" json:"attributeName" yaml:"attributeName"`
	AttributeType *string `field:"optional" json:"attributeType" yaml:"attributeType"`
}

// Represents the properties of a global secondary index.
type TableSpecGlobalSecondaryIndexes struct {
	IndexName *string `field:"optional" json:"indexName" yaml:"indexName"`
	KeySchema *[]*TableSpecGlobalSecondaryIndexesKeySchema `field:"optional" json:"keySchema" yaml:"keySchema"`
	// Represents attributes that are copied (projected) from the table into an index.
	//
	// These are in addition to the primary key attributes and index key attributes, which are automatically projected.
	Projection *TableSpecGlobalSecondaryIndexesProjection `field:"optional" json:"projection" yaml:"projection"`
	// Represents the provisioned throughput settings for a specified table or index.
	//
	// The settings can be modified using the UpdateTable operation.
	// For current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
	ProvisionedThroughput *TableSpecGlobalSecondaryIndexesProvisionedThroughput `field:"optional" json:"provisionedThroughput" yaml:"provisionedThroughput"`
}

// Represents a single element of a key schema.
//
// A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.
// A KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.
// A KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.
type TableSpecGlobalSecondaryIndexesKeySchema struct {
	AttributeName *string `field:"optional" json:"attributeName" yaml:"attributeName"`
	KeyType *string `field:"optional" json:"keyType" yaml:"keyType"`
}

// Represents attributes that are copied (projected) from the table into an index.
//
// These are in addition to the primary key attributes and index key attributes, which are automatically projected.
type TableSpecGlobalSecondaryIndexesProjection struct {
	NonKeyAttributes *[]*string `field:"optional" json:"nonKeyAttributes" yaml:"nonKeyAttributes"`
	ProjectionType *string `field:"optional" json:"projectionType" yaml:"projectionType"`
}

// Represents the provisioned throughput settings for a specified table or index.
//
// The settings can be modified using the UpdateTable operation.
// For current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
type TableSpecGlobalSecondaryIndexesProvisionedThroughput struct {
	ReadCapacityUnits *float64 `field:"optional" json:"readCapacityUnits" yaml:"readCapacityUnits"`
	WriteCapacityUnits *float64 `field:"optional" json:"writeCapacityUnits" yaml:"writeCapacityUnits"`
}

// Represents a single element of a key schema.
//
// A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.
// A KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.
// A KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.
type TableSpecKeySchema struct {
	AttributeName *string `field:"optional" json:"attributeName" yaml:"attributeName"`
	KeyType *string `field:"optional" json:"keyType" yaml:"keyType"`
}

// Represents the properties of a local secondary index.
type TableSpecLocalSecondaryIndexes struct {
	IndexName *string `field:"optional" json:"indexName" yaml:"indexName"`
	KeySchema *[]*TableSpecLocalSecondaryIndexesKeySchema `field:"optional" json:"keySchema" yaml:"keySchema"`
	// Represents attributes that are copied (projected) from the table into an index.
	//
	// These are in addition to the primary key attributes and index key attributes, which are automatically projected.
	Projection *TableSpecLocalSecondaryIndexesProjection `field:"optional" json:"projection" yaml:"projection"`
}

// Represents a single element of a key schema.
//
// A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.
// A KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.
// A KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.
type TableSpecLocalSecondaryIndexesKeySchema struct {
	AttributeName *string `field:"optional" json:"attributeName" yaml:"attributeName"`
	KeyType *string `field:"optional" json:"keyType" yaml:"keyType"`
}

// Represents attributes that are copied (projected) from the table into an index.
//
// These are in addition to the primary key attributes and index key attributes, which are automatically projected.
type TableSpecLocalSecondaryIndexesProjection struct {
	NonKeyAttributes *[]*string `field:"optional" json:"nonKeyAttributes" yaml:"nonKeyAttributes"`
	ProjectionType *string `field:"optional" json:"projectionType" yaml:"projectionType"`
}

// Represents the provisioned throughput settings for a specified table or index.
//
// The settings can be modified using the UpdateTable operation.
// If you set BillingMode as PROVISIONED, you must specify this property. If you set BillingMode as PAY_PER_REQUEST, you cannot specify this property.
// For current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
type TableSpecProvisionedThroughput struct {
	ReadCapacityUnits *float64 `field:"optional" json:"readCapacityUnits" yaml:"readCapacityUnits"`
	WriteCapacityUnits *float64 `field:"optional" json:"writeCapacityUnits" yaml:"writeCapacityUnits"`
}

// Represents the settings used to enable server-side encryption.
type TableSpecSseSpecification struct {
	Enabled *bool `field:"optional" json:"enabled" yaml:"enabled"`
	KmsMasterKeyId *string `field:"optional" json:"kmsMasterKeyId" yaml:"kmsMasterKeyId"`
	SseType *string `field:"optional" json:"sseType" yaml:"sseType"`
}

// The settings for DynamoDB Streams on the table.
//
// These settings consist of:
// * StreamEnabled - Indicates whether DynamoDB Streams is to be enabled    (true) or disabled (false).
// * StreamViewType - When an item in the table is modified, StreamViewType    determines what information is written to the table's stream. Valid values    for StreamViewType are: KEYS_ONLY - Only the key attributes of the modified    item are written to the stream. NEW_IMAGE - The entire item, as it appears    after it was modified, is written to the stream. OLD_IMAGE - The entire    item, as it appeared before it was modified, is written to the stream.    NEW_AND_OLD_IMAGES - Both the new and the old item images of the item    are written to the stream.
type TableSpecStreamSpecification struct {
	StreamEnabled *bool `field:"optional" json:"streamEnabled" yaml:"streamEnabled"`
	StreamViewType *string `field:"optional" json:"streamViewType" yaml:"streamViewType"`
}

// Describes a tag.
//
// A tag is a key-value pair. You can add up to 50 tags to a single DynamoDB table.
// AWS-assigned tag names and values are automatically assigned the aws: prefix, which the user cannot assign. AWS-assigned tag names do not count towards the tag limit of 50. User-assigned tag names have the prefix user: in the Cost Allocation Report. You cannot backdate the application of a tag.
// For an overview on tagging DynamoDB resources, see Tagging for DynamoDB (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html) in the Amazon DynamoDB Developer Guide.
type TableSpecTags struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Value *string `field:"optional" json:"value" yaml:"value"`
}

// Represents the settings used to enable or disable Time to Live for the specified table.
type TableSpecTimeToLive struct {
	AttributeName *string `field:"optional" json:"attributeName" yaml:"attributeName"`
	Enabled *bool `field:"optional" json:"enabled" yaml:"enabled"`
}

